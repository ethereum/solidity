(* Generated by prepare.py *)
Require Import CoqOfSolidity.CoqOfSolidity.
Require Import simulations.CoqOfSolidity.
Import Stdlib.

Module Morpho_2267.
  Definition finalize_allocation (memPtr : U256.t) (size : U256.t) : M.t unit :=
    let~ newFreePtr := [[ add ~(| memPtr, and ~(| add ~(| size, 31 |), not ~(| 31 |) |) |) ]] in
    do~ [[
      M.if_unit (| or ~(| gt ~(| newFreePtr, sub ~(| shl ~(| 64, 1 |), 1 |) |), lt ~(| newFreePtr, memPtr |) |),
        do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
        do~ [[ mstore ~(| 4, 0x41 |) ]] in
        do~ [[ revert ~(| 0, 0x24 |) ]] in
        M.pure tt
      |)
    ]] in
    do~ [[ mstore ~(| 64, newFreePtr |) ]] in
    M.pure tt.

  Definition body : M.t unit :=
    do~ [[
      let~ _1 := [[ memoryguard ~(| 0xa0 |) ]] in
      do~ [[ mstore ~(| 64, _1 |) ]] in
      do~ [[
        M.if_unit (| callvalue ~(||),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ programSize := [[ datasize ~(| 0x4d6f7270686f5f32323637000000000000000000000000000000000000000000 |) ]] in
      let~ argSize := [[ sub ~(| codesize ~(||), programSize |) ]] in
      do~ [[ finalize_allocation ~(| _1, argSize |) ]] in
      do~ [[ codecopy ~(| _1, programSize, argSize |) ]] in
      do~ [[
        M.if_unit (| slt ~(| sub ~(| add ~(| _1, argSize |), _1 |), 32 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value := [[ mload ~(| _1 |) ]] in
      let~ _2 := [[ and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, _2 |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ memPtr := [[ mload ~(| 64 |) ]] in
      let~ newFreePtr := [[ add ~(| memPtr, 64 |) ]] in
      do~ [[
        M.if_unit (| or ~(| gt ~(| newFreePtr, sub ~(| shl ~(| 64, 1 |), 1 |) |), lt ~(| newFreePtr, memPtr |) |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x41 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| 64, newFreePtr |) ]] in
      do~ [[ mstore ~(| memPtr, 12 |) ]] in
      let~ _3 := [[ add ~(| memPtr, 32 |) ]] in
      do~ [[ mstore ~(| _3, 0x7a65726f20616464726573730000000000000000000000000000000000000000 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| _2 |),
          let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
          do~ [[ mstore ~(| memPtr_1, shl ~(| 229, 4594637 |) |) ]] in
          do~ [[ mstore ~(| add ~(| memPtr_1, 4 |), 32 |) ]] in
          let~ length := [[ mload ~(| memPtr |) ]] in
          do~ [[ mstore ~(| add ~(| memPtr_1, 36 |), length |) ]] in
          do~ [[ mcopy ~(| add ~(| memPtr_1, 68 |), _3, length |) ]] in
          do~ [[ mstore ~(| add ~(| add ~(| memPtr_1, length |), 68 |), 0 |) ]] in
          do~ [[ revert ~(| memPtr_1, add ~(| sub ~(| add ~(| memPtr_1, and ~(| add ~(| length, 31 |), not ~(| 31 |) |) |), memPtr_1 |), 68 |) |) ]] in
          M.pure tt
        |)
      ]] in
      let~ expr_mpos := [[ mload ~(| 64 |) ]] in
      let~ _4 := [[ add ~(| expr_mpos, 32 |) ]] in
      do~ [[ mstore ~(| _4, 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218 |) ]] in
      do~ [[ mstore ~(| add ~(| expr_mpos, 64 |), chainid ~(||) |) ]] in
      do~ [[ mstore ~(| add ~(| expr_mpos, 96 |), address ~(||) |) ]] in
      do~ [[ mstore ~(| expr_mpos, 96 |) ]] in
      do~ [[ finalize_allocation ~(| expr_mpos, 128 |) ]] in
      do~ [[ mstore ~(| 128, keccak256 ~(| _4, mload ~(| expr_mpos |) |) |) ]] in
      do~ [[ sstore ~(| 0, or ~(| and ~(| sload ~(| 0 |), not ~(| sub ~(| shl ~(| 160, 1 |), 1 |) |) |), _2 |) |) ]] in
      let~ _5 := [[ mload ~(| 64 |) ]] in
      do~ [[ log2 ~(| 0, 0, 0x167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb5, _2 |) ]] in
      let~ _6 := [[ datasize ~(| 0x4d6f7270686f5f323236375f6465706c6f796564000000000000000000000000 |) ]] in
      do~ [[ codecopy ~(| _5, dataoffset ~(| 0x4d6f7270686f5f323236375f6465706c6f796564000000000000000000000000 |), _6 |) ]] in
      do~ [[ setimmutable ~(| _5, 0x3634000000000000000000000000000000000000000000000000000000000000, mload ~(| 128 |) |) ]] in
      do~ [[ return_ ~(| _5, _6 |) ]] in
      M.pure tt
    ]] in
    M.pure tt.

  Module Morpho_2267_deployed.
    Definition checked_add_uint128 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| and ~(| x, 0xffffffffffffffffffffffffffffffff |), and ~(| y, 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[
        M.if_unit (| gt ~(| sum, 0xffffffffffffffffffffffffffffffff |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure sum.

    Definition checked_mul_uint256 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ product := [[ mul ~(| x, y |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| or ~(| iszero ~(| x |), eq ~(| y, div ~(| product, x |) |) |) |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure product.

    Definition increment_uint256 (value : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| eq ~(| value, not ~(| 0 |) |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ ret := [[ add ~(| value, 1 |) ]] in
      M.pure ret.

    Definition checked_div_uint256 (x : U256.t) (y : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| iszero ~(| y |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x12 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ r := [[ div ~(| x, y |) ]] in
      M.pure r.

    Definition fun_toAssetsDown (var_shares : U256.t) (var_totalAssets : U256.t) (var_totalShares : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| var_totalAssets, 0x01 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalAssets, sum |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ sum_1 := [[ add ~(| var_totalShares, 0x0f4240 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalShares, sum_1 |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ checked_div_uint256 ~(| checked_mul_uint256 ~(| var_shares, sum |), sum_1 |) ]] in
      M.pure var.

    Definition fun_toSharesDown (var_assets : U256.t) (var_totalAssets : U256.t) (var_totalShares : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| var_totalShares, 0x0f4240 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalShares, sum |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ sum_1 := [[ add ~(| var_totalAssets, 0x01 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalAssets, sum_1 |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ checked_div_uint256 ~(| checked_mul_uint256 ~(| var_assets, sum |), sum_1 |) ]] in
      M.pure var.

    Definition checked_add_uint256 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| x, y |) ]] in
      do~ [[
        M.if_unit (| gt ~(| x, sum |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure sum.

    Definition fun_mulDivUp (var_x : U256.t) (var_y : U256.t) (var_d : U256.t) : M.t U256.t :=
      let~ expr := [[ checked_mul_uint256 ~(| var_x, var_y |) ]] in
      let~ diff := [[ add ~(| var_d, not ~(| 0 |) |) ]] in
      do~ [[
        M.if_unit (| gt ~(| diff, var_d |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ checked_div_uint256 ~(| checked_add_uint256 ~(| expr, diff |), var_d |) ]] in
      M.pure var.

    Definition fun_toAssetsUp (var_shares : U256.t) (var_totalAssets : U256.t) (var_totalShares : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| var_totalAssets, 0x01 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalAssets, sum |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ sum_1 := [[ add ~(| var_totalShares, 0x0f4240 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalShares, sum_1 |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ fun_mulDivUp ~(| var_shares, sum, sum_1 |) ]] in
      M.pure var.

    Definition fun_isHealthy (var_marketParams_mpos : U256.t) (var_id : U256.t) (var_borrower : U256.t) (var_collateralPrice : U256.t) : M.t U256.t :=
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x02 |) ]] in
      let~ dataSlot := [[ keccak256 ~(| 0, 0x40 |) ]] in
      let~ dataSlot_1 := [[ 0 ]] in
      do~ [[ mstore ~(| 0, and ~(| var_borrower, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| 0x20, dataSlot |) ]] in
      let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in
      let~ cleaned := [[ and ~(| sload ~(| add ~(| dataSlot_1, 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
      let~ cleaned_1 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
      let~ expr := [[ fun_toAssetsUp ~(| cleaned, cleaned_1, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 1 |) |) |) |) ]] in
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x02 |) ]] in
      let~ dataSlot_2 := [[ keccak256 ~(| 0, 0x40 |) ]] in
      let~ dataSlot_3 := [[ 0 ]] in
      do~ [[ mstore ~(| 0, and ~(| var_borrower, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| 0x20, dataSlot_2 |) ]] in
      let~ dataSlot_3 := [[ keccak256 ~(| 0, 0x40 |) ]] in
      let~ r := [[ div ~(| checked_mul_uint256 ~(| shr ~(| 128, sload ~(| add ~(| dataSlot_3, 1 |) |) |), var_collateralPrice |), 0xc097ce7bc90715b34b9f1000000000 |) ]] in
      let~ _1 := [[ mload ~(| add ~(| var_marketParams_mpos, 128 |) |) ]] in
      let~ var := [[ 0 ]] in
      let~ var := [[ div ~(| checked_mul_uint256 ~(| r, _1 |), 0x0de0b6b3a7640000 |) ]] in
      let~ var_ := [[ iszero ~(| lt ~(| var, expr |) |) ]] in
      M.pure var_.

    Definition fun_isSenderAuthorized (var_onBehalf : U256.t) : M.t U256.t :=
      let~ _1 := [[ and ~(| var_onBehalf, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      let~ expr := [[ eq ~(| caller ~(||), _1 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| expr |),
          do~ [[ mstore ~(| 0, _1 |) ]] in
          do~ [[ mstore ~(| 0x20, 0x06 |) ]] in
          let~ dataSlot := [[ keccak256 ~(| 0, 0x40 |) ]] in
          let~ dataSlot_1 := [[ 0 ]] in
          do~ [[ mstore ~(| 0, and ~(| caller ~(||), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
          do~ [[ mstore ~(| 0x20, dataSlot |) ]] in
          let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in
          let~ expr := [[ and ~(| sload ~(| dataSlot_1 |), 0xff |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ expr ]] in
      M.pure var.

    Definition abi_encode_address_uint256_uint256 (headStart : U256.t) (value0 : U256.t) (value1 : U256.t) (value2 : U256.t) : M.t U256.t :=
      let~ tail := [[ add ~(| headStart, 96 |) ]] in
      do~ [[ mstore ~(| headStart, and ~(| value0, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 32 |), value1 |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 64 |), value2 |) ]] in
      M.pure tail.

    Definition require_helper_string (condition : U256.t) (expr_167_mpos : U256.t) : M.t unit :=
      do~ [[
        M.if_unit (| iszero ~(| condition |),
          let~ memPtr := [[ mload ~(| 64 |) ]] in
          do~ [[ mstore ~(| memPtr, shl ~(| 229, 4594637 |) |) ]] in
          do~ [[ mstore ~(| add ~(| memPtr, 4 |), 32 |) ]] in
          let~ length := [[ mload ~(| expr_167_mpos |) ]] in
          do~ [[ mstore ~(| add ~(| memPtr, 36 |), length |) ]] in
          do~ [[ mcopy ~(| add ~(| memPtr, 68 |), add ~(| expr_167_mpos, 32 |), length |) ]] in
          do~ [[ mstore ~(| add ~(| add ~(| memPtr, length |), 68 |), 0 |) ]] in
          do~ [[ revert ~(| memPtr, add ~(| sub ~(| add ~(| memPtr, and ~(| add ~(| length, 31 |), not ~(| 31 |) |) |), memPtr |), 68 |) |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure tt.

    Definition finalize_allocation (memPtr : U256.t) (size : U256.t) : M.t unit :=
      let~ newFreePtr := [[ add ~(| memPtr, and ~(| add ~(| size, 31 |), not ~(| 31 |) |) |) ]] in
      do~ [[
        M.if_unit (| or ~(| gt ~(| newFreePtr, 0xffffffffffffffff |), lt ~(| newFreePtr, memPtr |) |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x41 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| 64, newFreePtr |) ]] in
      M.pure tt.

    Definition fun_toUint128 (var_x : U256.t) : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr, 64 |) ]] in
      do~ [[ mstore ~(| memPtr, 20 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 32 |), 0x6d61782075696e74313238206578636565646564000000000000000000000000 |) ]] in
      do~ [[ require_helper_string ~(| iszero ~(| gt ~(| var_x, 0xffffffffffffffffffffffffffffffff |) |), memPtr |) ]] in
      let~ var := [[ and ~(| var_x, 0xffffffffffffffffffffffffffffffff |) ]] in
      M.pure var.

    Definition extract_returndata : M.t U256.t :=
      do~ [[
        (* switch *)
        let* δ := ltac:(M.monadic (returndatasize ~(||))) in
        if δ =? 0 then
          let~ data := [[ 96 ]] in
          M.pure tt
        else if δ =? (* Unsupported node: default *) then
          let~ _1 := [[ returndatasize ~(||) ]] in
          let~ size := [[ 0 ]] in
          do~ [[
            M.if_unit (| gt ~(| _1, 0xffffffffffffffff |),
              do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
              do~ [[ mstore ~(| 4, 0x41 |) ]] in
              do~ [[ revert ~(| 0, 0x24 |) ]] in
              M.pure tt
            |)
          ]] in
          let~ size := [[ add ~(| and ~(| add ~(| _1, 31 |), not ~(| 31 |) |), 0x20 |) ]] in
          let~ memPtr := [[ mload ~(| 64 |) ]] in
          do~ [[ finalize_allocation ~(| memPtr, size |) ]] in
          do~ [[ mstore ~(| memPtr, _1 |) ]] in
          let~ data := [[ memPtr ]] in
          do~ [[ returndatacopy ~(| add ~(| memPtr, 0x20 |), 0, returndatasize ~(||) |) ]] in
          M.pure tt
        else
          M.pure tt
      ]] in
      M.pure data.

    Definition checked_sub_uint128 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ diff := [[ sub ~(| and ~(| x, 0xffffffffffffffffffffffffffffffff |), and ~(| y, 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[
        M.if_unit (| gt ~(| diff, 0xffffffffffffffffffffffffffffffff |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure diff.

    Definition abi_encode_struct_MarketParams (value : U256.t) (pos : U256.t) : M.t unit :=
      do~ [[ mstore ~(| pos, and ~(| mload ~(| value |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| pos, 0x20 |), and ~(| mload ~(| add ~(| value, 0x20 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| pos, 0x40 |), and ~(| mload ~(| add ~(| value, 0x40 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| pos, 0x60 |), and ~(| mload ~(| add ~(| value, 0x60 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| pos, 0x80 |), mload ~(| add ~(| value, 0x80 |) |) |) ]] in
      M.pure tt.

    Definition abi_encode_struct_MarketParams_struct_Market_storage (headStart : U256.t) (value0 : U256.t) (value1 : U256.t) : M.t U256.t :=
      let~ tail := [[ add ~(| headStart, 352 |) ]] in
      do~ [[ abi_encode_struct_MarketParams ~(| value0, headStart |) ]] in
      let~ slotValue := [[ sload ~(| value1 |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 160 |), and ~(| slotValue, 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 192 |), shr ~(| 128, slotValue |) |) ]] in
      let~ slotValue_1 := [[ sload ~(| add ~(| value1, 0x01 |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 224 |), and ~(| slotValue_1, 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 256 |), shr ~(| 128, slotValue_1 |) |) ]] in
      let~ slotValue_2 := [[ sload ~(| add ~(| value1, 0x02 |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 288 |), and ~(| slotValue_2, 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 320 |), shr ~(| 128, slotValue_2 |) |) ]] in
      M.pure tail.

    Definition abi_decode_address (offset : U256.t) : M.t U256.t :=
      let~ value := [[ calldataload ~(| offset |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure value.

    Definition finalize_allocation_24985 (memPtr : U256.t) : M.t unit :=
      let~ newFreePtr := [[ add ~(| memPtr, 0xa0 |) ]] in
      do~ [[
        M.if_unit (| or ~(| gt ~(| newFreePtr, 0xffffffffffffffff |), lt ~(| newFreePtr, memPtr |) |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x41 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| 64, newFreePtr |) ]] in
      M.pure tt.

    Definition abi_decode_struct_MarketParams (headStart : U256.t) (end_ : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| slt ~(| sub ~(| end_, headStart |), 0xa0 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ memPtr := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation_24985 ~(| memPtr |) ]] in
      let~ value := [[ memPtr ]] in
      do~ [[ mstore ~(| memPtr, abi_decode_address ~(| headStart |) |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 32 |), abi_decode_address ~(| add ~(| headStart, 32 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 64 |), abi_decode_address ~(| add ~(| headStart, 64 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 96 |), abi_decode_address ~(| add ~(| headStart, 96 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 128 |), calldataload ~(| add ~(| headStart, 128 |) |) |) ]] in
      M.pure value.

    Definition abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_address (dataEnd : U256.t) : M.t (U256.t * U256.t * U256.t * U256.t * U256.t) :=
      do~ [[
        M.if_unit (| slt ~(| add ~(| dataEnd, not ~(| 3 |) |), 288 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value0 := [[ abi_decode_struct_MarketParams ~(| 4, dataEnd |) ]] in
      let~ value1 := [[ calldataload ~(| 164 |) ]] in
      let~ value2 := [[ calldataload ~(| 196 |) ]] in
      let~ value := [[ 0 ]] in
      let~ value := [[ calldataload ~(| 228 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value3 := [[ value ]] in
      let~ value_1 := [[ 0 ]] in
      let~ value_1 := [[ calldataload ~(| 260 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value_1, and ~(| value_1, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value4 := [[ value_1 ]] in
      M.pure (value0, value1, value2, value3, value4).

    Definition array_allocation_size_array_bytes32_dyn (length : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| gt ~(| length, 0xffffffffffffffff |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x41 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ size := [[ add ~(| shl ~(| 5, length |), 0x20 |) ]] in
      M.pure size.

    Definition copy_literal_to_memory_032999fca1188e683f4a316e0deaa9b99b639717686bfe7875953796fc849c71 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 7 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x6e6f20636f646500000000000000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition copy_literal_to_memory_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 12 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x756e617574686f72697a65640000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 9 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x6e6f74206f776e65720000000000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 18 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x6d61726b6574206e6f7420637265617465640000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition abi_decode_address_24983 : M.t U256.t :=
      let~ value := [[ calldataload ~(| 36 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure value.

    Definition abi_decode_struct_MarketParams_24972 (end_ : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| slt ~(| add ~(| end_, not ~(| 3 |) |), 0xa0 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ memPtr := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation_24985 ~(| memPtr |) ]] in
      let~ value := [[ memPtr ]] in
      let~ value_1 := [[ 0 ]] in
      let~ value_1 := [[ calldataload ~(| 4 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value_1, and ~(| value_1, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| memPtr, value_1 |) ]] in
      let~ value_2 := [[ 0 ]] in
      let~ value_2 := [[ calldataload ~(| 36 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value_2, and ~(| value_2, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 32 |), value_2 |) ]] in
      let~ value_3 := [[ 0 ]] in
      let~ value_3 := [[ calldataload ~(| 68 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value_3, and ~(| value_3, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 64 |), value_3 |) ]] in
      let~ value_4 := [[ 0 ]] in
      let~ value_4 := [[ calldataload ~(| 100 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value_4, and ~(| value_4, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 96 |), value_4 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 128 |), calldataload ~(| 132 |) |) ]] in
      M.pure value.

    Definition update_storage_value_offsett_uint128_to_uint128 (slot : U256.t) (value : U256.t) : M.t unit :=
      let~ _1 := [[ sload ~(| slot |) ]] in
      do~ [[ sstore ~(| slot, or ~(| and ~(| _1, 0xffffffffffffffffffffffffffffffff |), and ~(| shl ~(| 128, value |), not ~(| 0xffffffffffffffffffffffffffffffff |) |) |) |) ]] in
      M.pure tt.

    Definition abi_decode_bool_fromMemory (headStart : U256.t) (dataEnd : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| slt ~(| sub ~(| dataEnd, headStart |), 32 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value := [[ mload ~(| headStart |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, iszero ~(| iszero ~(| value |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value0 := [[ value ]] in
      M.pure value0.

    Definition abi_encode_address_uint256 (headStart : U256.t) (value0 : U256.t) (value1 : U256.t) : M.t U256.t :=
      let~ tail := [[ add ~(| headStart, 64 |) ]] in
      do~ [[ mstore ~(| headStart, and ~(| value0, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 32 |), value1 |) ]] in
      M.pure tail.

    Definition fun_safeTransfer (var_token_3293_address : U256.t) (var_to : U256.t) (var_value : U256.t) : M.t unit :=
      let~ _1 := [[ and ~(| var_token_3293_address, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      let~ expr := [[ iszero ~(| iszero ~(| extcodesize ~(| _1 |) |) |) ]] in
      do~ [[ require_helper_string ~(| expr, copy_literal_to_memory_032999fca1188e683f4a316e0deaa9b99b639717686bfe7875953796fc849c71 ~(||) |) ]] in
      let~ expr_3329_mpos := [[ mload ~(| 64 |) ]] in
      let~ _2 := [[ add ~(| expr_3329_mpos, 0x20 |) ]] in
      do~ [[ mstore ~(| _2, shl ~(| 224, 0xa9059cbb |) |) ]] in
      let~ _3 := [[ sub ~(| abi_encode_address_uint256 ~(| add ~(| expr_3329_mpos, 36 |), var_to, var_value |), expr_3329_mpos |) ]] in
      do~ [[ mstore ~(| expr_3329_mpos, add ~(| _3, not ~(| 31 |) |) |) ]] in
      do~ [[ finalize_allocation ~(| expr_3329_mpos, _3 |) ]] in
      let~ expr_component := [[ call ~(| gas ~(||), _1, 0x00, _2, mload ~(| expr_3329_mpos |), 0x00, 0x00 |) ]] in
      let~ expr_3330_component_2_mpos := [[ extract_returndata ~(||) ]] in
      let~ size := [[ 0 ]] in
      let~ _4 := [[ 0 ]] in
      let~ _4 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr := [[ mload ~(| size |) ]] in
      do~ [[ finalize_allocation ~(| memPtr, size |) ]] in
      do~ [[ mstore ~(| memPtr, 17 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 0x20 |), 0x7472616e73666572207265766572746564000000000000000000000000000000 |) ]] in
      do~ [[ require_helper_string ~(| expr_component, memPtr |) ]] in
      let~ _5 := [[ mload ~(| expr_3330_component_2_mpos |) ]] in
      let~ expr_1 := [[ iszero ~(| _5 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| expr_1 |),
          let~ expr_1 := [[ abi_decode_bool_fromMemory ~(| add ~(| expr_3330_component_2_mpos, 0x20 |), add ~(| add ~(| expr_3330_component_2_mpos, _5 |), 0x20 |) |) ]] in
          M.pure tt
        |)
      ]] in
      let~ size_1 := [[ 0 ]] in
      let~ _6 := [[ 0 ]] in
      let~ _6 := [[ 0 ]] in
      let~ size_1 := [[ size ]] in
      let~ memPtr_1 := [[ mload ~(| size |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, size |) ]] in
      do~ [[ mstore ~(| memPtr_1, 23 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 0x20 |), 0x7472616e736665722072657475726e65642066616c7365000000000000000000 |) ]] in
      do~ [[ require_helper_string ~(| expr_1, memPtr_1 |) ]] in
      M.pure tt.

    Definition copy_literal_to_memory_ee16f499aa24e0ee394849a0c205c7424513d7e3afc7cb8ee1d45156f4e28a49 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 22 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x696e73756666696369656e74206c697175696469747900000000000000000000 |) ]] in
      M.pure memPtr.

    Definition copy_literal_to_memory_3b807cd2312cb7a8816bf8f90c8b8fabc63939f2d074d6f3426cd3f6aa264952 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 23 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x696e73756666696369656e7420636f6c6c61746572616c000000000000000000 |) ]] in
      M.pure memPtr.

    Definition abi_decode_address_24971 : M.t U256.t :=
      let~ value := [[ calldataload ~(| 4 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure value.

    Definition abi_encode_uint256_bytes_calldata (headStart : U256.t) (value0 : U256.t) (value1 : U256.t) (value2 : U256.t) : M.t U256.t :=
      do~ [[ mstore ~(| headStart, value0 |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 32 |), 64 |) ]] in
      do~ [[ mstore ~(| add ~(| headStart, 64 |), value2 |) ]] in
      do~ [[ calldatacopy ~(| add ~(| headStart, 96 |), value1, value2 |) ]] in
      do~ [[ mstore ~(| add ~(| add ~(| headStart, value2 |), 96 |), 0 |) ]] in
      let~ tail := [[ add ~(| add ~(| headStart, and ~(| add ~(| value2, 31 |), not ~(| 31 |) |) |), 96 |) ]] in
      M.pure tail.

    Definition checked_sub_uint256 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ diff := [[ sub ~(| x, y |) ]] in
      do~ [[
        M.if_unit (| gt ~(| diff, x |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure diff.

    Definition copy_literal_to_memory_66565ea0c208e7335f4209a28fd1a047a5930228ef63dde212841a4b5b376b7e : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 11 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x7a65726f20617373657473000000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition fun_safeTransferFrom (var_token_address : U256.t) (var_from : U256.t) (var_to : U256.t) (var_value : U256.t) : M.t unit :=
      let~ _1 := [[ and ~(| var_token_address, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      let~ expr := [[ iszero ~(| iszero ~(| extcodesize ~(| _1 |) |) |) ]] in
      do~ [[ require_helper_string ~(| expr, copy_literal_to_memory_032999fca1188e683f4a316e0deaa9b99b639717686bfe7875953796fc849c71 ~(||) |) ]] in
      let~ expr_3398_mpos := [[ mload ~(| 64 |) ]] in
      let~ _2 := [[ add ~(| expr_3398_mpos, 0x20 |) ]] in
      do~ [[ mstore ~(| _2, shl ~(| 224, 0x23b872dd |) |) ]] in
      do~ [[ mstore ~(| add ~(| expr_3398_mpos, 36 |), and ~(| var_from, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| expr_3398_mpos, 68 |), and ~(| var_to, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| add ~(| expr_3398_mpos, 100 |), var_value |) ]] in
      do~ [[ mstore ~(| expr_3398_mpos, 100 |) ]] in
      do~ [[ finalize_allocation ~(| expr_3398_mpos, 132 |) ]] in
      let~ expr_3399_component := [[ call ~(| gas ~(||), _1, 0x00, _2, mload ~(| expr_3398_mpos |), 0x00, 0x00 |) ]] in
      let~ expr_component_mpos := [[ extract_returndata ~(||) ]] in
      let~ size := [[ 0x00 ]] in
      let~ _3 := [[ 0x00 ]] in
      let~ _3 := [[ 0x00 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr := [[ mload ~(| size |) ]] in
      do~ [[ finalize_allocation ~(| memPtr, size |) ]] in
      do~ [[ mstore ~(| memPtr, 21 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr, 0x20 |), 0x7472616e7366657246726f6d2072657665727465640000000000000000000000 |) ]] in
      do~ [[ require_helper_string ~(| expr_3399_component, memPtr |) ]] in
      let~ _4 := [[ mload ~(| expr_component_mpos |) ]] in
      let~ expr_1 := [[ iszero ~(| _4 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| expr_1 |),
          let~ expr_1 := [[ abi_decode_bool_fromMemory ~(| add ~(| expr_component_mpos, 0x20 |), add ~(| add ~(| expr_component_mpos, _4 |), 0x20 |) |) ]] in
          M.pure tt
        |)
      ]] in
      let~ size_1 := [[ 0x00 ]] in
      let~ _5 := [[ 0x00 ]] in
      let~ _5 := [[ 0x00 ]] in
      let~ size_1 := [[ size ]] in
      let~ memPtr_1 := [[ mload ~(| size |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, size |) ]] in
      do~ [[ mstore ~(| memPtr_1, 27 |) ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 0x20 |), 0x7472616e7366657246726f6d2072657475726e65642066616c73650000000000 |) ]] in
      do~ [[ require_helper_string ~(| expr_1, memPtr_1 |) ]] in
      M.pure tt.

    Definition fun_toSharesUp (var_assets : U256.t) (var_totalAssets : U256.t) (var_totalShares : U256.t) : M.t U256.t :=
      let~ sum := [[ add ~(| var_totalShares, 0x0f4240 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalShares, sum |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ sum_1 := [[ add ~(| var_totalAssets, 0x01 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| var_totalAssets, sum_1 |),
          do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
          do~ [[ mstore ~(| 4, 0x11 |) ]] in
          do~ [[ revert ~(| 0, 0x24 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ fun_mulDivUp ~(| var_assets, sum, sum_1 |) ]] in
      M.pure var.

    Definition copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 11 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x616c726561647920736574000000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition abi_decode_address_24975 : M.t U256.t :=
      let~ value := [[ calldataload ~(| 196 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure value.

    Definition copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 12 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x7a65726f20616464726573730000000000000000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 : M.t U256.t :=
      let~ size := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ _1 := [[ 0 ]] in
      let~ size := [[ 64 ]] in
      let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
      do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
      do~ [[ mstore ~(| memPtr_1, 18 |) ]] in
      let~ memPtr := [[ memPtr_1 ]] in
      do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x696e636f6e73697374656e7420696e7075740000000000000000000000000000 |) ]] in
      M.pure memPtr.

    Definition abi_decode_bytes_calldata (offset : U256.t) (end_ : U256.t) : M.t (U256.t * U256.t) :=
      do~ [[
        M.if_unit (| iszero ~(| slt ~(| add ~(| offset, 0x1f |), end_ |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ length := [[ calldataload ~(| offset |) ]] in
      do~ [[
        M.if_unit (| gt ~(| length, 0xffffffffffffffff |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ arrayPos := [[ add ~(| offset, 0x20 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| add ~(| add ~(| offset, length |), 0x20 |), end_ |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      M.pure (arrayPos, length).

    Definition abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_bytes_calldata (dataEnd : U256.t) : M.t (U256.t * U256.t * U256.t * U256.t * U256.t * U256.t) :=
      do~ [[
        M.if_unit (| slt ~(| add ~(| dataEnd, not ~(| 3 |) |), 288 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value0 := [[ abi_decode_struct_MarketParams ~(| 4, dataEnd |) ]] in
      let~ value1 := [[ calldataload ~(| 164 |) ]] in
      let~ value2 := [[ calldataload ~(| 196 |) ]] in
      let~ value := [[ 0 ]] in
      let~ value := [[ calldataload ~(| 228 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| eq ~(| value, and ~(| value, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value3 := [[ value ]] in
      let~ offset := [[ calldataload ~(| 260 |) ]] in
      do~ [[
        M.if_unit (| gt ~(| offset, 0xffffffffffffffff |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ '(value4_1, value5_1) := [[ abi_decode_bytes_calldata ~(| add ~(| 4, offset |), dataEnd |) ]] in
      let~ value4 := [[ value4_1 ]] in
      let~ value5 := [[ value5_1 ]] in
      M.pure (value0, value1, value2, value3, value4, value5).

    Definition abi_decode_uint256_fromMemory (headStart : U256.t) (dataEnd : U256.t) : M.t U256.t :=
      do~ [[
        M.if_unit (| slt ~(| sub ~(| dataEnd, headStart |), 32 |),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure tt
        |)
      ]] in
      let~ value0 := [[ mload ~(| headStart |) ]] in
      M.pure value0.

    Definition fun__isHealthy (var_marketParams_2125_mpos : U256.t) (var_id : U256.t) (var_borrower : U256.t) : M.t U256.t :=
      let~ var := [[ 0 ]] in
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x02 |) ]] in
      let~ dataSlot := [[ keccak256 ~(| 0, 0x40 |) ]] in
      let~ dataSlot_1 := [[ 0 ]] in
      do~ [[ mstore ~(| 0, and ~(| var_borrower, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
      do~ [[ mstore ~(| 0x20, dataSlot |) ]] in
      let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| and ~(| sload ~(| add ~(| dataSlot_1, 1 |) |), 0xffffffffffffffffffffffffffffffff |) |),
          let~ var := [[ 1 ]] in
          do~ [[ M.leave ]] in
          M.pure tt
        |)
      ]] in
      let~ cleaned := [[ and ~(| mload ~(| add ~(| var_marketParams_2125_mpos, 0x40 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      let~ _1 := [[ mload ~(| 0x40 |) ]] in
      do~ [[ mstore ~(| _1, shl ~(| 225, 0x501ad8ff |) |) ]] in
      let~ _2 := [[ staticcall ~(| gas ~(||), cleaned, _1, 4, _1, 0x20 |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| _2 |),
          let~ pos := [[ mload ~(| 0x40 |) ]] in
          do~ [[ returndatacopy ~(| pos, 0, returndatasize ~(||) |) ]] in
          do~ [[ revert ~(| pos, returndatasize ~(||) |) ]] in
          M.pure tt
        |)
      ]] in
      let~ expr := [[ 0 ]] in
      do~ [[
        M.if_unit (| _2,
          let~ _3 := [[ 0x20 ]] in
          do~ [[
            M.if_unit (| gt ~(| 0x20, returndatasize ~(||) |),
              let~ _3 := [[ returndatasize ~(||) ]] in
              M.pure tt
            |)
          ]] in
          do~ [[ finalize_allocation ~(| _1, _3 |) ]] in
          let~ value0 := [[ 0 ]] in
          do~ [[
            M.if_unit (| slt ~(| sub ~(| add ~(| _1, _3 |), _1 |), 32 |),
              do~ [[ revert ~(| 0, 0 |) ]] in
              M.pure tt
            |)
          ]] in
          let~ value0 := [[ mload ~(| _1 |) ]] in
          let~ expr := [[ value0 ]] in
          M.pure tt
        |)
      ]] in
      let~ var := [[ fun_isHealthy ~(| var_marketParams_2125_mpos, var_id, var_borrower, expr |) ]] in
      M.pure var.

    Definition fun_accrueInterest (var_marketParams_1971_mpos : U256.t) (var_id : U256.t) : M.t unit :=
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
      let~ expr := [[ checked_sub_uint256 ~(| timestamp ~(||), and ~(| sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| expr |),
          do~ [[ M.leave ]] in
          M.pure tt
        |)
      ]] in
      let~ cleaned := [[ and ~(| mload ~(| add ~(| var_marketParams_1971_mpos, 96 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
      do~ [[
        M.if_unit (| iszero ~(| iszero ~(| cleaned |) |),
          do~ [[ mstore ~(| 0, var_id |) ]] in
          do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
          let~ dataSlot := [[ keccak256 ~(| 0, 0x40 |) ]] in
          let~ _1 := [[ mload ~(| 0x40 |) ]] in
          do~ [[ mstore ~(| _1, shl ~(| 226, 0x25147fb5 |) |) ]] in
          let~ _2 := [[ call ~(| gas ~(||), cleaned, 0, _1, sub ~(| abi_encode_struct_MarketParams_struct_Market_storage ~(| add ~(| _1, 4 |), var_marketParams_1971_mpos, dataSlot |), _1 |), _1, 0x20 |) ]] in
          do~ [[
            M.if_unit (| iszero ~(| _2 |),
              let~ pos := [[ mload ~(| 0x40 |) ]] in
              do~ [[ returndatacopy ~(| pos, 0, returndatasize ~(||) |) ]] in
              do~ [[ revert ~(| pos, returndatasize ~(||) |) ]] in
              M.pure tt
            |)
          ]] in
          let~ expr_1 := [[ 0 ]] in
          do~ [[
            M.if_unit (| _2,
              let~ _3 := [[ 0x20 ]] in
              do~ [[
                M.if_unit (| gt ~(| 0x20, returndatasize ~(||) |),
                  let~ _3 := [[ returndatasize ~(||) ]] in
                  M.pure tt
                |)
              ]] in
              do~ [[ finalize_allocation ~(| _1, _3 |) ]] in
              let~ value0 := [[ 0 ]] in
              do~ [[
                M.if_unit (| slt ~(| sub ~(| add ~(| _1, _3 |), _1 |), 32 |),
                  do~ [[ revert ~(| 0, 0 |) ]] in
                  M.pure tt
                |)
              ]] in
              let~ value0 := [[ mload ~(| _1 |) ]] in
              let~ expr_1 := [[ value0 ]] in
              M.pure tt
            |)
          ]] in
          do~ [[ mstore ~(| 0, var_id |) ]] in
          do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
          let~ cleaned_1 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
          let~ expr_2 := [[ checked_mul_uint256 ~(| expr_1, expr |) ]] in
          let~ _4 := [[ checked_mul_uint256 ~(| expr_2, expr_2 |) ]] in
          let~ r := [[ 0 ]] in
          let~ _5 := [[ 0 ]] in
          let~ _5 := [[ 0 ]] in
          let~ r := [[ div ~(| _4, 0x1bc16d674ec80000 |) ]] in
          let~ _6 := [[ checked_mul_uint256 ~(| r, expr_2 |) ]] in
          let~ r_1 := [[ 0 ]] in
          let~ _7 := [[ 0 ]] in
          let~ _7 := [[ 0 ]] in
          let~ r_1 := [[ div ~(| _6, 0x29a2241af62c0000 |) ]] in
          let~ var := [[ checked_add_uint256 ~(| checked_add_uint256 ~(| expr_2, r |), r_1 |) ]] in
          let~ var_1 := [[ 0 ]] in
          let~ var_1 := [[ div ~(| checked_mul_uint256 ~(| cleaned_1, var |), 0x0de0b6b3a7640000 |) ]] in
          let~ expr_3 := [[ fun_toUint128 ~(| var_1 |) ]] in
          do~ [[ mstore ~(| 0, var_id |) ]] in
          do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
          let~ _8 := [[ add ~(| keccak256 ~(| 0, 0x40 |), 1 |) ]] in
          do~ [[ sstore ~(| _8, or ~(| and ~(| sload ~(| _8 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_add_uint128 ~(| and ~(| sload ~(| _8 |), 0xffffffffffffffffffffffffffffffff |), expr_3 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
          let~ expr_4 := [[ fun_toUint128 ~(| var_1 |) ]] in
          do~ [[ mstore ~(| 0, var_id |) ]] in
          do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
          let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in
          do~ [[ sstore ~(| dataSlot_1, or ~(| and ~(| sload ~(| dataSlot_1 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_add_uint128 ~(| and ~(| sload ~(| dataSlot_1 |), 0xffffffffffffffffffffffffffffffff |), expr_4 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
          let~ var_feeShares := [[ 0 ]] in
          let~ var_feeShares := [[ 0 ]] in
          do~ [[ mstore ~(| 0, var_id |) ]] in
          do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
          do~ [[
            M.if_unit (| iszero ~(| iszero ~(| shr ~(| 128, sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 2 |) |) |) |) |),
              do~ [[ mstore ~(| 0, var_id |) ]] in
              do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
              let~ _9 := [[ shr ~(| 128, sload ~(| add ~(| keccak256 ~(| 0, 0x40 |), 2 |) |) |) ]] in
              let~ var_2 := [[ 0 ]] in
              let~ var_2 := [[ div ~(| checked_mul_uint256 ~(| var_1, _9 |), 0x0de0b6b3a7640000 |) ]] in
              do~ [[ mstore ~(| 0, var_id |) ]] in
              do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
              let~ expr_5 := [[ checked_sub_uint256 ~(| and ~(| sload ~(| keccak256 ~(| 0, 0x40 |) |), 0xffffffffffffffffffffffffffffffff |), var_2 |) ]] in
              do~ [[ mstore ~(| 0, var_id |) ]] in
              do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
              let~ var_feeShares := [[ fun_toSharesDown ~(| var_2, expr_5, shr ~(| 128, sload ~(| keccak256 ~(| 0, 0x40 |) |) |) |) ]] in
              do~ [[ mstore ~(| 0, var_id |) ]] in
              do~ [[ mstore ~(| 0x20, 2 |) ]] in
              let~ dataSlot_2 := [[ keccak256 ~(| 0, 0x40 |) ]] in
              let~ key := [[ and ~(| sload ~(| 1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
              let~ dataSlot_3 := [[ 0 ]] in
              do~ [[ mstore ~(| 0, and ~(| key, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
              do~ [[ mstore ~(| 0x20, dataSlot_2 |) ]] in
              let~ dataSlot_3 := [[ keccak256 ~(| 0, 0x40 |) ]] in
              do~ [[ sstore ~(| dataSlot_3, checked_add_uint256 ~(| sload ~(| dataSlot_3 |), var_feeShares |) |) ]] in
              let~ expr_6 := [[ fun_toUint128 ~(| var_feeShares |) ]] in
              do~ [[ mstore ~(| 0, var_id |) ]] in
              do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
              let~ dataSlot_4 := [[ keccak256 ~(| 0, 0x40 |) ]] in
              do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| dataSlot_4, checked_add_uint128 ~(| shr ~(| 128, sload ~(| dataSlot_4 |) |), expr_6 |) |) ]] in
              M.pure tt
            |)
          ]] in
          let~ _10 := [[ mload ~(| 0x40 |) ]] in
          do~ [[ mstore ~(| _10, expr_1 |) ]] in
          do~ [[ mstore ~(| add ~(| _10, 0x20 |), var_1 |) ]] in
          do~ [[ mstore ~(| add ~(| _10, 0x40 |), var_feeShares |) ]] in
          do~ [[ log2 ~(| _10, 96, 0x9d9bd501d0657d7dfe415f779a620a62b78bc508ddc0891fbbd8b7ac0f8fce87, var_id |) ]] in
          M.pure tt
        |)
      ]] in
      do~ [[ mstore ~(| 0, var_id |) ]] in
      do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
      let~ _11 := [[ add ~(| keccak256 ~(| 0, 0x40 |), 2 |) ]] in
      do~ [[ sstore ~(| _11, or ~(| and ~(| sload ~(| _11 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| and ~(| timestamp ~(||), 0xffffffffffffffffffffffffffffffff |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
      M.pure tt.

    Definition update_storage_value_offsett_bool_to_bool (slot : U256.t) (value : U256.t) : M.t unit :=
      let~ value_1 := [[ and ~(| sload ~(| slot |), not ~(| 255 |) |) ]] in
      do~ [[ sstore ~(| slot, or ~(| value_1, and ~(| iszero ~(| iszero ~(| value |) |), 255 |) |) |) ]] in
      M.pure tt.

    Definition body : M.t unit :=
      do~ [[
        do~ [[ mstore ~(| 64, memoryguard ~(| 0x80 |) |) ]] in
        do~ [[
          M.if_unit (| iszero ~(| lt ~(| calldatasize ~(||), 4 |) |),
            let~ _1 := [[ 0 ]] in
            do~ [[
              (* switch *)
              let* δ := ltac:(M.monadic (shr ~(| 224, calldataload ~(| 0 |) |))) in
              if δ =? 0x13af4035 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ _2 := [[ sload ~(| 0 |) ]] in
                let~ cleaned := [[ and ~(| _2, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| eq ~(| caller ~(||), cleaned |), copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e ~(||) |) ]] in
                let~ _3 := [[ and ~(| value0, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| eq ~(| _3, cleaned |) |), copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                do~ [[ sstore ~(| 0, or ~(| and ~(| _2, shl ~(| 160, 0xffffffffffffffffffffffff |) |), _3 |) |) ]] in
                do~ [[ log2 ~(| 0, 0, 0x167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb5, _3 |) ]] in
                do~ [[ return_ ~(| 0, 0 |) ]] in
                M.pure tt
              else if δ =? 0x151c1ade then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 160 |),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_1 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ expr := [[ keccak256 ~(| value0_1, 160 |) ]] in
                do~ [[ mstore ~(| 0, expr |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_1 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| 0, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_1, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| value0_1, expr |) ]] in
                do~ [[ return_ ~(| 0, 0 |) ]] in
                M.pure tt
              else if δ =? 0x20b76e81 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(param, param_1, param_2, param_3, param_4, param_5) := [[ abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_bytes_calldata ~(| calldatasize ~(||) |) ]] in
                let~ var_shares := [[ param_2 ]] in
                let~ var_assets := [[ param_1 ]] in
                let~ expr_2 := [[ keccak256 ~(| param, 160 |) ]] in
                do~ [[ mstore ~(| 0, expr_2 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_3 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| 0, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_3, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                let~ _4 := [[ iszero ~(| param_1 |) ]] in
                do~ [[ require_helper_string ~(| xor ~(| _4, iszero ~(| param_2 |) |), copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 ~(||) |) ]] in
                let~ _5 := [[ and ~(| param_3, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _5 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| param, expr_2 |) ]] in
                do~ [[
                  (* switch *)
                  let* δ := ltac:(M.monadic (iszero ~(| _4 |))) in
                  if δ =? 0 then
                    do~ [[ mstore ~(| 0, expr_2 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_1 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| 0, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| 0, expr_2 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_assets := [[ fun_toAssetsUp ~(| param_2, cleaned_1, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| 0, 64 |), 1 |) |) |) |) ]] in
                    M.pure tt
                  else if δ =? (* Unsupported node: default *) then
                    do~ [[ mstore ~(| 0, expr_2 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_2 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| 0, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| 0, expr_2 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_shares := [[ fun_toSharesDown ~(| var_assets, cleaned_2, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| 0, 64 |), 1 |) |) |) |) ]] in
                    M.pure tt
                  else
                    M.pure tt
                ]] in
                let~ expr_4 := [[ fun_toUint128 ~(| var_shares |) ]] in
                do~ [[ mstore ~(| 0, expr_2 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot := [[ keccak256 ~(| 0, 64 |) ]] in
                let~ dataSlot_1 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _5 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot |) ]] in
                let~ dataSlot_1 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ _6 := [[ add ~(| dataSlot_1, 1 |) ]] in
                do~ [[ sstore ~(| _6, or ~(| and ~(| sload ~(| _6 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_sub_uint128 ~(| and ~(| sload ~(| _6 |), 0xffffffffffffffffffffffffffffffff |), expr_4 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ expr_5 := [[ fun_toUint128 ~(| var_shares |) ]] in
                do~ [[ mstore ~(| 0, expr_2 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _7 := [[ add ~(| keccak256 ~(| 0, 64 |), 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _7, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| _7 |) |), expr_5 |) |) ]] in
                do~ [[ mstore ~(| 0, expr_2 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ cleaned_3 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| 0, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                let~ expr_6 := [[ fun_toUint128 ~(| mul ~(| gt ~(| cleaned_3, var_assets |), sub ~(| cleaned_3, var_assets |) |) |) ]] in
                do~ [[ mstore ~(| 0, expr_2 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _8 := [[ add ~(| keccak256 ~(| 0, 64 |), 1 |) ]] in
                do~ [[ sstore ~(| _8, or ~(| and ~(| sload ~(| _8 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| expr_6, 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ _9 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _9, var_assets |) ]] in
                do~ [[ mstore ~(| add ~(| _9, 0x20 |), var_shares |) ]] in
                do~ [[ log4 ~(| _9, 64, 0x52acb05cebbd3cd39715469f22afbf5a17496295ef3bc9bb5944056c63ccaa09, expr_2, caller ~(||), _5 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| iszero ~(| param_5 |) |),
                    do~ [[
                      M.if_unit (| iszero ~(| extcodesize ~(| caller ~(||) |) |),
                        do~ [[ revert ~(| 0, 0 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ _10 := [[ mload ~(| 64 |) ]] in
                    do~ [[ mstore ~(| _10, shl ~(| 226, 0x016d1647 |) |) ]] in
                    let~ _11 := [[ call ~(| gas ~(||), caller ~(||), 0, _10, sub ~(| abi_encode_uint256_bytes_calldata ~(| add ~(| _10, 4 |), var_assets, param_4, param_5 |), _10 |), _10, 0 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| _11 |),
                        let~ pos := [[ mload ~(| 64 |) ]] in
                        do~ [[ returndatacopy ~(| pos, 0, returndatasize ~(||) |) ]] in
                        do~ [[ revert ~(| pos, returndatasize ~(||) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[
                      M.if_unit (| _11,
                        do~ [[ finalize_allocation ~(| _10, 0 |) ]] in
                        let~ _1 := [[ 0 ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                let~ cleaned_4 := [[ and ~(| mload ~(| param |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ fun_safeTransferFrom ~(| cleaned_4, caller ~(||), address ~(||), var_assets |) ]] in
                let~ memPos := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos, var_assets |) ]] in
                do~ [[ mstore ~(| add ~(| memPos, 0x20 |), var_shares |) ]] in
                do~ [[ return_ ~(| memPos, 64 |) ]] in
                M.pure tt
              else if δ =? 0x238d6579 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 256 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_2 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ value := [[ calldataload ~(| 164 |) ]] in
                let~ value2 := [[ abi_decode_address_24975 ~(||) ]] in
                let~ offset := [[ calldataload ~(| 228 |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| offset, 0xffffffffffffffff |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(value3, value4) := [[ abi_decode_bytes_calldata ~(| add ~(| 4, offset |), calldatasize ~(||) |) ]] in
                let~ expr_7 := [[ keccak256 ~(| value0_2, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_7 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_8 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_8, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| value |) |), copy_literal_to_memory_66565ea0c208e7335f4209a28fd1a047a5930228ef63dde212841a4b5b376b7e ~(||) |) ]] in
                let~ _12 := [[ and ~(| value2, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _12 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                let~ expr_9 := [[ fun_toUint128 ~(| value |) ]] in
                do~ [[ mstore ~(| _1, expr_7 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_2 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_3 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _12 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_2 |) ]] in
                let~ dataSlot_3 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ _13 := [[ add ~(| dataSlot_3, 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _13, checked_add_uint128 ~(| shr ~(| 128, sload ~(| _13 |) |), expr_9 |) |) ]] in
                let~ _14 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _14, value |) ]] in
                do~ [[ log4 ~(| _14, 0x20, 0xa3b9472a1399e17e123f3c2e6586c23e504184d504de59cdaa2b375e880c6184, expr_7, caller ~(||), _12 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| iszero ~(| value4 |) |),
                    do~ [[
                      M.if_unit (| iszero ~(| extcodesize ~(| caller ~(||) |) |),
                        do~ [[ revert ~(| _1, _1 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ _15 := [[ mload ~(| 64 |) ]] in
                    do~ [[ mstore ~(| _15, shl ~(| 224, 0xb1022fdf |) |) ]] in
                    let~ _16 := [[ call ~(| gas ~(||), caller ~(||), _1, _15, sub ~(| abi_encode_uint256_bytes_calldata ~(| add ~(| _15, 4 |), value, value3, value4 |), _15 |), _15, _1 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| _16 |),
                        let~ pos_1 := [[ mload ~(| 64 |) ]] in
                        do~ [[ returndatacopy ~(| pos_1, _1, returndatasize ~(||) |) ]] in
                        do~ [[ revert ~(| pos_1, returndatasize ~(||) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[
                      M.if_unit (| _16,
                        do~ [[ finalize_allocation ~(| _15, _1 |) ]] in
                        do~ [[
                          M.if_unit (| _1,
                            do~ [[ revert ~(| _1, _1 |) ]] in
                            M.pure tt
                          |)
                        ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                let~ cleaned_5 := [[ and ~(| mload ~(| add ~(| value0_2, 0x20 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ fun_safeTransferFrom ~(| cleaned_5, caller ~(||), address ~(||), value |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x2b4f013c then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 192 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_3 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ value_1 := [[ calldataload ~(| 164 |) ]] in
                let~ expr_10 := [[ eq ~(| caller ~(||), and ~(| sload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_10, copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e ~(||) |) ]] in
                let~ expr_11 := [[ keccak256 ~(| value0_3, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_11 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_12 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_12, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                do~ [[ mstore ~(| _1, expr_11 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_13 := [[ iszero ~(| eq ~(| value_1, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |) |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_13, copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                let~ size := [[ 0 ]] in
                let~ _17 := [[ 0 ]] in
                let~ _17 := [[ 0 ]] in
                let~ size := [[ 64 ]] in
                let~ memPtr := [[ mload ~(| 64 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr, 64 |) ]] in
                do~ [[ mstore ~(| memPtr, 16 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr, 0x20 |), 0x6d61782066656520657863656564656400000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| gt ~(| value_1, 0x03782dace9d90000 |) |), memPtr |) ]] in
                do~ [[ fun_accrueInterest ~(| value0_3, expr_11 |) ]] in
                do~ [[ mstore ~(| _1, expr_11 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |), and ~(| value_1, 0xffffffffffffffffffffffffffffffff |) |) ]] in
                let~ _18 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _18, value_1 |) ]] in
                do~ [[ log2 ~(| _18, 0x20, 0x139d6f58e9a127229667c8e3b36e88890a66cfc8ab1024ddc513e189e125b75b, expr_11 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x2c3c9157 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, calldataload ~(| 4 |) |) ]] in
                do~ [[ mstore ~(| 32, 8 |) ]] in
                let~ dataSlot_4 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ cleaned_6 := [[ and ~(| sload ~(| dataSlot_4 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ cleaned_7 := [[ and ~(| sload ~(| add ~(| dataSlot_4, 1 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ cleaned_8 := [[ and ~(| sload ~(| add ~(| dataSlot_4, 2 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ cleaned_9 := [[ and ~(| sload ~(| add ~(| dataSlot_4, 3 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ _19 := [[ sload ~(| add ~(| dataSlot_4, 4 |) |) ]] in
                let~ memPos_1 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_1, cleaned_6 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_1, 32 |), cleaned_7 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_1, 64 |), cleaned_8 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_1, 96 |), cleaned_9 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_1, 128 |), _19 |) ]] in
                do~ [[ return_ ~(| memPos_1, 160 |) ]] in
                M.pure tt
              else if δ =? 0x3644e515 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), _1 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ memPos_2 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_2, loadimmutable ~(| 0x3634000000000000000000000000000000000000000000000000000000000000 |) |) ]] in
                do~ [[ return_ ~(| memPos_2, 32 |) ]] in
                M.pure tt
              else if δ =? 0x46904840 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), _1 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value_2 := [[ and ~(| sload ~(| 1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ memPos_3 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_3, value_2 |) ]] in
                do~ [[ return_ ~(| memPos_3, 32 |) ]] in
                M.pure tt
              else if δ =? 0x4d98a93b then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value_3 := [[ calldataload ~(| 4 |) ]] in
                let~ expr_14 := [[ eq ~(| caller ~(||), and ~(| sload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_14, copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e ~(||) |) ]] in
                do~ [[ mstore ~(| _1, value_3 |) ]] in
                do~ [[ mstore ~(| 32, 0x05 |) ]] in
                let~ _20 := [[ iszero ~(| and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xff |) |) ]] in
                do~ [[ require_helper_string ~(| _20, copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                let~ size_1 := [[ 0 ]] in
                let~ _21 := [[ 0 ]] in
                let~ _21 := [[ 0 ]] in
                let~ size_1 := [[ 64 ]] in
                let~ memPtr_1 := [[ mload ~(| 64 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_1, 64 |) ]] in
                do~ [[ mstore ~(| memPtr_1, 17 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_1, 32 |), 0x6d6178204c4c5456206578636565646564000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| lt ~(| value_3, 0x0de0b6b3a7640000 |), memPtr_1 |) ]] in
                do~ [[ mstore ~(| _1, value_3 |) ]] in
                do~ [[ mstore ~(| 32, 0x05 |) ]] in
                let~ dataSlot_5 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ sstore ~(| dataSlot_5, or ~(| and ~(| sload ~(| dataSlot_5 |), not ~(| 255 |) |), 1 |) |) ]] in
                let~ _22 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _22, value_3 |) ]] in
                do~ [[ log1 ~(| _22, 32, 0x297b80e7a896fad470c630f6575072d609bde997260ff3db851939405ec29139 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x50d8cd4b then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(param_6, param_7, param_8, param_9, param_10) := [[ abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_address ~(| calldatasize ~(||) |) ]] in
                let~ var_shares_1 := [[ param_8 ]] in
                let~ var_assets_1 := [[ param_7 ]] in
                let~ expr_15 := [[ keccak256 ~(| param_6, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_16 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_16, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                let~ _23 := [[ iszero ~(| param_7 |) ]] in
                do~ [[ require_helper_string ~(| xor ~(| _23, iszero ~(| param_8 |) |), copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 ~(||) |) ]] in
                let~ _24 := [[ and ~(| param_10, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _24 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                let~ expr_17 := [[ fun_isSenderAuthorized ~(| param_9 |) ]] in
                do~ [[ require_helper_string ~(| expr_17, copy_literal_to_memory_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| param_6, expr_15 |) ]] in
                do~ [[
                  (* switch *)
                  let* δ := ltac:(M.monadic (iszero ~(| _23 |))) in
                  if δ =? 0 then
                    do~ [[ mstore ~(| _1, expr_15 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_10 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_15 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_assets_1 := [[ fun_toAssetsDown ~(| param_8, cleaned_10, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |) |) |) ]] in
                    M.pure tt
                  else if δ =? (* Unsupported node: default *) then
                    do~ [[ mstore ~(| _1, expr_15 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_11 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_15 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_shares_1 := [[ fun_toSharesUp ~(| var_assets_1, cleaned_11, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |) |) |) ]] in
                    M.pure tt
                  else
                    M.pure tt
                ]] in
                let~ expr_18 := [[ fun_toUint128 ~(| var_shares_1 |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_6 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_7 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| param_9, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_6 |) ]] in
                let~ dataSlot_7 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ _25 := [[ add ~(| dataSlot_7, 1 |) ]] in
                do~ [[ sstore ~(| _25, or ~(| and ~(| sload ~(| _25 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_add_uint128 ~(| and ~(| sload ~(| _25 |), 0xffffffffffffffffffffffffffffffff |), expr_18 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ expr_19 := [[ fun_toUint128 ~(| var_shares_1 |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _26 := [[ add ~(| keccak256 ~(| _1, 64 |), 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _26, checked_add_uint128 ~(| shr ~(| 128, sload ~(| _26 |) |), expr_19 |) |) ]] in
                let~ expr_20 := [[ fun_toUint128 ~(| var_assets_1 |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _27 := [[ add ~(| keccak256 ~(| _1, 64 |), 1 |) ]] in
                do~ [[ sstore ~(| _27, or ~(| and ~(| sload ~(| _27 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_add_uint128 ~(| and ~(| sload ~(| _27 |), 0xffffffffffffffffffffffffffffffff |), expr_20 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ expr_21 := [[ fun__isHealthy ~(| param_6, expr_15, param_9 |) ]] in
                do~ [[ require_helper_string ~(| expr_21, copy_literal_to_memory_3b807cd2312cb7a8816bf8f90c8b8fabc63939f2d074d6f3426cd3f6aa264952 ~(||) |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ cleaned_12 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                do~ [[ mstore ~(| _1, expr_15 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_22 := [[ iszero ~(| gt ~(| cleaned_12, and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_22, copy_literal_to_memory_ee16f499aa24e0ee394849a0c205c7424513d7e3afc7cb8ee1d45156f4e28a49 ~(||) |) ]] in
                let~ _28 := [[ mload ~(| 64 |) ]] in
                do~ [[ log4 ~(| _28, sub ~(| abi_encode_address_uint256_uint256 ~(| _28, caller ~(||), var_assets_1, var_shares_1 |), _28 |), 0x570954540bed6b1304a87dfe815a5eda4a648f7097a16240dcd85c9b5fd42a43, expr_15, and ~(| param_9, sub ~(| shl ~(| 160, 1 |), 1 |) |), _24 |) ]] in
                do~ [[ fun_safeTransfer ~(| and ~(| mload ~(| param_6 |), sub ~(| shl ~(| 160, 1 |), 1 |) |), param_10, var_assets_1 |) ]] in
                let~ memPos_4 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_4, var_assets_1 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_4, 0x20 |), var_shares_1 |) ]] in
                do~ [[ return_ ~(| memPos_4, 64 |) ]] in
                M.pure tt
              else if δ =? 0x5a64f51e then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_4 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ expr_23 := [[ eq ~(| caller ~(||), and ~(| sload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_23, copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e ~(||) |) ]] in
                let~ _29 := [[ and ~(| value0_4, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ mstore ~(| _1, _29 |) ]] in
                do~ [[ mstore ~(| 32, 4 |) ]] in
                let~ _30 := [[ iszero ~(| and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xff |) |) ]] in
                do~ [[ require_helper_string ~(| _30, copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                do~ [[ mstore ~(| _1, _29 |) ]] in
                do~ [[ mstore ~(| 32, 4 |) ]] in
                let~ dataSlot_8 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ sstore ~(| dataSlot_8, or ~(| and ~(| sload ~(| dataSlot_8 |), not ~(| 255 |) |), 0x01 |) |) ]] in
                do~ [[ log2 ~(| _1, _1, 0x590e04cdebeccba40f566186b9746ad295a4cd358ea4fefaaea6ce79630d96c0, _29 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x5c2bea49 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(param_11, param_12, param_13, param_14, param_15) := [[ abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_address ~(| calldatasize ~(||) |) ]] in
                let~ var_shares_2 := [[ param_13 ]] in
                let~ var_assets_2 := [[ param_12 ]] in
                let~ expr_24 := [[ keccak256 ~(| param_11, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_25 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_25, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                let~ _31 := [[ iszero ~(| param_12 |) ]] in
                do~ [[ require_helper_string ~(| xor ~(| _31, iszero ~(| param_13 |) |), copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 ~(||) |) ]] in
                let~ _32 := [[ and ~(| param_15, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _32 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                let~ expr_26 := [[ fun_isSenderAuthorized ~(| param_14 |) ]] in
                do~ [[ require_helper_string ~(| expr_26, copy_literal_to_memory_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| param_11, expr_24 |) ]] in
                do~ [[
                  (* switch *)
                  let* δ := ltac:(M.monadic (iszero ~(| _31 |))) in
                  if δ =? 0 then
                    do~ [[ mstore ~(| _1, expr_24 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_13 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_24 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_assets_2 := [[ fun_toAssetsDown ~(| param_13, cleaned_13, shr ~(| 128, sload ~(| keccak256 ~(| _1, 64 |) |) |) |) ]] in
                    M.pure tt
                  else if δ =? (* Unsupported node: default *) then
                    do~ [[ mstore ~(| _1, expr_24 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_14 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_24 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_shares_2 := [[ fun_toSharesUp ~(| var_assets_2, cleaned_14, shr ~(| 128, sload ~(| keccak256 ~(| _1, 64 |) |) |) |) ]] in
                    M.pure tt
                  else
                    M.pure tt
                ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_9 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_10 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| param_14, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_9 |) ]] in
                let~ dataSlot_10 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                do~ [[ sstore ~(| dataSlot_10, checked_sub_uint256 ~(| sload ~(| dataSlot_10 |), var_shares_2 |) |) ]] in
                let~ expr_27 := [[ fun_toUint128 ~(| var_shares_2 |) ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ dataSlot_11 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| dataSlot_11, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| dataSlot_11 |) |), expr_27 |) |) ]] in
                let~ expr_28 := [[ fun_toUint128 ~(| var_assets_2 |) ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ dataSlot_12 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ sstore ~(| dataSlot_12, or ~(| and ~(| sload ~(| dataSlot_12 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_sub_uint128 ~(| and ~(| sload ~(| dataSlot_12 |), 0xffffffffffffffffffffffffffffffff |), expr_28 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ cleaned_15 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                do~ [[ mstore ~(| _1, expr_24 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_29 := [[ iszero ~(| gt ~(| cleaned_15, and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_29, copy_literal_to_memory_ee16f499aa24e0ee394849a0c205c7424513d7e3afc7cb8ee1d45156f4e28a49 ~(||) |) ]] in
                let~ _33 := [[ mload ~(| 64 |) ]] in
                do~ [[ log4 ~(| _33, sub ~(| abi_encode_address_uint256_uint256 ~(| _33, caller ~(||), var_assets_2, var_shares_2 |), _33 |), 0xa56fc0ad5702ec05ce63666221f796fb62437c32db1aa1aa075fc6484cf58fbf, expr_24, and ~(| param_14, sub ~(| shl ~(| 160, 1 |), 1 |) |), _32 |) ]] in
                do~ [[ fun_safeTransfer ~(| and ~(| mload ~(| param_11 |), sub ~(| shl ~(| 160, 1 |), 1 |) |), param_15, var_assets_2 |) ]] in
                let~ memPos_5 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_5, var_assets_2 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_5, 0x20 |), var_shares_2 |) ]] in
                do~ [[ return_ ~(| memPos_5, 64 |) ]] in
                M.pure tt
              else if δ =? 0x5c60e39a then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, calldataload ~(| 4 |) |) ]] in
                do~ [[ mstore ~(| 32, 3 |) ]] in
                let~ dataSlot_13 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ _34 := [[ sload ~(| dataSlot_13 |) ]] in
                let~ _35 := [[ sload ~(| add ~(| dataSlot_13, 1 |) |) ]] in
                let~ _36 := [[ sload ~(| add ~(| dataSlot_13, 2 |) |) ]] in
                let~ memPos_6 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_6, and ~(| _34, 0xffffffffffffffffffffffffffffffff |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_6, 32 |), shr ~(| 128, _34 |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_6, 64 |), and ~(| _35, 0xffffffffffffffffffffffffffffffff |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_6, 96 |), shr ~(| 128, _35 |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_6, 128 |), and ~(| _36, 0xffffffffffffffffffffffffffffffff |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_6, 160 |), shr ~(| 128, _36 |) |) ]] in
                do~ [[ return_ ~(| memPos_6, 192 |) ]] in
                M.pure tt
              else if δ =? 0x65e4ad9e then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 64 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_5 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ value1 := [[ abi_decode_address_24983 ~(||) ]] in
                do~ [[ mstore ~(| _1, and ~(| value0_5, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 32, 6 |) ]] in
                let~ dataSlot_14 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_15 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| value1, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_14 |) ]] in
                let~ dataSlot_15 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ value_4 := [[ and ~(| sload ~(| dataSlot_15 |), 0xff |) ]] in
                let~ memPos_7 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_7, iszero ~(| iszero ~(| value_4 |) |) |) ]] in
                do~ [[ return_ ~(| memPos_7, 32 |) ]] in
                M.pure tt
              else if δ =? 0x70ae92d2 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, and ~(| abi_decode_address_24971 ~(||), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 32, 7 |) ]] in
                let~ _37 := [[ sload ~(| keccak256 ~(| _1, 64 |) |) ]] in
                let~ memPos_8 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_8, _37 |) ]] in
                do~ [[ return_ ~(| memPos_8, 32 |) ]] in
                M.pure tt
              else if δ =? 0x7784c685 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ offset_1 := [[ calldataload ~(| 4 |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| offset_1, 0xffffffffffffffff |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| iszero ~(| slt ~(| add ~(| offset_1, 35 |), calldatasize ~(||) |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ length := [[ calldataload ~(| add ~(| 4, offset_1 |) |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| length, 0xffffffffffffffff |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| gt ~(| add ~(| add ~(| offset_1, shl ~(| 5, length |) |), 36 |), calldatasize ~(||) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _38 := [[ array_allocation_size_array_bytes32_dyn ~(| length |) ]] in
                let~ memPtr_2 := [[ mload ~(| 64 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_2, _38 |) ]] in
                do~ [[ mstore ~(| memPtr_2, length |) ]] in
                let~ dataSize := [[ array_allocation_size_array_bytes32_dyn ~(| length |) ]] in
                let~ dataStart := [[ add ~(| memPtr_2, 32 |) ]] in
                do~ [[ calldatacopy ~(| dataStart, calldatasize ~(||), add ~(| dataSize, not ~(| 31 |) |) |) ]] in
                let~ var_i := [[ _1 ]] in
                let~ var_i := [[ _1 ]] in
                do~ [[ (* Unsupported node type: YulForLoop *) ]] in
                let~ memPos_9 := [[ mload ~(| 64 |) ]] in
                let~ tail := [[ add ~(| memPos_9, 32 |) ]] in
                do~ [[ mstore ~(| memPos_9, 32 |) ]] in
                let~ pos_2 := [[ tail ]] in
                let~ length_1 := [[ mload ~(| memPtr_2 |) ]] in
                do~ [[ mstore ~(| tail, length_1 |) ]] in
                let~ pos_2 := [[ add ~(| memPos_9, 64 |) ]] in
                let~ srcPtr := [[ dataStart ]] in
                let~ i := [[ _1 ]] in
                do~ [[ (* Unsupported node type: YulForLoop *) ]] in
                do~ [[ return_ ~(| memPos_9, sub ~(| pos_2, memPos_9 |) |) ]] in
                M.pure tt
              else if δ =? 0x8069218f then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _40 := [[ add ~(| calldatasize ~(||), not ~(| 3 |) |) ]] in
                do~ [[
                  M.if_unit (| slt ~(| _40, 256 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| _40, 0xa0 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ memPtr_3 := [[ mload ~(| 64 |) ]] in
                do~ [[ finalize_allocation_24985 ~(| memPtr_3 |) ]] in
                do~ [[ mstore ~(| memPtr_3, abi_decode_address_24971 ~(||) |) ]] in
                let~ _41 := [[ abi_decode_address_24983 ~(||) ]] in
                let~ _42 := [[ add ~(| memPtr_3, 32 |) ]] in
                do~ [[ mstore ~(| _42, _41 |) ]] in
                let~ value_5 := [[ _1 ]] in
                let~ value_5 := [[ calldataload ~(| 68 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| value_5, iszero ~(| iszero ~(| value_5 |) |) |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _43 := [[ add ~(| memPtr_3, 64 |) ]] in
                do~ [[ mstore ~(| _43, value_5 |) ]] in
                let~ _44 := [[ add ~(| memPtr_3, 96 |) ]] in
                do~ [[ mstore ~(| _44, calldataload ~(| 100 |) |) ]] in
                let~ value_6 := [[ calldataload ~(| 132 |) ]] in
                let~ _45 := [[ add ~(| memPtr_3, 128 |) ]] in
                do~ [[ mstore ~(| _45, value_6 |) ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 163 |) |), 96 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ size_2 := [[ 0 ]] in
                let~ _46 := [[ 0 ]] in
                let~ _46 := [[ 0 ]] in
                let~ size_2 := [[ 64 ]] in
                let~ memPtr_4 := [[ mload ~(| size_2 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_4, size_2 |) ]] in
                do~ [[ mstore ~(| memPtr_4, 17 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_4, 32 |), 0x7369676e61747572652065787069726564000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| gt ~(| timestamp ~(||), value_6 |) |), memPtr_4 |) ]] in
                let~ _47 := [[ mload ~(| _44 |) ]] in
                do~ [[ mstore ~(| _1, and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 32, 0x07 |) ]] in
                let~ dataSlot_16 := [[ keccak256 ~(| _1, size_2 |) ]] in
                let~ _48 := [[ sload ~(| dataSlot_16 |) ]] in
                do~ [[ sstore ~(| dataSlot_16, increment_uint256 ~(| _48 |) |) ]] in
                let~ size_3 := [[ _1 ]] in
                let~ _49 := [[ _1 ]] in
                let~ _49 := [[ _1 ]] in
                let~ size_3 := [[ size_2 ]] in
                let~ memPtr_5 := [[ mload ~(| size_2 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_5, size_2 |) ]] in
                do~ [[ mstore ~(| memPtr_5, 13 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_5, 32 |), 0x696e76616c6964206e6f6e636500000000000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| eq ~(| _47, _48 |), memPtr_5 |) ]] in
                let~ expr_mpos := [[ mload ~(| size_2 |) ]] in
                let~ _50 := [[ add ~(| expr_mpos, 32 |) ]] in
                do~ [[ mstore ~(| _50, 0x81d0284fb0e2cde18d0553b06189d6f7613c96a01bb5b5e7828eade6a0dcac91 |) ]] in
                do~ [[ mstore ~(| add ~(| expr_mpos, size_2 |), and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| add ~(| expr_mpos, 96 |), and ~(| mload ~(| _42 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| add ~(| expr_mpos, 128 |), iszero ~(| iszero ~(| mload ~(| _43 |) |) |) |) ]] in
                do~ [[ mstore ~(| add ~(| expr_mpos, 0xa0 |), mload ~(| _44 |) |) ]] in
                do~ [[ mstore ~(| add ~(| expr_mpos, 192 |), mload ~(| _45 |) |) ]] in
                do~ [[ mstore ~(| expr_mpos, 192 |) ]] in
                do~ [[ finalize_allocation ~(| expr_mpos, 224 |) ]] in
                let~ _51 := [[ keccak256 ~(| _50, mload ~(| expr_mpos |) |) ]] in
                let~ outPtr := [[ mload ~(| size_2 |) ]] in
                let~ _52 := [[ add ~(| outPtr, 32 |) ]] in
                do~ [[ mstore ~(| _52, shl ~(| 240, 6401 |) |) ]] in
                do~ [[ mstore ~(| add ~(| outPtr, 34 |), loadimmutable ~(| 0x3634000000000000000000000000000000000000000000000000000000000000 |) |) ]] in
                do~ [[ mstore ~(| add ~(| outPtr, 66 |), _51 |) ]] in
                do~ [[ mstore ~(| outPtr, 66 |) ]] in
                do~ [[ finalize_allocation ~(| outPtr, 98 |) ]] in
                let~ expr_30 := [[ keccak256 ~(| _52, mload ~(| outPtr |) |) ]] in
                let~ value_7 := [[ calldataload ~(| 164 |) ]] in
                let~ _53 := [[ and ~(| value_7, 0xff |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| value_7, _53 |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _54 := [[ mload ~(| size_2 |) ]] in
                do~ [[ mstore ~(| _54, expr_30 |) ]] in
                do~ [[ mstore ~(| add ~(| _54, 32 |), _53 |) ]] in
                do~ [[ mstore ~(| add ~(| _54, size_2 |), calldataload ~(| 196 |) |) ]] in
                do~ [[ mstore ~(| add ~(| _54, 96 |), calldataload ~(| 228 |) |) ]] in
                do~ [[ mstore ~(| _1, _1 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| staticcall ~(| gas ~(||), 1, _54, 128, _1, 32 |) |),
                    let~ pos_3 := [[ mload ~(| size_2 |) ]] in
                    do~ [[ returndatacopy ~(| pos_3, _1, returndatasize ~(||) |) ]] in
                    do~ [[ revert ~(| pos_3, returndatasize ~(||) |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _55 := [[ and ~(| mload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ expr_31 := [[ iszero ~(| iszero ~(| _55 |) |) ]] in
                do~ [[
                  M.if_unit (| expr_31,
                    let~ expr_31 := [[ eq ~(| and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |), _55 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ memPtr_6 := [[ mload ~(| size_2 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_6, size_2 |) ]] in
                do~ [[ mstore ~(| memPtr_6, 17 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_6, 32 |), 0x696e76616c6964207369676e6174757265000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| expr_31, memPtr_6 |) ]] in
                let~ cleaned_16 := [[ and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ _56 := [[ mload ~(| _44 |) ]] in
                let~ _57 := [[ mload ~(| size_2 |) ]] in
                do~ [[ mstore ~(| _57, _56 |) ]] in
                do~ [[ log3 ~(| _57, 32, 0xa58af1a0c70dba0c7aa60d1a1a147ebd61000d1690a968828ac718bca927f2c7, caller ~(||), cleaned_16 |) ]] in
                let~ cleaned_17 := [[ iszero ~(| iszero ~(| mload ~(| _43 |) |) |) ]] in
                do~ [[ mstore ~(| _1, and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 32, 0x06 |) ]] in
                let~ dataSlot_17 := [[ keccak256 ~(| _1, size_2 |) ]] in
                let~ key := [[ and ~(| mload ~(| _42 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ dataSlot_18 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| key, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_17 |) ]] in
                let~ dataSlot_18 := [[ keccak256 ~(| 0, size_2 |) ]] in
                do~ [[ update_storage_value_offsett_bool_to_bool ~(| dataSlot_18, cleaned_17 |) ]] in
                let~ cleaned_18 := [[ and ~(| mload ~(| memPtr_3 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ cleaned_19 := [[ and ~(| mload ~(| _42 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ cleaned_20 := [[ iszero ~(| iszero ~(| mload ~(| _43 |) |) |) ]] in
                let~ _58 := [[ mload ~(| size_2 |) ]] in
                do~ [[ mstore ~(| _58, cleaned_20 |) ]] in
                do~ [[ log4 ~(| _58, 32, 0xd5e969f01efe921d3f766bdebad25f0a05e3f237311f56482bf132d0326309c0, caller ~(||), cleaned_18, cleaned_19 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x8720316d then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 256 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_6 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ value_8 := [[ calldataload ~(| 164 |) ]] in
                let~ value2_1 := [[ abi_decode_address_24975 ~(||) ]] in
                let~ value_9 := [[ _1 ]] in
                let~ value_9 := [[ calldataload ~(| 228 |) ]] in
                let~ _59 := [[ and ~(| value_9, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| value_9, _59 |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ expr_32 := [[ keccak256 ~(| value0_6, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_32 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_33 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_33, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| value_8 |) |), copy_literal_to_memory_66565ea0c208e7335f4209a28fd1a047a5930228ef63dde212841a4b5b376b7e ~(||) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _59 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                let~ expr_34 := [[ fun_isSenderAuthorized ~(| value2_1 |) ]] in
                do~ [[ require_helper_string ~(| expr_34, copy_literal_to_memory_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| value0_6, expr_32 |) ]] in
                let~ expr_35 := [[ fun_toUint128 ~(| value_8 |) ]] in
                do~ [[ mstore ~(| _1, expr_32 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_19 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_20 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| value2_1, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_19 |) ]] in
                let~ dataSlot_20 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ _60 := [[ add ~(| dataSlot_20, 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _60, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| _60 |) |), expr_35 |) |) ]] in
                let~ expr_36 := [[ fun__isHealthy ~(| value0_6, expr_32, value2_1 |) ]] in
                do~ [[ require_helper_string ~(| expr_36, copy_literal_to_memory_3b807cd2312cb7a8816bf8f90c8b8fabc63939f2d074d6f3426cd3f6aa264952 ~(||) |) ]] in
                let~ _61 := [[ mload ~(| 64 |) ]] in
                do~ [[ log4 ~(| _61, sub ~(| abi_encode_address_uint256 ~(| _61, caller ~(||), value_8 |), _61 |), 0xe80ebd7cc9223d7382aab2e0d1d6155c65651f83d53c8b9b06901d167e321142, expr_32, and ~(| value2_1, sub ~(| shl ~(| 160, 1 |), 1 |) |), _59 |) ]] in
                do~ [[ fun_safeTransfer ~(| and ~(| mload ~(| add ~(| value0_6, 0x20 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |), value_9, value_8 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x8c1358a2 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 160 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_7 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ expr_37 := [[ keccak256 ~(| value0_7, 160 |) ]] in
                let~ _62 := [[ add ~(| value0_7, 96 |) ]] in
                do~ [[ mstore ~(| _1, and ~(| mload ~(| _62 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, 4 |) ]] in
                let~ value_10 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xff |) ]] in
                let~ size_4 := [[ _1 ]] in
                let~ _63 := [[ _1 ]] in
                let~ _63 := [[ _1 ]] in
                let~ size_4 := [[ 64 ]] in
                let~ memPtr_7 := [[ mload ~(| size_4 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_7, size_4 |) ]] in
                do~ [[ mstore ~(| memPtr_7, 15 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_7, 0x20 |), 0x49524d206e6f7420656e61626c65640000000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| value_10, memPtr_7 |) ]] in
                let~ _64 := [[ add ~(| value0_7, 128 |) ]] in
                do~ [[ mstore ~(| _1, mload ~(| _64 |) |) ]] in
                do~ [[ mstore ~(| 0x20, 0x05 |) ]] in
                let~ value_11 := [[ and ~(| sload ~(| keccak256 ~(| _1, size_4 |) |), 0xff |) ]] in
                let~ size_5 := [[ 0 ]] in
                let~ _65 := [[ 0 ]] in
                let~ _65 := [[ 0 ]] in
                let~ size_5 := [[ size_4 ]] in
                let~ memPtr_8 := [[ mload ~(| size_4 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_8, size_4 |) ]] in
                do~ [[ mstore ~(| memPtr_8, 16 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_8, 0x20 |), 0x4c4c5456206e6f7420656e61626c656400000000000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| value_11, memPtr_8 |) ]] in
                do~ [[ mstore ~(| _1, expr_37 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_38 := [[ iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_4 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) ]] in
                let~ size_6 := [[ 0 ]] in
                let~ _66 := [[ 0 ]] in
                let~ _66 := [[ 0 ]] in
                let~ size_6 := [[ size_4 ]] in
                let~ memPtr_9 := [[ mload ~(| size_4 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_9, size_4 |) ]] in
                do~ [[ mstore ~(| memPtr_9, 22 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_9, 0x20 |), 0x6d61726b657420616c7265616479206372656174656400000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| expr_38, memPtr_9 |) ]] in
                do~ [[ mstore ~(| _1, expr_37 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _67 := [[ add ~(| keccak256 ~(| _1, size_4 |), 2 |) ]] in
                do~ [[ sstore ~(| _67, or ~(| and ~(| sload ~(| _67 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| and ~(| timestamp ~(||), 0xffffffffffffffffffffffffffffffff |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ mstore ~(| _1, expr_37 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x08 |) ]] in
                let~ dataSlot_21 := [[ keccak256 ~(| _1, size_4 |) ]] in
                do~ [[ sstore ~(| dataSlot_21, or ~(| and ~(| sload ~(| dataSlot_21 |), shl ~(| 160, 0xffffffffffffffffffffffff |) |), and ~(| and ~(| mload ~(| value0_7 |), sub ~(| shl ~(| 160, 1 |), 1 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |) ]] in
                let~ value_12 := [[ and ~(| mload ~(| add ~(| value0_7, 0x20 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ slot := [[ add ~(| dataSlot_21, 1 |) ]] in
                do~ [[ sstore ~(| slot, or ~(| and ~(| sload ~(| slot |), shl ~(| 160, 0xffffffffffffffffffffffff |) |), and ~(| value_12, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |) ]] in
                let~ value_13 := [[ and ~(| mload ~(| add ~(| value0_7, size_4 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ slot_1 := [[ add ~(| dataSlot_21, 2 |) ]] in
                do~ [[ sstore ~(| slot_1, or ~(| and ~(| sload ~(| slot_1 |), shl ~(| 160, 0xffffffffffffffffffffffff |) |), and ~(| value_13, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |) ]] in
                let~ value_14 := [[ and ~(| mload ~(| _62 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ slot_2 := [[ add ~(| dataSlot_21, 0x03 |) ]] in
                do~ [[ sstore ~(| slot_2, or ~(| and ~(| sload ~(| slot_2 |), shl ~(| 160, 0xffffffffffffffffffffffff |) |), and ~(| value_14, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |) ]] in
                do~ [[ sstore ~(| add ~(| dataSlot_21, 4 |), mload ~(| _64 |) |) ]] in
                let~ _68 := [[ mload ~(| size_4 |) ]] in
                do~ [[ abi_encode_struct_MarketParams ~(| value0_7, _68 |) ]] in
                do~ [[ log2 ~(| _68, 160, 0xac4b2400f169220b0c0afdde7a0b32e775ba727ea1cb30b35f935cdaab8683ac, expr_37 |) ]] in
                let~ cleaned_21 := [[ and ~(| mload ~(| _62 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| iszero ~(| cleaned_21 |) |),
                    do~ [[ mstore ~(| _1, expr_37 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ dataSlot_22 := [[ keccak256 ~(| _1, size_4 |) ]] in
                    let~ _69 := [[ mload ~(| size_4 |) ]] in
                    do~ [[ mstore ~(| _69, shl ~(| 226, 0x25147fb5 |) |) ]] in
                    let~ _70 := [[ call ~(| gas ~(||), cleaned_21, _1, _69, sub ~(| abi_encode_struct_MarketParams_struct_Market_storage ~(| add ~(| _69, 4 |), value0_7, dataSlot_22 |), _69 |), _69, 0x20 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| _70 |),
                        let~ pos_4 := [[ mload ~(| size_4 |) ]] in
                        do~ [[ returndatacopy ~(| pos_4, _1, returndatasize ~(||) |) ]] in
                        do~ [[ revert ~(| pos_4, returndatasize ~(||) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[
                      M.if_unit (| _70,
                        let~ _71 := [[ 0x20 ]] in
                        do~ [[
                          M.if_unit (| gt ~(| 0x20, returndatasize ~(||) |),
                            let~ _71 := [[ returndatasize ~(||) ]] in
                            M.pure tt
                          |)
                        ]] in
                        do~ [[ finalize_allocation ~(| _69, _71 |) ]] in
                        do~ [[ pop ~(| abi_decode_uint256_fromMemory ~(| _69, add ~(| _69, _71 |) |) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0x8da5cb5b then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), _1 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value_15 := [[ and ~(| sload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ memPos_10 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_10, value_15 |) ]] in
                do~ [[ return_ ~(| memPos_10, 32 |) ]] in
                M.pure tt
              else if δ =? 0x93c52062 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 64 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value1_1 := [[ abi_decode_address_24983 ~(||) ]] in
                do~ [[ mstore ~(| _1, calldataload ~(| 4 |) |) ]] in
                do~ [[ mstore ~(| 32, 2 |) ]] in
                let~ dataSlot_23 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_24 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| value1_1, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_23 |) ]] in
                let~ dataSlot_24 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ _72 := [[ sload ~(| dataSlot_24 |) ]] in
                let~ _73 := [[ sload ~(| add ~(| dataSlot_24, 1 |) |) ]] in
                let~ memPos_11 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_11, _72 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_11, 32 |), and ~(| _73, 0xffffffffffffffffffffffffffffffff |) |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_11, 64 |), shr ~(| 128, _73 |) |) ]] in
                do~ [[ return_ ~(| memPos_11, 96 |) ]] in
                M.pure tt
              else if δ =? 0xa99aad89 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(param_16, param_17, param_18, param_19, param_20, param_21) := [[ abi_decode_struct_MarketParamst_uint256t_uint256t_addresst_bytes_calldata ~(| calldatasize ~(||) |) ]] in
                let~ var_shares_3 := [[ param_18 ]] in
                let~ var_assets_3 := [[ param_17 ]] in
                let~ expr_39 := [[ keccak256 ~(| param_16, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_39 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_40 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_40, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                let~ _74 := [[ iszero ~(| param_17 |) ]] in
                do~ [[ require_helper_string ~(| xor ~(| _74, iszero ~(| param_18 |) |), copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 ~(||) |) ]] in
                let~ _75 := [[ and ~(| param_19, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| _75 |) |), copy_literal_to_memory_a4b4461cfc9c1f0249c17896b005545dc5d1690f81d2023afc517b07ed3227a7 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| param_16, expr_39 |) ]] in
                do~ [[
                  (* switch *)
                  let* δ := ltac:(M.monadic (iszero ~(| _74 |))) in
                  if δ =? 0 then
                    do~ [[ mstore ~(| _1, expr_39 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_22 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_39 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_assets_3 := [[ fun_toAssetsUp ~(| param_18, cleaned_22, shr ~(| 128, sload ~(| keccak256 ~(| _1, 64 |) |) |) |) ]] in
                    M.pure tt
                  else if δ =? (* Unsupported node: default *) then
                    do~ [[ mstore ~(| _1, expr_39 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_23 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_39 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_shares_3 := [[ fun_toSharesDown ~(| var_assets_3, cleaned_23, shr ~(| 128, sload ~(| keccak256 ~(| _1, 64 |) |) |) |) ]] in
                    M.pure tt
                  else
                    M.pure tt
                ]] in
                do~ [[ mstore ~(| _1, expr_39 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_25 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_26 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _75 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_25 |) ]] in
                let~ dataSlot_26 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                do~ [[ sstore ~(| dataSlot_26, checked_add_uint256 ~(| sload ~(| dataSlot_26 |), var_shares_3 |) |) ]] in
                let~ expr_41 := [[ fun_toUint128 ~(| var_shares_3 |) ]] in
                do~ [[ mstore ~(| _1, expr_39 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ dataSlot_27 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| dataSlot_27, checked_add_uint128 ~(| shr ~(| 128, sload ~(| dataSlot_27 |) |), expr_41 |) |) ]] in
                let~ expr_42 := [[ fun_toUint128 ~(| var_assets_3 |) ]] in
                do~ [[ mstore ~(| _1, expr_39 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ dataSlot_28 := [[ keccak256 ~(| _1, 64 |) ]] in
                do~ [[ sstore ~(| dataSlot_28, or ~(| and ~(| sload ~(| dataSlot_28 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_add_uint128 ~(| and ~(| sload ~(| dataSlot_28 |), 0xffffffffffffffffffffffffffffffff |), expr_42 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ _76 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _76, var_assets_3 |) ]] in
                do~ [[ mstore ~(| add ~(| _76, 0x20 |), var_shares_3 |) ]] in
                do~ [[ log4 ~(| _76, 64, 0xedf8870433c83823eb071d3df1caa8d008f12f6440918c20d75a3602cda30fe0, expr_39, caller ~(||), _75 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| iszero ~(| param_21 |) |),
                    do~ [[
                      M.if_unit (| iszero ~(| extcodesize ~(| caller ~(||) |) |),
                        do~ [[ revert ~(| _1, _1 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ _77 := [[ mload ~(| 64 |) ]] in
                    do~ [[ mstore ~(| _77, shl ~(| 224, 0x2075be03 |) |) ]] in
                    let~ _78 := [[ call ~(| gas ~(||), caller ~(||), _1, _77, sub ~(| abi_encode_uint256_bytes_calldata ~(| add ~(| _77, 4 |), var_assets_3, param_20, param_21 |), _77 |), _77, _1 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| _78 |),
                        let~ pos_5 := [[ mload ~(| 64 |) ]] in
                        do~ [[ returndatacopy ~(| pos_5, _1, returndatasize ~(||) |) ]] in
                        do~ [[ revert ~(| pos_5, returndatasize ~(||) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[
                      M.if_unit (| _78,
                        do~ [[ finalize_allocation ~(| _77, _1 |) ]] in
                        do~ [[
                          M.if_unit (| _1,
                            do~ [[ revert ~(| _1, _1 |) ]] in
                            M.pure tt
                          |)
                        ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                let~ cleaned_24 := [[ and ~(| mload ~(| param_16 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ fun_safeTransferFrom ~(| cleaned_24, caller ~(||), address ~(||), var_assets_3 |) ]] in
                let~ memPos_12 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_12, var_assets_3 |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_12, 0x20 |), var_shares_3 |) ]] in
                do~ [[ return_ ~(| memPos_12, 64 |) ]] in
                M.pure tt
              else if δ =? 0xb485f3b8 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, calldataload ~(| 4 |) |) ]] in
                do~ [[ mstore ~(| 32, 5 |) ]] in
                let~ value_16 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xff |) ]] in
                let~ memPos_13 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_13, iszero ~(| iszero ~(| value_16 |) |) |) ]] in
                do~ [[ return_ ~(| memPos_13, 32 |) ]] in
                M.pure tt
              else if δ =? 0xd8eabcb8 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 288 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_8 := [[ abi_decode_struct_MarketParams_24972 ~(| calldatasize ~(||) |) ]] in
                let~ value_17 := [[ _1 ]] in
                let~ value_17 := [[ calldataload ~(| 164 |) ]] in
                let~ _79 := [[ and ~(| value_17, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| value_17, _79 |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value_18 := [[ calldataload ~(| 196 |) ]] in
                let~ value_19 := [[ calldataload ~(| 228 |) ]] in
                let~ offset_2 := [[ calldataload ~(| 260 |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| offset_2, 0xffffffffffffffff |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(value4_1, value5) := [[ abi_decode_bytes_calldata ~(| add ~(| 4, offset_2 |), calldatasize ~(||) |) ]] in
                let~ var_repaidShares := [[ value_19 ]] in
                let~ var_seizedAssets := [[ value_18 ]] in
                let~ expr_43 := [[ keccak256 ~(| value0_8, 160 |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_44 := [[ iszero ~(| iszero ~(| and ~(| sload ~(| add ~(| keccak256 ~(| _1, 64 |), 2 |) |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_44, copy_literal_to_memory_1798fe1b45706024844fe1ae37566f71d02866731bfe8dd8db26da9baccb8204 ~(||) |) ]] in
                let~ _80 := [[ iszero ~(| value_18 |) ]] in
                do~ [[ require_helper_string ~(| xor ~(| _80, iszero ~(| value_19 |) |), copy_literal_to_memory_af014e38b7c5f227cd14c59116f3da8dd63513df483ec13a5a17d6093fb510a6 ~(||) |) ]] in
                do~ [[ fun_accrueInterest ~(| value0_8, expr_43 |) ]] in
                let~ cleaned_25 := [[ and ~(| mload ~(| add ~(| value0_8, 64 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ _81 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _81, shl ~(| 225, 0x501ad8ff |) |) ]] in
                let~ _82 := [[ staticcall ~(| gas ~(||), cleaned_25, _81, 4, _81, 0x20 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| _82 |),
                    let~ pos_6 := [[ mload ~(| 64 |) ]] in
                    do~ [[ returndatacopy ~(| pos_6, _1, returndatasize ~(||) |) ]] in
                    do~ [[ revert ~(| pos_6, returndatasize ~(||) |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ expr_45 := [[ _1 ]] in
                do~ [[
                  M.if_unit (| _82,
                    let~ _83 := [[ 0x20 ]] in
                    do~ [[
                      M.if_unit (| gt ~(| 0x20, returndatasize ~(||) |),
                        let~ _83 := [[ returndatasize ~(||) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[ finalize_allocation ~(| _81, _83 |) ]] in
                    let~ value0_9 := [[ 0 ]] in
                    do~ [[
                      M.if_unit (| slt ~(| sub ~(| add ~(| _81, _83 |), _81 |), 32 |),
                        do~ [[ revert ~(| 0, 0 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ value0_9 := [[ mload ~(| _81 |) ]] in
                    let~ expr_45 := [[ value0_9 ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _84 := [[ iszero ~(| fun_isHealthy ~(| value0_8, expr_43, value_17, expr_45 |) |) ]] in
                let~ size_7 := [[ _1 ]] in
                let~ _85 := [[ _1 ]] in
                let~ _85 := [[ _1 ]] in
                let~ size_7 := [[ 64 ]] in
                let~ memPtr_10 := [[ mload ~(| size_7 |) ]] in
                do~ [[ finalize_allocation ~(| memPtr_10, size_7 |) ]] in
                do~ [[ mstore ~(| memPtr_10, 19 |) ]] in
                do~ [[ mstore ~(| add ~(| memPtr_10, 0x20 |), 0x706f736974696f6e206973206865616c74687900000000000000000000000000 |) ]] in
                do~ [[ require_helper_string ~(| _84, memPtr_10 |) ]] in
                let~ diff := [[ sub ~(| 0x0de0b6b3a7640000, mload ~(| add ~(| value0_8, 128 |) |) |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| diff, 0x0de0b6b3a7640000 |),
                    do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                    do~ [[ mstore ~(| 4, 0x11 |) ]] in
                    do~ [[ revert ~(| _1, 0x24 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ product := [[ _1 ]] in
                let~ product := [[ mul ~(| 0x0429d069189e0000, diff |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| diff, div ~(| product, 0x0429d069189e0000 |) |) |),
                    do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                    do~ [[ mstore ~(| 4, 0x11 |) ]] in
                    do~ [[ revert ~(| _1, 0x24 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ r := [[ div ~(| product, 0x0de0b6b3a7640000 |) ]] in
                let~ diff_1 := [[ sub ~(| 0x0de0b6b3a7640000, r |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| diff_1, 0x0de0b6b3a7640000 |),
                    do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                    do~ [[ mstore ~(| 4, 0x11 |) ]] in
                    do~ [[ revert ~(| _1, 0x24 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ r_1 := [[ _1 ]] in
                do~ [[
                  M.if_unit (| eq ~(| 0x0de0b6b3a7640000, r |),
                    do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                    do~ [[ mstore ~(| 4, 0x12 |) ]] in
                    do~ [[ revert ~(| _1, 0x24 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ r_1 := [[ div ~(| 0xc097ce7bc90715b34b9f1000000000, diff_1 |) ]] in
                let~ var_z := [[ xor ~(| 0x0ff59ee833b30000, mul ~(| xor ~(| 0x0ff59ee833b30000, r_1 |), lt ~(| r_1, 0x0ff59ee833b30000 |) |) |) ]] in
                do~ [[
                  (* switch *)
                  let* δ := ltac:(M.monadic (iszero ~(| _80 |))) in
                  if δ =? 0 then
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_26 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ _86 := [[ fun_toAssetsDown ~(| value_19, cleaned_26, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |) |) |) ]] in
                    let~ var := [[ _1 ]] in
                    let~ var := [[ div ~(| checked_mul_uint256 ~(| _86, var_z |), 0x0de0b6b3a7640000 |) ]] in
                    let~ product_1 := [[ mul ~(| var, 0xc097ce7bc90715b34b9f1000000000 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| or ~(| iszero ~(| var |), eq ~(| 0xc097ce7bc90715b34b9f1000000000, div ~(| product_1, var |) |) |) |),
                        do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                        do~ [[ mstore ~(| 4, 0x11 |) ]] in
                        do~ [[ revert ~(| _1, 0x24 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ var_seizedAssets := [[ checked_div_uint256 ~(| product_1, expr_45 |) ]] in
                    M.pure tt
                  else if δ =? (* Unsupported node: default *) then
                    let~ expr_46 := [[ checked_mul_uint256 ~(| var_seizedAssets, expr_45 |) ]] in
                    let~ sum := [[ _1 ]] in
                    let~ sum := [[ add ~(| expr_46, 0xc097ce7bc90715b34b9f0fffffffff |) ]] in
                    do~ [[
                      M.if_unit (| gt ~(| expr_46, sum |),
                        do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                        do~ [[ mstore ~(| 4, 0x11 |) ]] in
                        do~ [[ revert ~(| _1, 0x24 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ r_2 := [[ _1 ]] in
                    let~ _87 := [[ _1 ]] in
                    let~ _87 := [[ _1 ]] in
                    let~ r_2 := [[ div ~(| sum, 0xc097ce7bc90715b34b9f1000000000 |) ]] in
                    let~ product_2 := [[ _1 ]] in
                    let~ product_2 := [[ mul ~(| r_2, 0x0de0b6b3a7640000 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| or ~(| iszero ~(| r_2 |), eq ~(| 0x0de0b6b3a7640000, div ~(| product_2, r_2 |) |) |) |),
                        do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                        do~ [[ mstore ~(| 4, 0x11 |) ]] in
                        do~ [[ revert ~(| _1, 0x24 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ diff_2 := [[ add ~(| var_z, not ~(| 0 |) |) ]] in
                    do~ [[
                      M.if_unit (| gt ~(| diff_2, var_z |),
                        do~ [[ mstore ~(| _1, shl ~(| 224, 0x4e487b71 |) |) ]] in
                        do~ [[ mstore ~(| 4, 0x11 |) ]] in
                        do~ [[ revert ~(| _1, 0x24 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ var_1 := [[ checked_div_uint256 ~(| checked_add_uint256 ~(| product_2, diff_2 |), var_z |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_27 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ var_repaidShares := [[ fun_toSharesUp ~(| var_1, cleaned_27, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |) |) |) ]] in
                    M.pure tt
                  else
                    M.pure tt
                ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ cleaned_28 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ expr_47 := [[ fun_toAssetsUp ~(| var_repaidShares, cleaned_28, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |) |) |) ]] in
                let~ expr_48 := [[ fun_toUint128 ~(| var_repaidShares |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_29 := [[ keccak256 ~(| _1, size_7 |) ]] in
                let~ dataSlot_30 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _79 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_29 |) ]] in
                let~ dataSlot_30 := [[ keccak256 ~(| 0, size_7 |) ]] in
                let~ _88 := [[ add ~(| dataSlot_30, 1 |) ]] in
                do~ [[ sstore ~(| _88, or ~(| and ~(| sload ~(| _88 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_sub_uint128 ~(| and ~(| sload ~(| _88 |), 0xffffffffffffffffffffffffffffffff |), expr_48 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ expr_49 := [[ fun_toUint128 ~(| var_repaidShares |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _89 := [[ add ~(| keccak256 ~(| _1, size_7 |), 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _89, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| _89 |) |), expr_49 |) |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ cleaned_29 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                let~ expr_50 := [[ fun_toUint128 ~(| mul ~(| gt ~(| cleaned_29, expr_47 |), sub ~(| cleaned_29, expr_47 |) |) |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                let~ _90 := [[ add ~(| keccak256 ~(| _1, size_7 |), 1 |) ]] in
                do~ [[ sstore ~(| _90, or ~(| and ~(| sload ~(| _90 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| expr_50, 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                let~ expr_51 := [[ fun_toUint128 ~(| var_seizedAssets |) ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_31 := [[ keccak256 ~(| _1, size_7 |) ]] in
                let~ dataSlot_32 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _79 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_31 |) ]] in
                let~ dataSlot_32 := [[ keccak256 ~(| 0, size_7 |) ]] in
                let~ _91 := [[ add ~(| dataSlot_32, 1 |) ]] in
                do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _91, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| _91 |) |), expr_51 |) |) ]] in
                let~ var_badDebtShares := [[ _1 ]] in
                let~ var_badDebtShares := [[ _1 ]] in
                let~ var_badDebtAssets := [[ _1 ]] in
                let~ var_badDebtAssets := [[ _1 ]] in
                do~ [[ mstore ~(| _1, expr_43 |) ]] in
                do~ [[ mstore ~(| 0x20, 2 |) ]] in
                let~ dataSlot_33 := [[ keccak256 ~(| _1, size_7 |) ]] in
                let~ dataSlot_34 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, _79 |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_33 |) ]] in
                let~ dataSlot_34 := [[ keccak256 ~(| 0, size_7 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| shr ~(| 128, sload ~(| add ~(| dataSlot_34, 1 |) |) |) |),
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 2 |) ]] in
                    let~ dataSlot_35 := [[ keccak256 ~(| _1, size_7 |) ]] in
                    let~ dataSlot_36 := [[ 0 ]] in
                    do~ [[ mstore ~(| 0, _79 |) ]] in
                    do~ [[ mstore ~(| 0x20, dataSlot_35 |) ]] in
                    let~ dataSlot_36 := [[ keccak256 ~(| 0, size_7 |) ]] in
                    let~ var_badDebtShares := [[ and ~(| sload ~(| add ~(| dataSlot_36, 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_30 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ cleaned_31 := [[ and ~(| sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |), 0xffffffffffffffffffffffffffffffff |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ _92 := [[ fun_toAssetsUp ~(| var_badDebtShares, cleaned_31, shr ~(| 128, sload ~(| add ~(| keccak256 ~(| _1, size_7 |), 1 |) |) |) |) ]] in
                    let~ var_badDebtAssets := [[ xor ~(| cleaned_30, mul ~(| xor ~(| cleaned_30, _92 |), lt ~(| _92, cleaned_30 |) |) |) ]] in
                    let~ expr_52 := [[ fun_toUint128 ~(| var_badDebtAssets |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ _93 := [[ add ~(| keccak256 ~(| _1, size_7 |), 1 |) ]] in
                    do~ [[ sstore ~(| _93, or ~(| and ~(| sload ~(| _93 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_sub_uint128 ~(| and ~(| sload ~(| _93 |), 0xffffffffffffffffffffffffffffffff |), expr_52 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                    let~ expr_53 := [[ fun_toUint128 ~(| var_badDebtAssets |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ dataSlot_37 := [[ keccak256 ~(| _1, size_7 |) ]] in
                    do~ [[ sstore ~(| dataSlot_37, or ~(| and ~(| sload ~(| dataSlot_37 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |), and ~(| checked_sub_uint128 ~(| and ~(| sload ~(| dataSlot_37 |), 0xffffffffffffffffffffffffffffffff |), expr_53 |), 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                    let~ expr_54 := [[ fun_toUint128 ~(| var_badDebtShares |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 0x03 |) ]] in
                    let~ _94 := [[ add ~(| keccak256 ~(| _1, size_7 |), 1 |) ]] in
                    do~ [[ update_storage_value_offsett_uint128_to_uint128 ~(| _94, checked_sub_uint128 ~(| shr ~(| 128, sload ~(| _94 |) |), expr_54 |) |) ]] in
                    do~ [[ mstore ~(| _1, expr_43 |) ]] in
                    do~ [[ mstore ~(| 0x20, 2 |) ]] in
                    let~ dataSlot_38 := [[ keccak256 ~(| _1, size_7 |) ]] in
                    let~ dataSlot_39 := [[ 0 ]] in
                    do~ [[ mstore ~(| 0, _79 |) ]] in
                    do~ [[ mstore ~(| 0x20, dataSlot_38 |) ]] in
                    let~ dataSlot_39 := [[ keccak256 ~(| 0, size_7 |) ]] in
                    let~ _95 := [[ add ~(| dataSlot_39, 1 |) ]] in
                    do~ [[ sstore ~(| _95, and ~(| sload ~(| _95 |), not ~(| 0xffffffffffffffffffffffffffffffff |) |) |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _96 := [[ mload ~(| size_7 |) ]] in
                do~ [[ mstore ~(| _96, expr_47 |) ]] in
                do~ [[ mstore ~(| add ~(| _96, 0x20 |), var_repaidShares |) ]] in
                do~ [[ mstore ~(| add ~(| _96, size_7 |), var_seizedAssets |) ]] in
                do~ [[ mstore ~(| add ~(| _96, 96 |), var_badDebtAssets |) ]] in
                do~ [[ mstore ~(| add ~(| _96, 128 |), var_badDebtShares |) ]] in
                do~ [[ log4 ~(| _96, 160, 0xa4946ede45d0c6f06a0f5ce92c9ad3b4751452d2fe0e25010783bcab57a67e41, expr_43, caller ~(||), _79 |) ]] in
                do~ [[ fun_safeTransfer ~(| and ~(| mload ~(| add ~(| value0_8, 0x20 |) |), sub ~(| shl ~(| 160, 1 |), 1 |) |), caller ~(||), var_seizedAssets |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| iszero ~(| value5 |) |),
                    do~ [[
                      M.if_unit (| iszero ~(| extcodesize ~(| caller ~(||) |) |),
                        do~ [[ revert ~(| _1, _1 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    let~ _97 := [[ mload ~(| size_7 |) ]] in
                    do~ [[ mstore ~(| _97, shl ~(| 225, 0x67bf50cb |) |) ]] in
                    let~ _98 := [[ call ~(| gas ~(||), caller ~(||), _1, _97, sub ~(| abi_encode_uint256_bytes_calldata ~(| add ~(| _97, 4 |), expr_47, value4_1, value5 |), _97 |), _97, _1 |) ]] in
                    do~ [[
                      M.if_unit (| iszero ~(| _98 |),
                        let~ pos_7 := [[ mload ~(| size_7 |) ]] in
                        do~ [[ returndatacopy ~(| pos_7, _1, returndatasize ~(||) |) ]] in
                        do~ [[ revert ~(| pos_7, returndatasize ~(||) |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    do~ [[
                      M.if_unit (| _98,
                        do~ [[ finalize_allocation ~(| _97, _1 |) ]] in
                        do~ [[
                          M.if_unit (| _1,
                            do~ [[ revert ~(| _1, _1 |) ]] in
                            M.pure tt
                          |)
                        ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                let~ cleaned_32 := [[ and ~(| mload ~(| value0_8 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ fun_safeTransferFrom ~(| cleaned_32, caller ~(||), address ~(||), expr_47 |) ]] in
                let~ memPos_14 := [[ mload ~(| size_7 |) ]] in
                do~ [[ mstore ~(| memPos_14, var_seizedAssets |) ]] in
                do~ [[ mstore ~(| add ~(| memPos_14, 0x20 |), expr_47 |) ]] in
                do~ [[ return_ ~(| memPos_14, size_7 |) ]] in
                M.pure tt
              else if δ =? 0xe0232b42 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 96 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_10 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ value_20 := [[ calldataload ~(| 36 |) ]] in
                let~ offset_3 := [[ calldataload ~(| 68 |) ]] in
                do~ [[
                  M.if_unit (| gt ~(| offset_3, 0xffffffffffffffff |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ '(value2_2, value3_1) := [[ abi_decode_bytes_calldata ~(| add ~(| 4, offset_3 |), calldatasize ~(||) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| iszero ~(| value_20 |) |), copy_literal_to_memory_66565ea0c208e7335f4209a28fd1a047a5930228ef63dde212841a4b5b376b7e ~(||) |) ]] in
                let~ _99 := [[ and ~(| value0_10, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                let~ _100 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _100, value_20 |) ]] in
                do~ [[ log3 ~(| _100, 32, 0xc76f1b4fe4396ac07a9fa55a415d4ca430e72651d37d3401f3bed7cb13fc4f12, caller ~(||), _99 |) ]] in
                do~ [[ fun_safeTransfer ~(| _99, caller ~(||), value_20 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| extcodesize ~(| caller ~(||) |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ _101 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _101, shl ~(| 225, 0x18fab839 |) |) ]] in
                let~ _102 := [[ call ~(| gas ~(||), caller ~(||), _1, _101, sub ~(| abi_encode_uint256_bytes_calldata ~(| add ~(| _101, 4 |), value_20, value2_2, value3_1 |), _101 |), _101, _1 |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| _102 |),
                    let~ pos_8 := [[ mload ~(| 64 |) ]] in
                    do~ [[ returndatacopy ~(| pos_8, _1, returndatasize ~(||) |) ]] in
                    do~ [[ revert ~(| pos_8, returndatasize ~(||) |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| _102,
                    do~ [[ finalize_allocation ~(| _101, _1 |) ]] in
                    do~ [[
                      M.if_unit (| _1,
                        do~ [[ revert ~(| _1, _1 |) ]] in
                        M.pure tt
                      |)
                    ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ fun_safeTransferFrom ~(| _99, caller ~(||), address ~(||), value_20 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0xe74b981b then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_11 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ expr_55 := [[ eq ~(| caller ~(||), and ~(| sload ~(| _1 |), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_55, copy_literal_to_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e ~(||) |) ]] in
                let~ _103 := [[ sload ~(| 0x01 |) ]] in
                let~ _104 := [[ and ~(| value0_11, sub ~(| shl ~(| 160, 1 |), 1 |) |) ]] in
                do~ [[ require_helper_string ~(| iszero ~(| eq ~(| _104, and ~(| _103, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) |), copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                do~ [[ sstore ~(| 0x01, or ~(| and ~(| _103, shl ~(| 160, 0xffffffffffffffffffffffff |) |), _104 |) |) ]] in
                do~ [[ log2 ~(| _1, _1, 0x2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73, _104 |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0xeecea000 then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 64 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                let~ value0_12 := [[ abi_decode_address_24971 ~(||) ]] in
                let~ value_21 := [[ _1 ]] in
                let~ value_21 := [[ calldataload ~(| 36 |) ]] in
                let~ _105 := [[ iszero ~(| iszero ~(| value_21 |) |) ]] in
                do~ [[
                  M.if_unit (| iszero ~(| eq ~(| value_21, _105 |) |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, caller ~(||) |) ]] in
                do~ [[ mstore ~(| 32, 0x06 |) ]] in
                let~ dataSlot_40 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_41 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| value0_12, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_40 |) ]] in
                let~ dataSlot_41 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                let~ expr_56 := [[ iszero ~(| eq ~(| _105, iszero ~(| iszero ~(| and ~(| sload ~(| dataSlot_41 |), 0xff |) |) |) |) |) ]] in
                do~ [[ require_helper_string ~(| expr_56, copy_literal_to_memory_f6c00b09d2d55d4b94163c927f1e37be0dfa382ef0d91c45cde1d8cac8030b1d ~(||) |) ]] in
                do~ [[ mstore ~(| _1, caller ~(||) |) ]] in
                do~ [[ mstore ~(| 32, 0x06 |) ]] in
                let~ dataSlot_42 := [[ keccak256 ~(| _1, 64 |) ]] in
                let~ dataSlot_43 := [[ 0 ]] in
                do~ [[ mstore ~(| 0, and ~(| value0_12, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 0x20, dataSlot_42 |) ]] in
                let~ dataSlot_43 := [[ keccak256 ~(| 0, 0x40 |) ]] in
                do~ [[ update_storage_value_offsett_bool_to_bool ~(| dataSlot_43, value_21 |) ]] in
                let~ _106 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| _106, _105 |) ]] in
                do~ [[ log4 ~(| _106, 32, 0xd5e969f01efe921d3f766bdebad25f0a05e3f237311f56482bf132d0326309c0, caller ~(||), caller ~(||), and ~(| value0_12, sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ return_ ~(| _1, _1 |) ]] in
                M.pure tt
              else if δ =? 0xf2b863ce then
                do~ [[
                  M.if_unit (| callvalue ~(||),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[
                  M.if_unit (| slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 32 |),
                    do~ [[ revert ~(| _1, _1 |) ]] in
                    M.pure tt
                  |)
                ]] in
                do~ [[ mstore ~(| _1, and ~(| abi_decode_address_24971 ~(||), sub ~(| shl ~(| 160, 1 |), 1 |) |) |) ]] in
                do~ [[ mstore ~(| 32, 4 |) ]] in
                let~ value_22 := [[ and ~(| sload ~(| keccak256 ~(| _1, 64 |) |), 0xff |) ]] in
                let~ memPos_15 := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos_15, iszero ~(| iszero ~(| value_22 |) |) |) ]] in
                do~ [[ return_ ~(| memPos_15, 32 |) ]] in
                M.pure tt
              else
                M.pure tt
            ]] in
            M.pure tt
          |)
        ]] in
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure tt
      ]] in
      M.pure tt.
  End Morpho_2267_deployed.
End Morpho_2267.
