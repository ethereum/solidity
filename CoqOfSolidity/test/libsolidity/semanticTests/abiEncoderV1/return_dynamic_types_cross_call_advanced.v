(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition dyn (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          Value.String "1234567890123456789012345678901234567890"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            NewExpression Ty.array (Ty.path "bytes20") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "c" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            Ty.path "bytes20",
            [
              M.call (|
                Ty.path "uint160",
                [
                  Value.Integer 1234
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "c" |),
            Some (Value.Integer 3)
          |),
          M.call (|
            Ty.path "bytes20",
            [
              M.call (|
                Ty.path "uint160",
                [
                  Value.Integer 6789
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          Value.Integer 0x1234
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "dyn"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
