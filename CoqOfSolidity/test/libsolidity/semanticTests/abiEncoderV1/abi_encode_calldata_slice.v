(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition enc_packed_bytes (α : list Value.t) : M :=
    match α with
    | [data, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              IndexRangeAccess M.get_name (| "data" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_packed_bytes_reference (α : list Value.t) : M :=
    match α with
    | [data, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              M.call (|
                Ty.path "bytes",
                [
                  IndexRangeAccess M.get_name (| "data" |) M.get_name (| "start" |) M.get_name (| "end" |)

                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_bytes (α : list Value.t) : M :=
    match α with
    | [data, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              IndexRangeAccess M.get_name (| "data" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_bytes_reference (α : list Value.t) : M :=
    match α with
    | [data, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.call (|
                Ty.path "bytes",
                [
                  IndexRangeAccess M.get_name (| "data" |) M.get_name (| "start" |) M.get_name (| "end" |)

                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_uint256 (α : list Value.t) : M :=
    match α with
    | [x, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              IndexRangeAccess M.get_name (| "x" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_uint256_reference (α : list Value.t) : M :=
    match α with
    | [x, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              IndexRangeAccess M.get_name (| "x" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_packed_uint256 (α : list Value.t) : M :=
    match α with
    | [x, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              IndexRangeAccess M.get_name (| "x" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enc_packed_uint256_reference (α : list Value.t) : M :=
    match α with
    | [x, start, end] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              IndexRangeAccess M.get_name (| "x" |) M.get_name (| "start" |) M.get_name (| "end" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition compare (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "x" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "y" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "x" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (M.get_name (| "i" |))
                |),
                M.index_access (|
                  M.get_name (| "y" |),
                  Some (M.get_name (| "i" |))
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_bytes (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "test" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0x41
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 0x42
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "test" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.for_ (|
            M.define (|
              [ "j" ],
              M.get_name (| "i" |)
            |),
            M.bin_op (|
              "<=",
              M.get_name (| "j" |),
              M.member_access (|
                M.get_name (| "test" |),
                "length"
              |)
            |),
            M.un_op (|
              false,
              "++",
              M.get_name (| "j" |)
            |),
            let _ :=
              M.call (|
                M.get_name (| "compare" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_packed_bytes"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_packed_bytes_reference"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                M.get_name (| "compare" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_bytes"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_bytes_reference"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |)
                ]
              |) in
            Value.Tuple []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_uint256 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "test" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0x41
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 0x42
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "test" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.for_ (|
            M.define (|
              [ "j" ],
              M.get_name (| "i" |)
            |),
            M.bin_op (|
              "<=",
              M.get_name (| "j" |),
              M.member_access (|
                M.get_name (| "test" |),
                "length"
              |)
            |),
            M.un_op (|
              false,
              "++",
              M.get_name (| "j" |)
            |),
            let _ :=
              M.call (|
                M.get_name (| "compare" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_packed_uint256"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_packed_uint256_reference"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |)
                ]
              |) in
            let _ :=
              M.call (|
                M.get_name (| "compare" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_uint256"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "enc_uint256_reference"
                    |),
                    [
                      M.get_name (| "test" |),
                      M.get_name (| "i" |),
                      M.get_name (| "j" |)
                    ]
                  |)
                ]
              |) in
            Value.Tuple []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
