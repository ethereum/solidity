(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [r, s] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "x"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "r" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "r" |),
              Some (Value.Integer 1)
            |),
            M.member_access (|
              M.get_name (| "s" |),
              "x"
            |),
            M.member_access (|
              M.get_name (| "s" |),
              "y"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition x : Value.t :=
    Value.Integer 3.

  Definition s : Value.t :=
    undefined.

  Definition r : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 6
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "r" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "x"
          |),
          Value.Integer 11
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "y"
          |),
          Value.Integer 12
        |) in
      let _ :=
        M.define (|
          [ "a"; "b"; "c"; "d" ],
          M.call (|
            M.member_access (|
              M.get_name (| "L" |),
              "f"
            |),
            [
              M.get_name (| "r" |),
              M.get_name (| "s" |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "r" |),
              Some (Value.Integer 2)
            |),
            M.member_access (|
              M.get_name (| "s" |),
              "x"
            |),
            M.get_name (| "a" |),
            M.get_name (| "b" |),
            M.get_name (| "c" |),
            M.get_name (| "d" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
