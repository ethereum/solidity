(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 3
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


(* Interface *)
Module CView.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End CView.


(* Interface *)
Module CPure.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End CPure.


(* Contract *)
Module D.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  NewExpression Ty.path "C"
,
                  []
                |)
              ],
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fview (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  M.get_name (| "CView" |),
                  [
                    M.call (|
                      Ty.path "address",
                      [
                        M.call (|
                          NewExpression Ty.path "C"
,
                          []
                        |)
                      ]
                    |)
                  ]
                |)
              ],
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fpure (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  M.get_name (| "CPure" |),
                  [
                    M.call (|
                      Ty.path "address",
                      [
                        M.call (|
                          NewExpression Ty.path "C"
,
                          []
                        |)
                      ]
                    |)
                  ]
                |)
              ],
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
