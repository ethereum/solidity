(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition addr (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "address",
            [
              M.get_name (| "this" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testRunner (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 18
src: 177:318:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 418:2:0declaration: 14isSlot: isOffset: alueSize: src: 452:2:0declaration: 16isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testCalc (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a1" |),
          M.call (|
            M.get_name (| "calculateCreate" |),
            [
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a2" |),
          M.call (|
            M.get_name (| "calculateCreate2" |),
            [
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  hexString
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      M.call (|
                        Ty.path "uint160",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.get_name (| "this" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition calculateCreate (α : list Value.t) : M :=
    match α with
    | [from, nonce] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "<=",
              M.get_name (| "nonce" |),
              Value.Integer 127
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "data" ],
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              hexString,
              M.call (|
                Ty.path "bytes20",
                [
                  M.call (|
                    Ty.path "uint160",
                    [
                      M.get_name (| "from" |)
                    ]
                  |)
                ]
              |),
              Conditional M.bin_op (|
                "==",
                M.get_name (| "nonce" |),
                Value.Integer 0
              |) M.call (|
                Ty.path "bytes1",
                [
                  hexString
                ]
              |) M.call (|
                Ty.path "bytes1",
                [
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.get_name (| "nonce" |)
                    ]
                  |)
                ]
              |)

            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "address",
            [
              M.call (|
                Ty.path "uint160",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      M.call (|
                        M.get_name (| "keccak256" |),
                        [
                          M.get_name (| "data" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition calculateCreate2 (α : list Value.t) : M :=
    match α with
    | [creator, codehash, salt] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "address",
            [
              M.call (|
                Ty.path "uint160",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      M.call (|
                        M.get_name (| "keccak256" |),
                        [
                          M.call (|
                            M.member_access (|
                              M.get_name (| "abi" |),
                              "encodePacked"
                            |),
                            [
                              M.call (|
                                Ty.path "bytes1",
                                [
                                  Value.Integer 0xff
                                ]
                              |),
                              M.get_name (| "creator" |),
                              M.get_name (| "salt" |),
                              M.get_name (| "codehash" |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
