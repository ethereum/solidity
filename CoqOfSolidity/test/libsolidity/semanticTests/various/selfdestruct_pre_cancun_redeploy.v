(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Factory.
  (* Event Deployed *)

  Definition deploy (α : list Value.t) : M :=
    match α with
    | [_salt] =>
      let _ :=
        M.define (|
          [ "initCode" ],
          hexString
        |) in
      let _ :=
        M.define (|
          [ "target" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                Ty.path "uint160",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      M.call (|
                        M.get_name (| "keccak256" |),
                        [
                          M.call (|
                            M.member_access (|
                              M.get_name (| "abi" |),
                              "encodePacked"
                            |),
                            [
                              M.call (|
                                Ty.path "bytes1",
                                [
                                  Value.Integer 0xff
                                ]
                              |),
                              M.call (|
                                Ty.path "address",
                                [
                                  M.get_name (| "this" |)
                                ]
                              |),
                              M.get_name (| "_salt" |),
                              M.call (|
                                M.get_name (| "keccak256" |),
                                [
                                  M.call (|
                                    M.member_access (|
                                      M.get_name (| "abi" |),
                                      "encodePacked"
                                    |),
                                    [
                                      M.get_name (| "initCode" |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 49
src: 1175:200:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1269:5:0declaration: 8isSlot: isOffset: alueSize: src: 1198:8:0declaration: 11isSlot: isOffset: alueSize: src: 1310:8:0declaration: 11isSlot: isOffset: alueSize: src: 1235:8:0declaration: 14isSlot: isOffset: alueSize: src: 1258:8:0declaration: 14isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "implAddr" |)
                ]
              |),
              M.get_name (| "target" |)
            |)
          ]
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deployed" |),
          [
            M.get_name (| "implAddr" |),
            M.get_name (| "_salt" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Factory.


(* Interface *)
Module IC.
  Definition terminate (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End IC.


(* Contract *)
Module D.
  Definition factory : Value.t :=
    M.call (|
      NewExpression Ty.path "Factory"
,
      []
    |).

  Definition c : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deploy_create2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            M.get_name (| "IC" |),
            [
              M.call (|
                FunctionCallOptions M.member_access (|
                  M.get_name (| "factory" |),
                  "deploy"
                |) [value, ] Value.Integer 1
,
                [
                  hexString
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition terminate (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "c" |),
            "terminate"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_deploy_and_terminate (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "deploy_create2" |),
          []
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.call (|
              M.get_name (| "exists" |),
              []
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "test_balance_after_create" |),
          []
        |) in
      let _ :=
        M.call (|
          M.get_name (| "terminate" |),
          []
        |) in
      let _ :=
        M.call (|
          M.get_name (| "test_balance_after_selfdestruct" |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_balance_after_create (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "this" |)
                  ]
                |),
                "balance"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "c" |)
                  ]
                |),
                "balance"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_balance_after_selfdestruct (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "this" |)
                  ]
                |),
                "balance"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "c" |)
                  ]
                |),
                "balance"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition exists (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.member_access (|
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "c" |)
                  ]
                |),
                "code"
              |),
              "length"
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
