(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Base.
  Definition data : Value.t :=
    undefined.

  Definition setData (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "i" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getViaBase (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "data" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module A.
  Definition setViaA (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.call (|
          M.get_name (| "setData" |),
          [
            M.get_name (| "i" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.


(* Contract *)
Module B.
  Definition getViaB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "getViaBase" |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.


(* Contract *)
Module Derived.
  
End Derived.
