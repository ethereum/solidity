(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    Value.Integer 7.

  Definition data : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition arrayData : Value.t :=
    undefined.

  Definition returnsArray (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "arrayData" |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 9
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arrayData" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arrayData" |),
            Some (Value.Integer 7)
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "arrayData" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.define (|
          [ "loc" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "memArray" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "loc" |),
            M.get_name (| "x" |),
            M.get_name (| "y" |),
            M.get_name (| "data" |),
            M.index_access (|
              M.get_name (| "arrayData" |),
              Some (Value.Integer 3)
            |)
          ],
          Value.Tuple [
            Value.Integer 8,
            Value.Integer 4,
            M.call (|
              M.get_name (| "returnsArray" |),
              []
            |),
            M.get_name (| "s" |),
            Value.Integer 2
          ]
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "loc" |),
          Value.Integer 8
        |) then
          M.return_ (|
            Value.Integer 1
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "x" |),
          Value.Integer 4
        |) then
          M.return_ (|
            Value.Integer 2
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "y" |),
            "length"
          |),
          Value.Integer 9
        |) then
          M.return_ (|
            Value.Integer 3
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 5
        |) then
          M.return_ (|
            Value.Integer 4
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 7)
          |),
          Value.Integer 4
        |) then
          M.return_ (|
            Value.Integer 5
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |),
          M.member_access (|
            M.get_name (| "s" |),
            "length"
          |)
        |) then
          M.return_ (|
            Value.Integer 6
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 3)
          |),
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 3)
          |)
        |) then
          M.return_ (|
            Value.Integer 7
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "arrayData" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 2
        |) then
          M.return_ (|
            Value.Integer 8
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "memArray" |),
            M.get_name (| "loc" |)
          ],
          Value.Tuple [
            M.get_name (| "arrayData" |),
            Value.Integer 3
          ]
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "loc" |),
          Value.Integer 3
        |) then
          M.return_ (|
            Value.Integer 9
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "memArray" |),
            "length"
          |),
          M.member_access (|
            M.get_name (| "arrayData" |),
            "length"
          |)
        |) then
          M.return_ (|
            Value.Integer 10
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "memBytes" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "x" |),
            M.get_name (| "memBytes" |),
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 2)
            |)
          ],
          Value.Tuple [
            Value.Integer 456,
            M.get_name (| "s" |),
            Value.Integer 789,
            Value.Integer 101112,
            Value.Integer 131415
          ]
        |) in
      let _ :=
        if M.bin_op (|
          "||",
          M.bin_op (|
            "||",
            M.bin_op (|
              "!=",
              M.get_name (| "x" |),
              Value.Integer 456
            |),
            M.bin_op (|
              "!=",
              M.member_access (|
                M.get_name (| "memBytes" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "s" |),
                "length"
              |)
            |)
          |),
          M.bin_op (|
            "!=",
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 2)
            |),
            Value.Integer 789
          |)
        |) then
          M.return_ (|
            Value.Integer 11
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
