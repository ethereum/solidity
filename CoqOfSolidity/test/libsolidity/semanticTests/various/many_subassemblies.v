(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C0.
  
End C0.


(* Contract *)
Module C1.
  
End C1.


(* Contract *)
Module C2.
  
End C2.


(* Contract *)
Module C3.
  
End C3.


(* Contract *)
Module C4.
  
End C4.


(* Contract *)
Module C5.
  
End C5.


(* Contract *)
Module C6.
  
End C6.


(* Contract *)
Module C7.
  
End C7.


(* Contract *)
Module C8.
  
End C8.


(* Contract *)
Module C9.
  
End C9.


(* Contract *)
Module C10.
  
End C10.


(* Contract *)
Module D.
  Definition run (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          NewExpression Ty.path "C0"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C1"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C2"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C3"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C4"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C5"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C6"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C7"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C8"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C9"
,
          []
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "C10"
,
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
