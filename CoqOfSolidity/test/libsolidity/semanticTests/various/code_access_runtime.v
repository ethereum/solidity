(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "d" ],
          M.call (|
            NewExpression Ty.path "D"
,
            []
          |)
        |) in
      let _ :=
        M.define (|
          [ "hash" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 260:35:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 291:1:0declaration: 26isSlot: isOffset: alueSize: src: 271:4:0declaration: 33isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "hash" |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        M.get_name (| "D" |)
                      ]
                    |),
                    "runtimeCode"
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
