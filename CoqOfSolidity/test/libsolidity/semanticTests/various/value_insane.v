(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module helper.
  Definition getBalance (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End helper.


(* Contract *)
Module test.
  Definition h : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "h" |),
          M.call (|
            NewExpression Ty.path "helper"
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sendAmount (α : list Value.t) : M :=
    match α with
    | [amount] =>
      let _ :=
        M.return_ (|
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "h" |),
              "getBalance"
            |) [value, gas, ] M.bin_op (|
              "+",
              M.get_name (| "amount" |),
              Value.Integer 3
            |), Value.Integer 1000
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
