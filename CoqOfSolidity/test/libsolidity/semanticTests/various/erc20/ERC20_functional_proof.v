(* Generated by prepare_proof.py *)
Require Import CoqOfSolidity.CoqOfSolidity.
Require Import simulations.CoqOfSolidity.
Require Import test.libsolidity.semanticTests.various.erc20.ERC20.
Require Import test.libsolidity.semanticTests.various.erc20.GeneratedTest.
Require Import test.libsolidity.semanticTests.various.erc20.ERC20_functional.

Import Run.

Module ERC20_403.
  Ltac checked_add_uint256_deps :=
    idtac.

  Lemma compare_checked_add_uint256 environment stack (x : U256.t) :
    let environment :=
      environment <| Environment.code_name := constructor_code.(Code.hex_name) |> in
    let function :=
      Codes.get_function ERC20.codes environment "checked_add_uint256" in
    Compare.t ERC20.codes environment stack stack
      (function [x])
      (ERC20_functional.ERC20_403.checked_add_uint256 x).
  Proof.
    (* entering function *)
    Compare.Tactic.stack_primitives.
    (* declaration/assignment *)
    apply Compare.LetUnfold.
    Compare.Tactic.stack_primitives.
    Compare.Tactic.expression ltac:(checked_add_uint256_deps).
    (* block *)
    eapply Compare.Let. {
      Compare.Tactic.stack_primitives.
      (* if *)
      Compare.Tactic.expression ltac:(checked_add_uint256_deps).
      Compare.Tactic.open_if.
      Compare.Tactic.stack_primitives.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(checked_add_uint256_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(checked_add_uint256_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(checked_add_uint256_deps).
      }
      Compare.Tactic.make_intro.
    }
    Compare.Tactic.make_intro.
  Qed.

  Ltac body_deps :=
    apply compare_checked_add_uint256.

  Lemma compare_body environment stack :
    let environment :=
      environment <| Environment.code_name := constructor_code.(Code.hex_name) |> in
    Compare.t ERC20.codes environment stack stack
      ERC20.code.(Code.body)
      ERC20_functional.ERC20_403.body.
  Proof.
    (* entering function *)
    Compare.Tactic.stack_primitives.
    (* block *)
    eapply Compare.Let. {
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(body_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(body_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(body_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(body_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(body_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(body_deps).
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(body_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(body_deps).
      }
      Compare.Tactic.make_intro.
    }
    Compare.Tactic.make_intro.
  Qed.

  Module ERC20_403_deployed.
    Ltac abi_decode_address_deps :=
      idtac.

    Lemma compare_abi_decode_address environment stack :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "abi_decode_address" in
      Compare.t ERC20.codes environment stack stack
        (function [])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.abi_decode_address).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(abi_decode_address_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(abi_decode_address_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(abi_decode_address_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac abi_decode_address_2305_deps :=
      apply compare_abi_decode_address.

    Lemma compare_abi_decode_address_2305 environment stack :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "abi_decode_address_2305" in
      Compare.t ERC20.codes environment stack stack
        (function [])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.abi_decode_address_2305).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(abi_decode_address_2305_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(abi_decode_address_2305_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(abi_decode_address_2305_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac checked_sub_uint256_deps :=
      apply compare_abi_decode_address ||
      apply compare_abi_decode_address_2305.

    Lemma compare_checked_sub_uint256 environment stack (x y : U256.t) :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "checked_sub_uint256" in
      Compare.t ERC20.codes environment stack stack
        (function [x; y])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.checked_sub_uint256 x y).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(checked_sub_uint256_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(checked_sub_uint256_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_sub_uint256_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_sub_uint256_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_sub_uint256_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac checked_add_uint256_deps :=
      apply compare_abi_decode_address ||
      apply compare_abi_decode_address_2305 ||
      apply compare_checked_sub_uint256.

    Lemma compare_checked_add_uint256 environment stack (x y : U256.t) :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "checked_add_uint256" in
      Compare.t ERC20.codes environment stack stack
        (function [x; y])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.checked_add_uint256 x y).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(checked_add_uint256_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(checked_add_uint256_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_add_uint256_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_add_uint256_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(checked_add_uint256_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac fun_approve_deps :=
      apply compare_abi_decode_address ||
      apply compare_abi_decode_address_2305 ||
      apply compare_checked_sub_uint256 ||
      apply compare_checked_add_uint256.

    Lemma compare_fun_approve environment stack (var_owner var_spender var_value : U256.t) :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "fun_approve" in
      Compare.t ERC20.codes environment stack stack
        (function [var_owner; var_spender; var_value])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.fun_approve var_owner var_spender var_value).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        (* declaration/assignment *)
        apply Compare.LetUnfold.
        Compare.Tactic.stack_primitives.
        Compare.Tactic.expression ltac:(fun_approve_deps).
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        (* declaration/assignment *)
        apply Compare.LetUnfold.
        Compare.Tactic.stack_primitives.
        Compare.Tactic.expression ltac:(fun_approve_deps).
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_approve_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_approve_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_approve_deps).
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac fun_transfer_deps :=
      apply compare_abi_decode_address ||
      apply compare_abi_decode_address_2305 ||
      apply compare_checked_sub_uint256 ||
      apply compare_checked_add_uint256 ||
      apply compare_fun_approve.

    Lemma compare_fun_transfer environment stack (var_from var_to var_value : U256.t) :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      let function :=
        Codes.get_function ERC20.codes environment "fun_transfer" in
      Compare.t ERC20.codes environment stack stack
        (function [var_from; var_to; var_value])
        (ERC20_functional.ERC20_403.ERC20_403_deployed.fun_transfer var_from var_to var_value).
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_transfer_deps).
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        (* if *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
        Compare.Tactic.open_if.
        Compare.Tactic.stack_primitives.
        (* declaration/assignment *)
        apply Compare.LetUnfold.
        Compare.Tactic.stack_primitives.
        Compare.Tactic.expression ltac:(fun_transfer_deps).
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(fun_transfer_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_transfer_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_transfer_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_transfer_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      (* declaration/assignment *)
      apply Compare.LetUnfold.
      Compare.Tactic.stack_primitives.
      Compare.Tactic.expression ltac:(fun_transfer_deps).
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
      eapply Compare.Let. {
        (* expression statement *)
        Compare.Tactic.expression ltac:(fun_transfer_deps).
      }
      Compare.Tactic.make_intro.
    Qed.

    Ltac body_deps :=
      apply compare_abi_decode_address ||
      apply compare_abi_decode_address_2305 ||
      apply compare_checked_sub_uint256 ||
      apply compare_checked_add_uint256 ||
      apply compare_fun_approve ||
      apply compare_fun_transfer.

    Lemma compare_body environment stack :
      let environment :=
        environment <| Environment.code_name := deployed_code.(Code.hex_name) |> in
      Compare.t ERC20.codes environment stack stack
        ERC20.deployed.code.(Code.body)
        ERC20_functional.ERC20_403.ERC20_403_deployed.body.
    Proof.
      (* entering function *)
      Compare.Tactic.stack_primitives.
      (* block *)
      eapply Compare.Let. {
        Compare.Tactic.stack_primitives.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
        (* block *)
        eapply Compare.Let. {
          Compare.Tactic.stack_primitives.
          (* if *)
          Compare.Tactic.expression ltac:(body_deps).
          Compare.Tactic.open_if.
          Compare.Tactic.stack_primitives.
          (* block *)
          eapply Compare.Let. {
            Compare.Tactic.stack_primitives.
            (* switch *)
            Compare.Tactic.expression ltac:(body_deps).
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            (* case *)
            Compare.Tactic.open_switch_case. {
              Compare.Tactic.stack_primitives.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* block *)
              eapply Compare.Let. {
                Compare.Tactic.stack_primitives.
                (* if *)
                Compare.Tactic.expression ltac:(body_deps).
                Compare.Tactic.open_if.
                Compare.Tactic.stack_primitives.
                eapply Compare.Let. {
                  (* expression statement *)
                  Compare.Tactic.expression ltac:(body_deps).
                }
                Compare.Tactic.make_intro.
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              (* declaration/assignment *)
              apply Compare.LetUnfold.
              Compare.Tactic.stack_primitives.
              Compare.Tactic.expression ltac:(body_deps).
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
              eapply Compare.Let. {
                (* expression statement *)
                Compare.Tactic.expression ltac:(body_deps).
              }
              Compare.Tactic.make_intro.
            }
            now apply Compare.Pure.
          }
          Compare.Tactic.make_intro.
        }
        Compare.Tactic.make_intro.
        eapply Compare.Let. {
          (* expression statement *)
          Compare.Tactic.expression ltac:(body_deps).
        }
        Compare.Tactic.make_intro.
      }
      Compare.Tactic.make_intro.
    Qed.
  End ERC20_403_deployed.
End ERC20_403.
