(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* License: GPL-3.0 *)

(* Contract *)
Module C.
  Definition len1 : Value.t :=
    undefined.

  Definition len2 : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "mem_ptr_before" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "mem_ptr_after" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 13
src: 165:60:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 188:14:0declaration: 8isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "len1" |),
          M.member_access (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |),
              "code"
            |),
            "length"
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 23
src: 275:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 298:13:0declaration: 11isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "mem_ptr_before" |),
              M.get_name (| "mem_ptr_after" |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "len2" |),
          M.member_access (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "code"
            |),
            "length"
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 39
src: 561:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 584:13:0declaration: 11isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "mem_ptr_before" |),
              M.get_name (| "mem_ptr_after" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "mem_ptr_before" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "mem_ptr_after" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 60
src: 803:60:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 826:14:0declaration: 55isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r1" |),
          M.bin_op (|
            ">",
            M.member_access (|
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "this" |)
                  ]
                |),
                "code"
              |),
              "length"
            |),
            Value.Integer 50
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 72
src: 919:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 942:13:0declaration: 58isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "mem_ptr_before" |),
              M.get_name (| "mem_ptr_after" |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            Ty.path "address",
            [
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r2" |),
          M.bin_op (|
            "==",
            M.member_access (|
              M.member_access (|
                M.get_name (| "a" |),
                "code"
              |),
              "length"
            |),
            Value.Integer 0
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 94
src: 1228:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1251:13:0declaration: 58isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
