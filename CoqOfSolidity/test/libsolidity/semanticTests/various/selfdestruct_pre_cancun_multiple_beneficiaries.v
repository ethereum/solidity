(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition terminate (α : list Value.t) : M :=
    match α with
    | [_beneficiary] =>
      let _ :=
        M.call (|
          M.get_name (| "selfdestruct" |),
          [
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "_beneficiary" |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            Value.Bool false
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


(* Contract *)
Module D.
  Definition account1 : Value.t :=
    M.call (|
      Ty.path "address",
      [
        Value.Integer 0x1111111111111111111111111111111111111111
      ]
    |).

  Definition account2 : Value.t :=
    M.call (|
      Ty.path "address",
      [
        Value.Integer 0x2222222222222222222222222222222222222222
      ]
    |).

  Definition c : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deploy (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            FunctionCallOptions NewExpression Ty.path "C"
 [value, ] Value.Integer 1
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition terminate (α : list Value.t) : M :=
    match α with
    | [_beneficiary] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "c" |),
            "terminate"
          |),
          [
            M.get_name (| "_beneficiary" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_deploy_and_terminate_twice (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "deploy" |),
          []
        |) in
      let _ :=
        M.call (|
          M.get_name (| "terminate" |),
          [
            M.get_name (| "account1" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "terminate" |),
          [
            M.get_name (| "account2" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition exists (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.member_access (|
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "c" |)
                  ]
                |),
                "code"
              |),
              "length"
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
