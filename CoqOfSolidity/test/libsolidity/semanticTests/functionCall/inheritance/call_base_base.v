(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module BaseBase.
  Definition f (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "*",
            Value.Integer 2,
            M.get_name (| "n" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "*",
            Value.Integer 4,
            M.get_name (| "n" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End BaseBase.


(* Contract *)
Module Base.
  Definition f (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "*",
            Value.Integer 3,
            M.get_name (| "n" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module Child.
  Definition g (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "f" |),
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "s" |),
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Child.
