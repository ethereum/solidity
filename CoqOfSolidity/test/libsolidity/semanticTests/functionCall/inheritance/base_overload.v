(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Base.
  Definition x : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition init (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.get_name (| "b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition init (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module Child.
  Definition cInit (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Base" |),
            "init"
          |),
          [
            M.get_name (| "c" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition cInit (α : list Value.t) : M :=
    match α with
    | [c, d] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Base" |),
            "init"
          |),
          [
            M.get_name (| "c" |),
            M.get_name (| "d" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Child.
