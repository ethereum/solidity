(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Contract *)
Module C.
  Definition d : Value.t :=
    M.call (|
      M.get_name (| "D" |),
      [
        M.call (|
          Ty.path "address",
          [
            Value.Integer 0x1212
          ]
        |)
      ]
    |).

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "d" |),
            "g"
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            M.get_name (| "d" |),
            "g"
          |) [gas, ] Value.Integer 200
,
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "d" |)
              ]
            |),
            "call"
          |),
          [
            Value.String ""
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
