(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.6.0 *)

(* Contract *)
Module C.
  Definition d (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.define (|
          [ "data" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "i" |))
            |),
            M.get_name (| "i" |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "data" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition dt (α : list Value.t) : M :=
    match α with
    | [n] =>
      let _ :=
        M.define (|
          [ "data" ],
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "d"
            |),
            [
              M.get_name (| "n" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "sum" ],
          Value.Integer 0
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "+=",
            M.get_name (| "sum" |),
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "i" |))
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "sum" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
