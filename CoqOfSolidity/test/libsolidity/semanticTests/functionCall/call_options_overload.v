(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition call (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "v" |),
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "this" |),
              "f"
            |) [value, ] Value.Integer 10
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "this" |),
              "f"
            |) [gas, ] Value.Integer 10000
,
            [
              Value.Integer 2,
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "this" |),
              "f"
            |) [gas, value, ] Value.Integer 10000, Value.Integer 10
,
            [
              Value.Integer 2,
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "z" |),
          M.call (|
            FunctionCallOptions M.member_access (|
              M.get_name (| "this" |),
              "f"
            |) [value, gas, ] Value.Integer 10, Value.Integer 10000
,
            [
              Value.Integer 2,
              Value.Integer 3
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition bal (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
