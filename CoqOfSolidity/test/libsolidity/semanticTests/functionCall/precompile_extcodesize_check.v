(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module Identity.
  Definition selectorAndAppendValue (α : list Value.t) : M :=
    match α with
    | [value] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End Identity.


(* Interface *)
Module ReturnMoreData.
  Definition f (α : list Value.t) : M :=
    match α with
    | [value] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End ReturnMoreData.


(* Contract *)
Module C.
  Definition i : Value.t :=
    M.call (|
      M.get_name (| "Identity" |),
      [
        M.call (|
          Ty.path "address",
          [
            Value.Integer 0x0004
          ]
        |)
      ]
    |).

  Definition testHighLevel (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "i" |),
            "selectorAndAppendValue"
          |),
          [
            Value.Integer 5
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testHighLevel2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.call (|
                M.get_name (| "ReturnMoreData" |),
                [
                  M.call (|
                    Ty.path "address",
                    [
                      Value.Integer 4
                    ]
                  |)
                ]
              |),
              "f"
            |),
            [
              Value.Integer 2
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testLowLevel (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success"; "ret" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 4
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "Identity" |),
                      "selectorAndAppendValue"
                    |),
                    "selector"
                  |),
                  M.call (|
                    Ty.path "uint",
                    [
                      Value.Integer 5
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "value" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "ret" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
