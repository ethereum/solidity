(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module T.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "f"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End T.


(* Contract *)
Module U.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "f"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End U.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "c" |),
          Value.Integer 0
        |) then
          M.call (|
            NewExpression Ty.path "T"
,
            []
          |)
        else
          if M.bin_op (|
            "==",
            M.get_name (| "c" |),
            Value.Integer 1
          |) then
            M.call (|
              NewExpression Ty.path "U"
,
              []
            |)
          else
            Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            Value.Integer 1,
            M.get_name (| "c" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
