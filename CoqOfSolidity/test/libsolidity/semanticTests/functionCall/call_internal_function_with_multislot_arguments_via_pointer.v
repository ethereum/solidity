(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition m (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition foo (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 6
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "single_slot_function" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.define (|
          [ "multi_slot_function" ],
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.call (|
              M.call (|
                M.get_name (| "multi_slot_function" |),
                [
                  M.member_access (|
                    M.get_name (| "this" |),
                    "foo"
                  |),
                  M.member_access (|
                    M.get_name (| "this" |),
                    "foo"
                  |)
                ]
              |),
              []
            |),
            M.call (|
              M.get_name (| "single_slot_function" |),
              [
                Value.Integer 5,
                Value.Integer 1
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
