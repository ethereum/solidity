(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition f (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Integer 0
        |) in
      let _ :=
        M.while (|
          WhileKind.DoWhile,
          Value.Bool false,
          let _ :=
            if M.bin_op (|
              ">",
              M.get_name (| "i" |),
              Value.Integer 0
            |) then
              M.return_ (|
                Value.Integer 0
              |)
            else
              Value.Tuple [] in
          let _ :=
            M.un_op (|
              false,
              "++",
              M.get_name (| "i" |)
            |) in
          let _ :=
            M.continue (||) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
