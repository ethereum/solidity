(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module TestTernary.
  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.bin_op (|
            "+",
            Value.Tuple [
              Conditional Value.Bool true Value.Integer 63 Value.Integer 255

            ],
            Value.Tuple [
              Conditional Value.Bool false Value.Integer 63 Value.Integer 255

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "t" ],
          Value.Bool true
        |) in
      let _ :=
        M.define (|
          [ "f" ],
          Value.Bool false
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.bin_op (|
            "+",
            Value.Tuple [
              Conditional M.get_name (| "t" |) Value.Integer 63 Value.Integer 255

            ],
            Value.Tuple [
              Conditional M.get_name (| "f" |) Value.Integer 63 Value.Integer 255

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End TestTernary.
