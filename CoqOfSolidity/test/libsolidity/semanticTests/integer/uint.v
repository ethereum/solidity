(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition uintMinA (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint8_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint8"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint8_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint16_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint16"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint16_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint24_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint24"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint24_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint32_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint32"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint32_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint40_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint40"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint40_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint48_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint48"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint48_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint56_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint56"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint56_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint64_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint64"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint64_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMinB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint72_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint72"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint72_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint80_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint80"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint80_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint88_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint88"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint88_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint96_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint96"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint96_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint104_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint104"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint104_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint112_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint112"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint112_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint120_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint120"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint120_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint128_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint128"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint128_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMinC (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint136_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint136"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint136_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint144_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint144"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint144_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint152_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint152"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint152_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint160_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint160"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint160_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint168_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint168"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint168_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint176_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint176"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint176_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint184_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint184"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint184_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint192_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint192"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint192_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMinD (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint200_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint200"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint200_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint208_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint208"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint208_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint216_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint216"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint216_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint224_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint224"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint224_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint232_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint232"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint232_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint240_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint240"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint240_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint248_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint248"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint248_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint256_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint256"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint256_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMaxA (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint8_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint8"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint8_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 8
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint16_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint16"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint16_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 16
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint24_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint24"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint24_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 24
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint32_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint32"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint32_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 32
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint40_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint40"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint40_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 40
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint48_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint48"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint48_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 48
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint56_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint56"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint56_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 56
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint64_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint64"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint64_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 64
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMaxB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint72_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint72"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint72_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 72
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint80_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint80"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint80_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 80
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint88_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint88"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint88_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 88
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint96_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint96"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint96_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 96
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint104_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint104"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint104_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 104
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint112_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint112"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint112_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 112
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint120_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint120"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint120_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 120
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint128_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint128"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint128_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 128
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMaxC (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint136_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint136"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint136_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 136
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint144_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint144"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint144_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 144
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint152_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint152"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint152_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 152
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint160_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint160"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint160_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 160
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint168_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint168"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint168_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 168
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint176_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint176"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint176_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 176
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint184_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint184"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint184_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 184
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint192_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint192"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint192_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 192
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uintMaxD (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint200_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint200"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint200_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 200
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint208_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint208"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint208_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 208
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint216_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint216"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint216_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 216
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint224_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint224"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint224_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 224
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint232_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint232"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint232_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 232
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint240_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint240"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint240_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 240
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint248_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint248"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint248_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 248
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint256_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint256"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint256_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 256
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
