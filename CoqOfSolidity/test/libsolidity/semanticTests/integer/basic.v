(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition basic (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "uint_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint_min" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "uint_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 256
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "uint_max" |),
              Value.Integer 115792089237316195423570985008687907853269984665640564039457584007913129639935
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 255
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int_min" |),
              M.un_op (|
                true,
                "-",
                Value.Integer 57896044618658097711785492504343953926634992332820282019728792003956564819968
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 255
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int_max" |),
              Value.Integer 57896044618658097711785492504343953926634992332820282019728792003956564819967
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
