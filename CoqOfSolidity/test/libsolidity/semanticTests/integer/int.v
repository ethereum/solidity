(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition intMinA (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int8_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int8"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int8_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 7
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int16_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int16"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int16_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 15
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int24_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int24"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int24_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 23
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int32_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int32"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int32_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 31
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int40_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int40"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int40_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 39
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int48_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int48"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int48_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 47
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int56_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int56"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int56_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 55
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int64_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int64"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int64_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 63
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMinB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int72_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int72"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int72_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 71
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int80_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int80"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int80_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 79
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int88_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int88"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int88_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 87
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int96_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int96"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int96_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 95
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int104_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int104"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int104_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 103
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int112_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int112"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int112_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 111
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int120_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int120"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int120_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 119
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int128_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int128"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int128_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 127
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMinC (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int136_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int136"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int136_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 135
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int144_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int144"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int144_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 143
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int152_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int152"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int152_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 151
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int160_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int160"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int160_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 159
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int168_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int168"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int168_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 167
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int176_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int176"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int176_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 175
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int184_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int184"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int184_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 183
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int192_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int192"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int192_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 191
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMinD (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int200_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int200"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int200_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 199
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int208_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int208"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int208_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 207
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int216_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int216"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int216_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 215
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int224_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int224"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int224_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 223
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int232_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int232"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int232_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 231
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int240_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int240"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int240_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 239
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int248_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int248"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int248_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 247
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int256_min" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int256"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int256_min" |),
              M.bin_op (|
                "**",
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |),
                Value.Integer 255
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMaxA (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int8_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int8"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int8_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 7
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int16_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int16"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int16_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 15
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int24_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int24"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int24_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 23
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int32_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int32"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int32_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 31
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int40_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int40"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int40_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 39
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int48_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int48"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int48_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 47
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int56_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int56"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int56_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 55
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int64_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int64"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int64_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 63
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMaxB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int72_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int72"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int72_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 71
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int80_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int80"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int80_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 79
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int88_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int88"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int88_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 87
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int96_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int96"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int96_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 95
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int104_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int104"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int104_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 103
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int112_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int112"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int112_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 111
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int120_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int120"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int120_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 119
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int128_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int128"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int128_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 127
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMaxC (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int136_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int136"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int136_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 135
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int144_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int144"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int144_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 143
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int152_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int152"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int152_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 151
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int160_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int160"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int160_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 159
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int168_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int168"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int168_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 167
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int176_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int176"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int176_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 175
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int184_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int184"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int184_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 183
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int192_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int192"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int192_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 191
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intMaxD (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "int200_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int200"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int200_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 199
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int208_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int208"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int208_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 207
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int216_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int216"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int216_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 215
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int224_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int224"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int224_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 223
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int232_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int232"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int232_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 231
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int240_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int240"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int240_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 239
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int248_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int248"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int248_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 247
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "int256_max" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int256"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "int256_max" |),
              M.bin_op (|
                "-",
                M.bin_op (|
                  "**",
                  Value.Integer 2,
                  Value.Integer 255
                |),
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
