(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Fixed : Ty.path "Fixed" = Ty.path "int128".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Fixed"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "add",
    UsingFunction.Operator "*" "mul",
  ]
  |).

Definition MULTIPLIER : Value.t :=
  M.bin_op (|
    "**",
    Value.Integer 10,
    Value.Integer 18
  |).

Definition add (α : list Value.t) : M :=
  match α with
  | [a, b] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Fixed" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "Fixed" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "a" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Fixed" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "b" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition mul (α : list Value.t) : M :=
  match α with
  | [a, b] =>
    let _ :=
      M.define (|
        [ "intermediate" ],
        M.bin_op (|
          "/",
          Value.Tuple [
            M.bin_op (|
              "*",
              M.call (|
                Ty.path "int",
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "Fixed" |),
                      "unwrap"
                    |),
                    [
                      M.get_name (| "a" |)
                    ]
                  |)
                ]
              |),
              M.call (|
                Ty.path "int",
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "Fixed" |),
                      "unwrap"
                    |),
                    [
                      M.get_name (| "b" |)
                    ]
                  |)
                ]
              |)
            |)
          ],
          M.get_name (| "MULTIPLIER" |)
        |)
      |) in
    let _ :=
      if M.bin_op (|
        "!=",
        M.call (|
          Ty.path "int128",
          [
            M.get_name (| "intermediate" |)
          ]
        |),
        M.get_name (| "intermediate" |)
      |) then
        let _ :=
          M.call (|
            M.get_name (| "revert" |),
            [
              Value.String "Overflow"
            ]
          |) in
        Value.Tuple []
      else
        Value.Tuple [] in
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Fixed" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "int128",
              [
                M.get_name (| "intermediate" |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition applyInterest (α : list Value.t) : M :=
    match α with
    | [value, percentage] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "value" |),
            M.bin_op (|
              "*",
              M.get_name (| "value" |),
              M.get_name (| "percentage" |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
