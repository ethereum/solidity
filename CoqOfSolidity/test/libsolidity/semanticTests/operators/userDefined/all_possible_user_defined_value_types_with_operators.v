(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int8 : Ty.path "Int8" = Ty.path "int8".

Axiom user_type_Int16 : Ty.path "Int16" = Ty.path "int16".

Axiom user_type_Int24 : Ty.path "Int24" = Ty.path "int24".

Axiom user_type_Int32 : Ty.path "Int32" = Ty.path "int32".

Axiom user_type_Int40 : Ty.path "Int40" = Ty.path "int40".

Axiom user_type_Int48 : Ty.path "Int48" = Ty.path "int48".

Axiom user_type_Int56 : Ty.path "Int56" = Ty.path "int56".

Axiom user_type_Int64 : Ty.path "Int64" = Ty.path "int64".

Axiom user_type_Int72 : Ty.path "Int72" = Ty.path "int72".

Axiom user_type_Int80 : Ty.path "Int80" = Ty.path "int80".

Axiom user_type_Int88 : Ty.path "Int88" = Ty.path "int88".

Axiom user_type_Int96 : Ty.path "Int96" = Ty.path "int96".

Axiom user_type_Int104 : Ty.path "Int104" = Ty.path "int104".

Axiom user_type_Int112 : Ty.path "Int112" = Ty.path "int112".

Axiom user_type_Int120 : Ty.path "Int120" = Ty.path "int120".

Axiom user_type_Int128 : Ty.path "Int128" = Ty.path "int128".

Axiom user_type_Int136 : Ty.path "Int136" = Ty.path "int136".

Axiom user_type_Int144 : Ty.path "Int144" = Ty.path "int144".

Axiom user_type_Int152 : Ty.path "Int152" = Ty.path "int152".

Axiom user_type_Int160 : Ty.path "Int160" = Ty.path "int160".

Axiom user_type_Int168 : Ty.path "Int168" = Ty.path "int168".

Axiom user_type_Int176 : Ty.path "Int176" = Ty.path "int176".

Axiom user_type_Int184 : Ty.path "Int184" = Ty.path "int184".

Axiom user_type_Int192 : Ty.path "Int192" = Ty.path "int192".

Axiom user_type_Int200 : Ty.path "Int200" = Ty.path "int200".

Axiom user_type_Int208 : Ty.path "Int208" = Ty.path "int208".

Axiom user_type_Int216 : Ty.path "Int216" = Ty.path "int216".

Axiom user_type_Int224 : Ty.path "Int224" = Ty.path "int224".

Axiom user_type_Int232 : Ty.path "Int232" = Ty.path "int232".

Axiom user_type_Int240 : Ty.path "Int240" = Ty.path "int240".

Axiom user_type_Int248 : Ty.path "Int248" = Ty.path "int248".

Axiom user_type_Int256 : Ty.path "Int256" = Ty.path "int256".

Axiom user_type_Int : Ty.path "Int" = Ty.path "int".

Axiom user_type_Uint8 : Ty.path "Uint8" = Ty.path "uint8".

Axiom user_type_Uint16 : Ty.path "Uint16" = Ty.path "uint16".

Axiom user_type_Uint24 : Ty.path "Uint24" = Ty.path "uint24".

Axiom user_type_Uint32 : Ty.path "Uint32" = Ty.path "uint32".

Axiom user_type_Uint40 : Ty.path "Uint40" = Ty.path "uint40".

Axiom user_type_Uint48 : Ty.path "Uint48" = Ty.path "uint48".

Axiom user_type_Uint56 : Ty.path "Uint56" = Ty.path "uint56".

Axiom user_type_Uint64 : Ty.path "Uint64" = Ty.path "uint64".

Axiom user_type_Uint72 : Ty.path "Uint72" = Ty.path "uint72".

Axiom user_type_Uint80 : Ty.path "Uint80" = Ty.path "uint80".

Axiom user_type_Uint88 : Ty.path "Uint88" = Ty.path "uint88".

Axiom user_type_Uint96 : Ty.path "Uint96" = Ty.path "uint96".

Axiom user_type_Uint104 : Ty.path "Uint104" = Ty.path "uint104".

Axiom user_type_Uint112 : Ty.path "Uint112" = Ty.path "uint112".

Axiom user_type_Uint120 : Ty.path "Uint120" = Ty.path "uint120".

Axiom user_type_Uint128 : Ty.path "Uint128" = Ty.path "uint128".

Axiom user_type_Uint136 : Ty.path "Uint136" = Ty.path "uint136".

Axiom user_type_Uint144 : Ty.path "Uint144" = Ty.path "uint144".

Axiom user_type_Uint152 : Ty.path "Uint152" = Ty.path "uint152".

Axiom user_type_Uint160 : Ty.path "Uint160" = Ty.path "uint160".

Axiom user_type_Uint168 : Ty.path "Uint168" = Ty.path "uint168".

Axiom user_type_Uint176 : Ty.path "Uint176" = Ty.path "uint176".

Axiom user_type_Uint184 : Ty.path "Uint184" = Ty.path "uint184".

Axiom user_type_Uint192 : Ty.path "Uint192" = Ty.path "uint192".

Axiom user_type_Uint200 : Ty.path "Uint200" = Ty.path "uint200".

Axiom user_type_Uint208 : Ty.path "Uint208" = Ty.path "uint208".

Axiom user_type_Uint216 : Ty.path "Uint216" = Ty.path "uint216".

Axiom user_type_Uint224 : Ty.path "Uint224" = Ty.path "uint224".

Axiom user_type_Uint232 : Ty.path "Uint232" = Ty.path "uint232".

Axiom user_type_Uint240 : Ty.path "Uint240" = Ty.path "uint240".

Axiom user_type_Uint248 : Ty.path "Uint248" = Ty.path "uint248".

Axiom user_type_Uint256 : Ty.path "Uint256" = Ty.path "uint256".

Axiom user_type_Uint : Ty.path "Uint" = Ty.path "uint".

Axiom user_type_Bytes1 : Ty.path "Bytes1" = Ty.path "bytes1".

Axiom user_type_Bytes2 : Ty.path "Bytes2" = Ty.path "bytes2".

Axiom user_type_Bytes3 : Ty.path "Bytes3" = Ty.path "bytes3".

Axiom user_type_Bytes4 : Ty.path "Bytes4" = Ty.path "bytes4".

Axiom user_type_Bytes5 : Ty.path "Bytes5" = Ty.path "bytes5".

Axiom user_type_Bytes6 : Ty.path "Bytes6" = Ty.path "bytes6".

Axiom user_type_Bytes7 : Ty.path "Bytes7" = Ty.path "bytes7".

Axiom user_type_Bytes8 : Ty.path "Bytes8" = Ty.path "bytes8".

Axiom user_type_Bytes9 : Ty.path "Bytes9" = Ty.path "bytes9".

Axiom user_type_Bytes10 : Ty.path "Bytes10" = Ty.path "bytes10".

Axiom user_type_Bytes11 : Ty.path "Bytes11" = Ty.path "bytes11".

Axiom user_type_Bytes12 : Ty.path "Bytes12" = Ty.path "bytes12".

Axiom user_type_Bytes13 : Ty.path "Bytes13" = Ty.path "bytes13".

Axiom user_type_Bytes14 : Ty.path "Bytes14" = Ty.path "bytes14".

Axiom user_type_Bytes15 : Ty.path "Bytes15" = Ty.path "bytes15".

Axiom user_type_Bytes16 : Ty.path "Bytes16" = Ty.path "bytes16".

Axiom user_type_Bytes17 : Ty.path "Bytes17" = Ty.path "bytes17".

Axiom user_type_Bytes18 : Ty.path "Bytes18" = Ty.path "bytes18".

Axiom user_type_Bytes19 : Ty.path "Bytes19" = Ty.path "bytes19".

Axiom user_type_Bytes20 : Ty.path "Bytes20" = Ty.path "bytes20".

Axiom user_type_Bytes21 : Ty.path "Bytes21" = Ty.path "bytes21".

Axiom user_type_Bytes22 : Ty.path "Bytes22" = Ty.path "bytes22".

Axiom user_type_Bytes23 : Ty.path "Bytes23" = Ty.path "bytes23".

Axiom user_type_Bytes24 : Ty.path "Bytes24" = Ty.path "bytes24".

Axiom user_type_Bytes25 : Ty.path "Bytes25" = Ty.path "bytes25".

Axiom user_type_Bytes26 : Ty.path "Bytes26" = Ty.path "bytes26".

Axiom user_type_Bytes27 : Ty.path "Bytes27" = Ty.path "bytes27".

Axiom user_type_Bytes28 : Ty.path "Bytes28" = Ty.path "bytes28".

Axiom user_type_Bytes29 : Ty.path "Bytes29" = Ty.path "bytes29".

Axiom user_type_Bytes30 : Ty.path "Bytes30" = Ty.path "bytes30".

Axiom user_type_Bytes31 : Ty.path "Bytes31" = Ty.path "bytes31".

Axiom user_type_Bytes32 : Ty.path "Bytes32" = Ty.path "bytes32".

Axiom user_type_Address : Ty.path "Address" = Ty.path "address".

Axiom user_type_AddressPayable : Ty.path "AddressPayable" = Ty.path "address".

Axiom user_type_Bool : Ty.path "Bool" = Ty.path "bool".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int8"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt8",
    UsingFunction.Operator "-" "unsubInt8",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int16"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt16",
    UsingFunction.Operator "-" "unsubInt16",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int24"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt24",
    UsingFunction.Operator "-" "unsubInt24",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int32"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt32",
    UsingFunction.Operator "-" "unsubInt32",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int40"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt40",
    UsingFunction.Operator "-" "unsubInt40",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int48"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt48",
    UsingFunction.Operator "-" "unsubInt48",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int56"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt56",
    UsingFunction.Operator "-" "unsubInt56",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int64"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt64",
    UsingFunction.Operator "-" "unsubInt64",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int72"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt72",
    UsingFunction.Operator "-" "unsubInt72",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int80"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt80",
    UsingFunction.Operator "-" "unsubInt80",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int88"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt88",
    UsingFunction.Operator "-" "unsubInt88",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int96"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt96",
    UsingFunction.Operator "-" "unsubInt96",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int104"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt104",
    UsingFunction.Operator "-" "unsubInt104",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int112"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt112",
    UsingFunction.Operator "-" "unsubInt112",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int120"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt120",
    UsingFunction.Operator "-" "unsubInt120",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int128"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt128",
    UsingFunction.Operator "-" "unsubInt128",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int136"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt136",
    UsingFunction.Operator "-" "unsubInt136",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int144"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt144",
    UsingFunction.Operator "-" "unsubInt144",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int152"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt152",
    UsingFunction.Operator "-" "unsubInt152",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int160"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt160",
    UsingFunction.Operator "-" "unsubInt160",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int168"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt168",
    UsingFunction.Operator "-" "unsubInt168",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int176"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt176",
    UsingFunction.Operator "-" "unsubInt176",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int184"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt184",
    UsingFunction.Operator "-" "unsubInt184",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int192"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt192",
    UsingFunction.Operator "-" "unsubInt192",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int200"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt200",
    UsingFunction.Operator "-" "unsubInt200",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int208"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt208",
    UsingFunction.Operator "-" "unsubInt208",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int216"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt216",
    UsingFunction.Operator "-" "unsubInt216",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int224"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt224",
    UsingFunction.Operator "-" "unsubInt224",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int232"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt232",
    UsingFunction.Operator "-" "unsubInt232",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int240"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt240",
    UsingFunction.Operator "-" "unsubInt240",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int248"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt248",
    UsingFunction.Operator "-" "unsubInt248",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int256"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt256",
    UsingFunction.Operator "-" "unsubInt256",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorInt",
    UsingFunction.Operator "-" "unsubInt",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint8"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint8",
    UsingFunction.Operator "~" "bitnotUint8",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint16"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint16",
    UsingFunction.Operator "~" "bitnotUint16",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint24"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint24",
    UsingFunction.Operator "~" "bitnotUint24",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint32"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint32",
    UsingFunction.Operator "~" "bitnotUint32",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint40"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint40",
    UsingFunction.Operator "~" "bitnotUint40",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint48"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint48",
    UsingFunction.Operator "~" "bitnotUint48",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint56"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint56",
    UsingFunction.Operator "~" "bitnotUint56",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint64"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint64",
    UsingFunction.Operator "~" "bitnotUint64",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint72"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint72",
    UsingFunction.Operator "~" "bitnotUint72",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint80"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint80",
    UsingFunction.Operator "~" "bitnotUint80",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint88"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint88",
    UsingFunction.Operator "~" "bitnotUint88",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint96"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint96",
    UsingFunction.Operator "~" "bitnotUint96",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint104"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint104",
    UsingFunction.Operator "~" "bitnotUint104",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint112"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint112",
    UsingFunction.Operator "~" "bitnotUint112",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint120"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint120",
    UsingFunction.Operator "~" "bitnotUint120",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint128"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint128",
    UsingFunction.Operator "~" "bitnotUint128",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint136"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint136",
    UsingFunction.Operator "~" "bitnotUint136",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint144"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint144",
    UsingFunction.Operator "~" "bitnotUint144",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint152"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint152",
    UsingFunction.Operator "~" "bitnotUint152",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint160"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint160",
    UsingFunction.Operator "~" "bitnotUint160",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint168"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint168",
    UsingFunction.Operator "~" "bitnotUint168",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint176"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint176",
    UsingFunction.Operator "~" "bitnotUint176",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint184"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint184",
    UsingFunction.Operator "~" "bitnotUint184",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint192"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint192",
    UsingFunction.Operator "~" "bitnotUint192",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint200"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint200",
    UsingFunction.Operator "~" "bitnotUint200",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint208"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint208",
    UsingFunction.Operator "~" "bitnotUint208",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint216"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint216",
    UsingFunction.Operator "~" "bitnotUint216",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint224"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint224",
    UsingFunction.Operator "~" "bitnotUint224",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint232"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint232",
    UsingFunction.Operator "~" "bitnotUint232",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint240"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint240",
    UsingFunction.Operator "~" "bitnotUint240",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint248"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint248",
    UsingFunction.Operator "~" "bitnotUint248",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint256"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint256",
    UsingFunction.Operator "~" "bitnotUint256",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Uint"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorUint",
    UsingFunction.Operator "~" "bitnotUint",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes1"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes1",
    UsingFunction.Operator "~" "bitnotBytes1",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes2"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes2",
    UsingFunction.Operator "~" "bitnotBytes2",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes3"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes3",
    UsingFunction.Operator "~" "bitnotBytes3",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes4"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes4",
    UsingFunction.Operator "~" "bitnotBytes4",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes5"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes5",
    UsingFunction.Operator "~" "bitnotBytes5",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes6"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes6",
    UsingFunction.Operator "~" "bitnotBytes6",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes7"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes7",
    UsingFunction.Operator "~" "bitnotBytes7",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes8"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes8",
    UsingFunction.Operator "~" "bitnotBytes8",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes9"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes9",
    UsingFunction.Operator "~" "bitnotBytes9",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes10"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes10",
    UsingFunction.Operator "~" "bitnotBytes10",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes11"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes11",
    UsingFunction.Operator "~" "bitnotBytes11",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes12"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes12",
    UsingFunction.Operator "~" "bitnotBytes12",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes13"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes13",
    UsingFunction.Operator "~" "bitnotBytes13",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes14"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes14",
    UsingFunction.Operator "~" "bitnotBytes14",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes15"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes15",
    UsingFunction.Operator "~" "bitnotBytes15",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes16"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes16",
    UsingFunction.Operator "~" "bitnotBytes16",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes17"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes17",
    UsingFunction.Operator "~" "bitnotBytes17",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes18"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes18",
    UsingFunction.Operator "~" "bitnotBytes18",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes19"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes19",
    UsingFunction.Operator "~" "bitnotBytes19",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes20"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes20",
    UsingFunction.Operator "~" "bitnotBytes20",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes21"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes21",
    UsingFunction.Operator "~" "bitnotBytes21",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes22"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes22",
    UsingFunction.Operator "~" "bitnotBytes22",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes23"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes23",
    UsingFunction.Operator "~" "bitnotBytes23",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes24"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes24",
    UsingFunction.Operator "~" "bitnotBytes24",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes25"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes25",
    UsingFunction.Operator "~" "bitnotBytes25",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes26"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes26",
    UsingFunction.Operator "~" "bitnotBytes26",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes27"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes27",
    UsingFunction.Operator "~" "bitnotBytes27",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes28"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes28",
    UsingFunction.Operator "~" "bitnotBytes28",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes29"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes29",
    UsingFunction.Operator "~" "bitnotBytes29",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes30"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes30",
    UsingFunction.Operator "~" "bitnotBytes30",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes31"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes31",
    UsingFunction.Operator "~" "bitnotBytes31",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bytes32"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBytes32",
    UsingFunction.Operator "~" "bitnotBytes32",
  ]
  |).

Definition bitorInt8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt40 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int40" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt48 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int48" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt56 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int56" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt64 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int64" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt72 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int72" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt80 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int80" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt88 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int88" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt96 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int96" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt104 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int104" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt112 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int112" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt120 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int120" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt128 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int128" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt136 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int136" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt144 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int144" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt152 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int152" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt160 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int160" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt168 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int168" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt176 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int176" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt184 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int184" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt192 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int192" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt200 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int200" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt208 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int208" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt216 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int216" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt224 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int224" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt232 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int232" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt240 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int240" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt248 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int248" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt256 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int256" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorInt (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt40 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int40" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt48 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int48" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt56 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int56" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt64 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int64" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt72 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int72" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt80 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int80" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt88 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int88" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt96 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int96" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt104 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int104" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt112 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int112" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt120 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int120" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt128 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int128" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt136 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int136" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt144 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int144" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt152 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int152" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt160 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int160" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt168 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int168" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt176 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int176" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt184 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int184" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt192 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int192" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt200 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int200" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt208 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int208" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt216 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int216" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt224 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int224" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt232 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int232" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt240 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int240" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt248 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int248" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt256 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int256" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsubInt (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint40 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint40" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint48 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint48" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint56 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint56" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint64 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint64" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint72 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint72" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint80 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint80" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint88 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint88" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint96 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint96" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint104 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint104" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint112 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint112" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint120 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint120" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint128 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint128" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint136 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint136" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint144 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint144" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint152 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint152" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint160 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint160" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint168 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint168" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint176 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint176" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint184 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint184" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint192 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint192" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint200 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint200" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint208 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint208" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint216 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint216" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint224 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint224" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint232 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint232" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint240 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint240" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint248 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint248" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint256 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint256" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorUint (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint40 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint40" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint48 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint48" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint56 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint56" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint64 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint64" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint72 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint72" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint80 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint80" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint88 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint88" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint96 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint96" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint104 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint104" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint112 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint112" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint120 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint120" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint128 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint128" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint136 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint136" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint144 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint144" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint152 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint152" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint160 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint160" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint168 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint168" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint176 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint176" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint184 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint184" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint192 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint192" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint200 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint200" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint208 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint208" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint216 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint216" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint224 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint224" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint232 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint232" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint240 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint240" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint248 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint248" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint256 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint256" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotUint (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Uint" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes1 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes1" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes2 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes2" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes3 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes3" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes4 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes4" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes5 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes5" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes6 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes6" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes7 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes7" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes8 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes8" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes9 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes9" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes10 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes10" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes11 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes11" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes12 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes12" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes13 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes13" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes14 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes14" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes15 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes15" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes16 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes16" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes17 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes17" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes18 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes18" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes19 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes19" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes20 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes20" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes21 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes21" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes22 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes22" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes23 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes23" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes24 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes24" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes25 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes25" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes26 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes26" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes27 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes27" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes28 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes28" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes29 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes29" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes30 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes30" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes31 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes31" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBytes32 (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes32" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes1 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes1" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes2 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes2" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes3 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes3" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes4 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes4" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes5 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes5" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes6 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes6" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes7 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes7" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes8 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes8" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes9 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes9" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes10 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes10" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes11 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes11" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes12 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes12" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes13 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes13" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes14 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes14" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes15 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes15" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes16 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes16" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes17 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes17" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes18 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes18" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes19 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes19" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes20 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes20" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes21 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes21" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes22 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes22" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes23 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes23" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes24 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes24" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes25 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes25" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes26 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes26" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes27 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes27" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes28 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes28" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes29 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes29" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes30 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes30" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes31 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes31" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBytes32 (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bytes32" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Axiom using : M.usingFunctions (|
    Some (Ty.path "Address"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorAddress",
    UsingFunction.Operator "~" "bitnotAddress",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "AddressPayable"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorAddressPayable",
    UsingFunction.Operator "~" "bitnotAddressPayable",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bool"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitorBool",
    UsingFunction.Operator "~" "bitnotBool",
  ]
  |).

Definition bitorAddress (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Address" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.bin_op (|
                  "|",
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "x" |)
                        ]
                      |)
                    ]
                  |),
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "y" |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotAddress (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Address" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.un_op (|
                  true,
                  "~",
                  M.call (|
                    Ty.path "bytes20",
                    [
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Address" |),
                          "unwrap"
                        |),
                        [
                          M.get_name (| "x" |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorAddressPayable (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "AddressPayable" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.bin_op (|
                      "|",
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "x" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |),
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "y" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotAddressPayable (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "AddressPayable" |),
            "wrap"
          |),
          [
            M.call (|
              Ty.path "address",
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.un_op (|
                      true,
                      "~",
                      M.call (|
                        Ty.path "bytes20",
                        [
                          M.call (|
                            Ty.path "address",
                            [
                              M.call (|
                                M.member_access (|
                                  M.get_name (| "AddressPayable" |),
                                  "unwrap"
                                |),
                                [
                                  M.get_name (| "x" |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitorBool (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "||",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnotBool (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "!",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition testIntBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testIntUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int40" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int48" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int56" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int64" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int72" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int80" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int88" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int96" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int104" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int112" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int120" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int128" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int136" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int144" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int152" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int160" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int168" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int176" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int184" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int192" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int200" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int208" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int216" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int224" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int232" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int240" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int248" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int256" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Int" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testUintBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 2
                      ]
                    |)
                  |)
                ]
              |),
              Value.Integer 3
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testUintUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint8" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint8",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint16" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint16",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint24" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint24",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint32" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint32",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint40" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint40" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint40",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint48" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint48" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint48",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint56" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint56" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint56",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint64" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint64" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint64",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint72" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint72" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint72",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint80" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint80" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint80",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint88" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint88" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint88",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint96" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint96" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint96",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint104" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint104" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint104",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint112" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint112" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint112",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint120" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint120" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint120",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint128" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint128" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint128",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint136" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint136" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint136",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint144" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint144" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint144",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint152" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint152" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint152",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint160" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint160" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint160",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint168" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint168" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint168",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint176" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint176" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint176",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint184" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint184" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint184",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint192" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint192" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint192",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint200" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint200" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint200",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint208" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint208" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint208",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint216" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint216" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint216",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint224" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint224" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint224",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint232" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint232" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint232",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint240" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint240" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint240",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint248" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint248" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint248",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint256" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint256" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint256",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Uint" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Uint" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 1
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBytesBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 0x01
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        Value.Integer 0x02
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes1",
                [
                  Value.Integer 0x03
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes2",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes3",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes5",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes6",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes7",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes8",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes9",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes10",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes11",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes12",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes13",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes14",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes15",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes16",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes17",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes18",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes19",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes20",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes21",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes22",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes23",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes24",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes25",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes26",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes27",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes28",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes29",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes30",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes31",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "bytes1",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBytesUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes1" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes1" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes1",
                          [
                            Value.Integer 0x01
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes1",
                  [
                    Value.Integer 0x01
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes2" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes2" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes2",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes2",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes3" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes3" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes3",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes3",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes4" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes4" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes4",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes4",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes5" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes5" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes5",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes5",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes6" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes6" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes6",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes6",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes7" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes7" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes7",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes7",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes8" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes8" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes8",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes8",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes9" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes9" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes9",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes9",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes10" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes10" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes10",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes10",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes11" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes11" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes11",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes11",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes12" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes12" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes12",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes12",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes13" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes13" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes13",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes13",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes14" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes14" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes14",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes14",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes15" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes15" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes15",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes15",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes16" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes16" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes16",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes16",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes17" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes17" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes17",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes17",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes18" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes18" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes18",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes18",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes19" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes19" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes19",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes19",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes20" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes20" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes20",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes20",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes21" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes21" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes21",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes21",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes22" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes22" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes22",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes22",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes23" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes23" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes23",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes23",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes24" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes24" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes24",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes24",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes25" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes25" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes25",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes25",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes26" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes26" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes26",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes26",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes27" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes27" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes27",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes27",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes28" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes28" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes28",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes28",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes29" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes29" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes29",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes29",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes30" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes30" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes30",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes30",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes31" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes31" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes31",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes31",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bytes32" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bytes32" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "bytes32",
                          [
                            M.call (|
                              Ty.path "bytes1",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.un_op (|
                true,
                "~",
                M.call (|
                  Ty.path "bytes32",
                  [
                    M.call (|
                      Ty.path "bytes1",
                      [
                        Value.Integer 0x01
                      ]
                    |)
                  ]
                |)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testOtherBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Address" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0x01
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0x02
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0x03
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "AddressPayable" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0x01
                              ]
                            |)
                          ]
                        |)
                      ]
                    |),
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0x02
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    Ty.path "address",
                    [
                      Value.Integer 0x03
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bool" |),
                        "wrap"
                      |),
                      [
                        Value.Bool true
                      ]
                    |)
                  |)
                ]
              |),
              Value.Bool false
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testOtherUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Address" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Address" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            Value.Integer 0
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      Ty.path "bytes20",
                      [
                        Value.Integer 0
                      ]
                    |)
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "AddressPayable" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "AddressPayable" |),
                        "wrap"
                      |),
                      [
                        M.call (|
                          Ty.path "address",
                          [
                            M.call (|
                              Ty.path "address",
                              [
                                Value.Integer 0
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                ]
              |),
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    Ty.path "address",
                    [
                      M.un_op (|
                        true,
                        "~",
                        M.call (|
                          Ty.path "bytes20",
                          [
                            Value.Integer 0
                          ]
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.un_op (|
                    true,
                    "~",
                    M.call (|
                      M.member_access (|
                        M.get_name (| "Bool" |),
                        "wrap"
                      |),
                      [
                        Value.Bool true
                      ]
                    |)
                  |)
                ]
              |),
              Value.Bool false
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
