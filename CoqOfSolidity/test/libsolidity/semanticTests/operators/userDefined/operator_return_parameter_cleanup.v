(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_U8 : Ty.path "U8" = Ty.path "uint8".

Axiom using : M.usingFunctions (|
    Some (Ty.path "U8"),
    UsingKind.Global,
    [
    UsingFunction.Operator "~" "f",
    UsingFunction.Operator "+" "g",
  ]
  |).

Definition f (α : list Value.t) : M :=
  match α with
  | [_] =>
    let _ :=
      (* Beginning of a node! *)
id: 16
src: 98:96:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 177:1:0declaration: 14isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition g (α : list Value.t) : M :=
  match α with
  | [_, _] =>
    let _ :=
      (* Beginning of a node! *)
id: 30
src: 243:96:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 322:1:0declaration: 28isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition testUnary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "opResult" ],
          M.un_op (|
            true,
            "~",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        M.define (|
          [ "fResult" ],
          M.call (|
            M.get_name (| "f" |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "opResultFull" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "fResultFull" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 62
src: 631:92:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 706:7:0declaration: 51isSlot: isOffset: alueSize: src: 691:11:0declaration: 60isSlot: isOffset: alueSize: src: 670:8:0declaration: 45isSlot: isOffset: alueSize: src: 654:12:0declaration: 57isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "opResultFull" |),
            M.get_name (| "fResultFull" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBinary (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "opResult" ],
          M.bin_op (|
            "+",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |)
        |) in
      let _ :=
        M.define (|
          [ "fResult" ],
          M.call (|
            M.get_name (| "g" |),
            [
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "opResultFull" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "fResultFull" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 104
src: 1161:92:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1236:7:0declaration: 92isSlot: isOffset: alueSize: src: 1221:11:0declaration: 102isSlot: isOffset: alueSize: src: 1200:8:0declaration: 85isSlot: isOffset: alueSize: src: 1184:12:0declaration: 99isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "opResultFull" |),
            M.get_name (| "fResultFull" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
