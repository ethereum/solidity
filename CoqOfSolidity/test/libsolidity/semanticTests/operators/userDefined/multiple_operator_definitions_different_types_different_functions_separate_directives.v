(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_SmallInt : Ty.path "SmallInt" = Ty.path "int".

Axiom user_type_BigInt : Ty.path "BigInt" = Ty.path "int".

Axiom using : M.usingFunctions (|
    Some (Ty.path "SmallInt"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "addSmall",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "BigInt"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "addBig",
  ]
  |).

Definition addSmall (α : list Value.t) : M :=
  match α with
  | [a, b] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "SmallInt" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "SmallInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "a" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "SmallInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "b" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition addBig (α : list Value.t) : M :=
  match α with
  | [a, b] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "BigInt" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "*",
              Value.Integer 10,
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.call (|
                    M.member_access (|
                      M.get_name (| "BigInt" |),
                      "unwrap"
                    |),
                    [
                      M.get_name (| "a" |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "BigInt" |),
                      "unwrap"
                    |),
                    [
                      M.get_name (| "b" |)
                    ]
                  |)
                |)
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition small (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.call (|
              M.member_access (|
                M.get_name (| "SmallInt" |),
                "wrap"
              |),
              [
                Value.Integer 1
              ]
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "SmallInt" |),
                "wrap"
              |),
              [
                Value.Integer 2
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition big (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.call (|
              M.member_access (|
                M.get_name (| "BigInt" |),
                "wrap"
              |),
              [
                Value.Integer 3
              ]
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "BigInt" |),
                "wrap"
              |),
              [
                Value.Integer 4
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
