(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int64".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int"),
    UsingKind.Global,
    [
    UsingFunction.Operator "|" "bitor",
    UsingFunction.Operator "&" "bitand",
    UsingFunction.Operator "^" "bitxor",
    UsingFunction.Operator "~" "bitnot",
    UsingFunction.Operator "+" "add",
    UsingFunction.Operator "-" "sub",
    UsingFunction.Operator "-" "unsub",
    UsingFunction.Operator "*" "mul",
    UsingFunction.Operator "/" "div",
    UsingFunction.Operator "%" "mod",
  ]
  |).

Definition bitor (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "|",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitand (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "&",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitxor (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "^",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition bitnot (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "~",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "+",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition sub (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsub (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "-",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition mul (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "*",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition div (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "/",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition mod (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "%",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition I0 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 0
      ]
    |).

  Definition I1 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 1
      ]
    |).

  Definition I2 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 2
      ]
    |).

  Definition I3 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 3
      ]
    |).

  Definition I4 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 4
      ]
    |).

  Definition I5 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 5
      ]
    |).

  Definition I6 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 6
      ]
    |).

  Definition I7 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 7
      ]
    |).

  Definition I8 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 8
      ]
    |).

  Definition I10 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 10
      ]
    |).

  Definition I13 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 13
      ]
    |).

  Definition I15 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 15
      ]
    |).

  Definition I20 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 20
      ]
    |).

  Definition I128 : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Int" |),
        "wrap"
      |),
      [
        Value.Integer 128
      ]
    |).

  Definition testBitwise (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "&",
                      M.get_name (| "I0" |),
                      M.get_name (| "I0" |)
                    |),
                    M.get_name (| "I1" |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  M.bin_op (|
                    "&",
                    Value.Integer 0,
                    Value.Integer 0
                  |),
                  Value.Integer 1
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "&",
                      M.get_name (| "I0" |),
                      M.get_name (| "I0" |)
                    |),
                    M.get_name (| "I1" |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  Value.Tuple [
                    M.bin_op (|
                      "&",
                      Value.Integer 0,
                      Value.Integer 0
                    |)
                  ],
                  Value.Integer 1
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBitwise_arithmetic (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "+",
                        M.get_name (| "I2" |),
                        M.get_name (| "I2" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I1" |)
                      |)
                    |),
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "-",
                        M.bin_op (|
                          "*",
                          M.get_name (| "I6" |),
                          M.get_name (| "I6" |)
                        |),
                        M.get_name (| "I4" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I3" |)
                      |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  M.bin_op (|
                    "&",
                    M.bin_op (|
                      "+",
                      Value.Integer 2,
                      Value.Integer 2
                    |),
                    M.un_op (|
                      true,
                      "~",
                      Value.Integer 1
                    |)
                  |),
                  M.bin_op (|
                    "&",
                    M.bin_op (|
                      "-",
                      M.bin_op (|
                        "*",
                        Value.Integer 6,
                        Value.Integer 6
                      |),
                      Value.Integer 4
                    |),
                    M.un_op (|
                      true,
                      "~",
                      Value.Integer 3
                    |)
                  |)
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "+",
                        M.get_name (| "I2" |),
                        M.get_name (| "I2" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I1" |)
                      |)
                    |),
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "-",
                        M.bin_op (|
                          "*",
                          M.get_name (| "I6" |),
                          M.get_name (| "I6" |)
                        |),
                        M.get_name (| "I4" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I3" |)
                      |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  Value.Tuple [
                    M.bin_op (|
                      "&",
                      Value.Tuple [
                        M.bin_op (|
                          "+",
                          Value.Integer 2,
                          Value.Integer 2
                        |)
                      ],
                      Value.Tuple [
                        M.un_op (|
                          true,
                          "~",
                          Value.Integer 1
                        |)
                      ]
                    |)
                  ],
                  Value.Tuple [
                    M.bin_op (|
                      "&",
                      Value.Tuple [
                        M.bin_op (|
                          "-",
                          Value.Tuple [
                            M.bin_op (|
                              "*",
                              Value.Integer 6,
                              Value.Integer 6
                            |)
                          ],
                          Value.Integer 4
                        |)
                      ],
                      Value.Tuple [
                        M.un_op (|
                          true,
                          "~",
                          Value.Integer 3
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testArithmetic (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "-",
                    M.bin_op (|
                      "+",
                      M.get_name (| "I1" |),
                      M.bin_op (|
                        "/",
                        M.get_name (| "I8" |),
                        M.get_name (| "I4" |)
                      |)
                    |),
                    M.bin_op (|
                      "*",
                      M.bin_op (|
                        "%",
                        M.get_name (| "I5" |),
                        M.get_name (| "I6" |)
                      |),
                      M.get_name (| "I7" |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "-",
                  M.bin_op (|
                    "+",
                    Value.Integer 1,
                    M.bin_op (|
                      "/",
                      Value.Integer 8,
                      Value.Integer 4
                    |)
                  |),
                  M.bin_op (|
                    "*",
                    M.bin_op (|
                      "%",
                      Value.Integer 5,
                      Value.Integer 6
                    |),
                    Value.Integer 7
                  |)
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "-",
                    M.bin_op (|
                      "+",
                      M.get_name (| "I1" |),
                      M.bin_op (|
                        "/",
                        M.get_name (| "I8" |),
                        M.get_name (| "I4" |)
                      |)
                    |),
                    M.bin_op (|
                      "*",
                      M.bin_op (|
                        "%",
                        M.get_name (| "I5" |),
                        M.get_name (| "I6" |)
                      |),
                      M.get_name (| "I7" |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "-",
                  Value.Tuple [
                    M.bin_op (|
                      "+",
                      Value.Integer 1,
                      Value.Tuple [
                        M.bin_op (|
                          "/",
                          Value.Integer 8,
                          Value.Integer 4
                        |)
                      ]
                    |)
                  ],
                  Value.Tuple [
                    M.bin_op (|
                      "*",
                      Value.Tuple [
                        M.bin_op (|
                          "%",
                          Value.Integer 5,
                          Value.Integer 6
                        |)
                      ],
                      Value.Integer 7
                    |)
                  ]
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testAll (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "^",
                      M.bin_op (|
                        "&",
                        M.bin_op (|
                          "+",
                          M.bin_op (|
                            "-",
                            M.bin_op (|
                              "+",
                              M.get_name (| "I128" |),
                              M.get_name (| "I1" |)
                            |),
                            M.get_name (| "I10" |)
                          |),
                          M.get_name (| "I4" |)
                        |),
                        M.un_op (|
                          true,
                          "~",
                          M.get_name (| "I1" |)
                        |)
                      |),
                      M.bin_op (|
                        "*",
                        M.un_op (|
                          true,
                          "~",
                          M.get_name (| "I1" |)
                        |),
                        M.get_name (| "I2" |)
                      |)
                    |),
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "+",
                        M.bin_op (|
                          "/",
                          M.bin_op (|
                            "*",
                            M.bin_op (|
                              "%",
                              M.un_op (|
                                true,
                                "-",
                                M.get_name (| "I15" |)
                              |),
                              M.un_op (|
                                true,
                                "-",
                                M.get_name (| "I10" |)
                              |)
                            |),
                            M.get_name (| "I20" |)
                          |),
                          M.get_name (| "I2" |)
                        |),
                        M.get_name (| "I13" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I3" |)
                      |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  M.bin_op (|
                    "^",
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "+",
                        M.bin_op (|
                          "-",
                          M.bin_op (|
                            "+",
                            Value.Integer 128,
                            Value.Integer 1
                          |),
                          Value.Integer 10
                        |),
                        Value.Integer 4
                      |),
                      M.un_op (|
                        true,
                        "~",
                        Value.Integer 1
                      |)
                    |),
                    M.bin_op (|
                      "*",
                      M.un_op (|
                        true,
                        "~",
                        Value.Integer 1
                      |),
                      Value.Integer 2
                    |)
                  |),
                  M.bin_op (|
                    "&",
                    M.bin_op (|
                      "+",
                      M.bin_op (|
                        "/",
                        M.bin_op (|
                          "*",
                          M.bin_op (|
                            "%",
                            M.un_op (|
                              true,
                              "-",
                              Value.Integer 15
                            |),
                            M.un_op (|
                              true,
                              "-",
                              Value.Integer 10
                            |)
                          |),
                          Value.Integer 20
                        |),
                        Value.Integer 2
                      |),
                      Value.Integer 13
                    |),
                    M.un_op (|
                      true,
                      "~",
                      Value.Integer 3
                    |)
                  |)
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "Int" |),
                  "unwrap"
                |),
                [
                  M.bin_op (|
                    "|",
                    M.bin_op (|
                      "^",
                      M.bin_op (|
                        "&",
                        M.bin_op (|
                          "+",
                          M.bin_op (|
                            "-",
                            M.bin_op (|
                              "+",
                              M.get_name (| "I128" |),
                              M.get_name (| "I1" |)
                            |),
                            M.get_name (| "I10" |)
                          |),
                          M.get_name (| "I4" |)
                        |),
                        M.un_op (|
                          true,
                          "~",
                          M.get_name (| "I1" |)
                        |)
                      |),
                      M.bin_op (|
                        "*",
                        M.un_op (|
                          true,
                          "~",
                          M.get_name (| "I1" |)
                        |),
                        M.get_name (| "I2" |)
                      |)
                    |),
                    M.bin_op (|
                      "&",
                      M.bin_op (|
                        "+",
                        M.bin_op (|
                          "/",
                          M.bin_op (|
                            "*",
                            M.bin_op (|
                              "%",
                              M.un_op (|
                                true,
                                "-",
                                M.get_name (| "I15" |)
                              |),
                              M.un_op (|
                                true,
                                "-",
                                M.get_name (| "I10" |)
                              |)
                            |),
                            M.get_name (| "I20" |)
                          |),
                          M.get_name (| "I2" |)
                        |),
                        M.get_name (| "I13" |)
                      |),
                      M.un_op (|
                        true,
                        "~",
                        M.get_name (| "I3" |)
                      |)
                    |)
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "|",
                  Value.Tuple [
                    M.bin_op (|
                      "^",
                      Value.Tuple [
                        M.bin_op (|
                          "&",
                          Value.Tuple [
                            M.bin_op (|
                              "+",
                              Value.Tuple [
                                M.bin_op (|
                                  "-",
                                  Value.Tuple [
                                    M.bin_op (|
                                      "+",
                                      Value.Integer 128,
                                      Value.Integer 1
                                    |)
                                  ],
                                  Value.Integer 10
                                |)
                              ],
                              Value.Integer 4
                            |)
                          ],
                          Value.Tuple [
                            M.un_op (|
                              true,
                              "~",
                              Value.Integer 1
                            |)
                          ]
                        |)
                      ],
                      Value.Tuple [
                        M.bin_op (|
                          "*",
                          Value.Tuple [
                            M.un_op (|
                              true,
                              "~",
                              Value.Integer 1
                            |)
                          ],
                          Value.Integer 2
                        |)
                      ]
                    |)
                  ],
                  Value.Tuple [
                    M.bin_op (|
                      "&",
                      Value.Tuple [
                        M.bin_op (|
                          "+",
                          Value.Tuple [
                            M.bin_op (|
                              "/",
                              Value.Tuple [
                                M.bin_op (|
                                  "*",
                                  Value.Tuple [
                                    M.bin_op (|
                                      "%",
                                      Value.Tuple [
                                        M.un_op (|
                                          true,
                                          "-",
                                          Value.Integer 15
                                        |)
                                      ],
                                      Value.Tuple [
                                        M.un_op (|
                                          true,
                                          "-",
                                          Value.Integer 10
                                        |)
                                      ]
                                    |)
                                  ],
                                  Value.Integer 20
                                |)
                              ],
                              Value.Integer 2
                            |)
                          ],
                          Value.Integer 13
                        |)
                      ],
                      Value.Tuple [
                        M.un_op (|
                          true,
                          "~",
                          Value.Integer 3
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
