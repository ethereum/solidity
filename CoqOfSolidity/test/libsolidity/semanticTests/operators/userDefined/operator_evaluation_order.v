(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Bool : Ty.path "Bool" = Ty.path "bool".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Bool"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "add",
    UsingFunction.Operator "*" "mul",
    UsingFunction.Operator "-" "unsub",
  ]
  |).

Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "||",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition mul (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.bin_op (|
              "&&",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsub (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "Bool" |),
            "wrap"
          |),
          [
            M.un_op (|
              true,
              "!",
              M.call (|
                M.member_access (|
                  M.get_name (| "Bool" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  (* Event Wrapped *)

  (* Event Probe *)

  Definition toBool (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Wrapped" |),
          [
            M.get_name (| "x" |)
          ]
        |)
 in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "Bool" |),
              "wrap"
            |),
            [
              M.bin_op (|
                ">",
                M.get_name (| "x" |),
                Value.Integer 0
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition probe (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Probe" |),
          [
            M.get_name (| "x" |)
          ]
        |)
 in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testSingleOperator (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.bin_op (|
          "+",
          M.bin_op (|
            "+",
            M.call (|
              M.get_name (| "toBool" |),
              [
                Value.Integer 0
              ]
            |),
            Value.Tuple [
              M.bin_op (|
                "+",
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 1
                  ]
                |),
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 2
                  ]
                |)
              |)
            ]
          |),
          M.call (|
            M.get_name (| "toBool" |),
            [
              Value.Integer 3
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testTwoBinaryOperators (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.bin_op (|
          "+",
          M.bin_op (|
            "+",
            M.bin_op (|
              "*",
              M.call (|
                M.get_name (| "toBool" |),
                [
                  Value.Integer 0
                ]
              |),
              M.call (|
                M.get_name (| "toBool" |),
                [
                  Value.Integer 1
                ]
              |)
            |),
            Value.Tuple [
              M.bin_op (|
                "*",
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 2
                  ]
                |),
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 3
                  ]
                |)
              |)
            ]
          |),
          M.bin_op (|
            "*",
            M.call (|
              M.get_name (| "toBool" |),
              [
                Value.Integer 4
              ]
            |),
            M.call (|
              M.get_name (| "toBool" |),
              [
                Value.Integer 5
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testBinaryAndUnaryOperators (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.bin_op (|
          "+",
          M.bin_op (|
            "+",
            M.bin_op (|
              "*",
              M.un_op (|
                true,
                "-",
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 0
                  ]
                |)
              |),
              M.un_op (|
                true,
                "-",
                M.call (|
                  M.get_name (| "toBool" |),
                  [
                    Value.Integer 1
                  ]
                |)
              |)
            |),
            Value.Tuple [
              M.bin_op (|
                "*",
                M.un_op (|
                  true,
                  "-",
                  M.call (|
                    M.get_name (| "toBool" |),
                    [
                      Value.Integer 2
                    ]
                  |)
                |),
                M.un_op (|
                  true,
                  "-",
                  M.call (|
                    M.get_name (| "toBool" |),
                    [
                      Value.Integer 3
                    ]
                  |)
                |)
              |)
            ]
          |),
          M.bin_op (|
            "*",
            M.un_op (|
              true,
              "-",
              M.call (|
                M.get_name (| "toBool" |),
                [
                  Value.Integer 4
                ]
              |)
            |),
            M.un_op (|
              true,
              "-",
              M.call (|
                M.get_name (| "toBool" |),
                [
                  Value.Integer 5
                ]
              |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testOperatorsNestedInCalls (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.bin_op (|
          "+",
          M.bin_op (|
            "+",
            M.un_op (|
              true,
              "-",
              M.call (|
                M.get_name (| "probe" |),
                [
                  M.bin_op (|
                    "*",
                    M.call (|
                      M.get_name (| "toBool" |),
                      [
                        Value.Integer 0
                      ]
                    |),
                    M.un_op (|
                      true,
                      "-",
                      M.call (|
                        M.get_name (| "toBool" |),
                        [
                          Value.Integer 1
                        ]
                      |)
                    |)
                  |)
                ]
              |)
            |),
            Value.Tuple [
              M.un_op (|
                true,
                "-",
                M.call (|
                  M.get_name (| "probe" |),
                  [
                    M.bin_op (|
                      "*",
                      M.call (|
                        M.get_name (| "toBool" |),
                        [
                          Value.Integer 2
                        ]
                      |),
                      M.un_op (|
                        true,
                        "-",
                        M.call (|
                          M.get_name (| "toBool" |),
                          [
                            Value.Integer 3
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            ]
          |),
          M.un_op (|
            true,
            "-",
            M.call (|
              M.get_name (| "probe" |),
              [
                M.bin_op (|
                  "*",
                  M.call (|
                    M.get_name (| "toBool" |),
                    [
                      Value.Integer 4
                    ]
                  |),
                  M.un_op (|
                    true,
                    "-",
                    M.call (|
                      M.get_name (| "toBool" |),
                      [
                        Value.Integer 5
                      ]
                    |)
                  |)
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
