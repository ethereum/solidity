(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition shl_1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 8
src: 85:47:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 108:1:0declaration: 6isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shl_2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 26
src: 257:158:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 280:1:0declaration: 24isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shl_3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 44
src: 643:160:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 666:1:0declaration: 42isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shr_1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 62
src: 928:47:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 951:1:0declaration: 60isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shr_2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 80
src: 1100:158:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1123:1:0declaration: 78isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shr_3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 98
src: 1486:160:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1509:1:0declaration: 96isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
