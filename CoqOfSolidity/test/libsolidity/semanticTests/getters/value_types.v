(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition d : Value.t :=
    undefined.

  Definition e : Value.t :=
    undefined.

  Definition f : Value.t :=
    undefined.

  Definition g : Value.t :=
    undefined.

  Definition h : Value.t :=
    undefined.

  Definition i : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          Value.Integer 6
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "e" |),
          M.call (|
            Ty.path "bytes1",
            [
              M.call (|
                Ty.path "uint8",
                [
                  Value.Integer 0x7f
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "f" |),
          M.call (|
            Ty.path "bytes20",
            [
              M.call (|
                Ty.path "uint160",
                [
                  Value.Integer 0x6465616462656566313564656164000000000010
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "g" |),
          M.call (|
            Ty.path "bytes32",
            [
              M.call (|
                Ty.path "uint256",
                [
                  Value.Integer 0x6465616462656566313564656164000000000000000000000000000000000010
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "h" |),
          Value.Bool true
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "i" |),
          M.call (|
            Ty.path "address",
            [
              M.bin_op (|
                "/",
                M.member_access (|
                  M.call (|
                    M.get_name (| "type" |),
                    [
                      Ty.path "uint160"
                    ]
                  |),
                  "max"
                |),
                Value.Integer 3
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
