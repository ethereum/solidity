(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct Y *)

  Definition m : Value.t :=
    undefined.

  Definition n : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "m" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "m" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 0)
            |),
            "a"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 0)
            |),
            "b"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            "a"
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            "b"
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "n" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 0)
            |),
            "a"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "n" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 0)
            |),
            "b"
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "n" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            "a"
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "n" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            "b"
          |),
          Value.Integer 10
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
