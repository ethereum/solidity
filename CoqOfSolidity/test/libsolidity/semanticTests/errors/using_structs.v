(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)

(* Error E *)

(* Contract *)
Module C.
  Definition s : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        if M.get_name (| "c" |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "s" |),
                "a"
              |),
              Value.Integer 9
            |) in
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              Value.String "abc"
            |) in
          let _ :=
            M.revert (|
              M.call (|
                M.get_name (| "E" |),
                [
                  Value.Integer 2,
                  M.get_name (| "s" |),
                  Value.Integer 7
                ]
              |)
            |) in
          Value.Tuple []
        else
          let _ :=
            M.revert (|
              M.call (|
                M.get_name (| "E" |),
                [
                  Value.Integer 7,
                  Value.Integer 2,
                  M.call (|
                    M.get_name (| "S" |),
                    [
                      Value.String "abc",
                      Value.Integer 9
                    ]
                  |)
                ]
              |)
            |) in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
