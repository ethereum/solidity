(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)

(* Error E *)

(* Error E1 *)

(* Error E2 *)

(* Error E3 *)

(* Error E4 *)

(* Error E5 *)

(* Contract *)
Module C.
  Definition a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E" |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E1" |),
              [
                Value.Integer 1
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E2" |),
              [
                Value.String "string literal"
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition d (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E3" |),
              [
                M.call (|
                  M.get_name (| "S" |),
                  [
                    Value.Integer 1,
                    Value.Bool true,
                    Value.String "string literal"
                  ]
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition e (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E4" |),
              [
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "this" |)
                  ]
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false,
            M.call (|
              M.get_name (| "E5" |),
              [
                M.member_access (|
                  M.get_name (| "this" |),
                  "a"
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
