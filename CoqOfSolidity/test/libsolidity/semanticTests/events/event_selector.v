(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Event E *)
End L.


(* Library *)
Module S.
  (* Event E *)
End S.


(* Library *)
Module T.
  (* Event E *)
End T.


(* Interface *)
Module I.
  (* Event E *)
End I.


(* Contract *)
Module B.
  (* Event E *)
End B.


(* Contract *)
Module D.
  (* Event F *)
End D.


(* Contract *)
Module C.
  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "T" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "I" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "T" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "I" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "T" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "S" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "T" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "S" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "I" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "S" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "S" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.member_access (|
                M.get_name (| "L" |),
                "E"
              |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "S" |),
                "E"
              |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "I" |),
                "E"
              |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "B" |),
                "E"
              |),
              "selector"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s1 : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "L" |),
        "E"
      |),
      "selector"
    |).

  Definition s2 : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "S" |),
        "E"
      |),
      "selector"
    |).

  Definition s3 : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "T" |),
        "E"
      |),
      "selector"
    |).

  Definition s4 : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "I" |),
        "E"
      |),
      "selector"
    |).

  Definition s5 : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "B" |),
        "E"
      |),
      "selector"
    |).

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "s1" |),
            M.get_name (| "s2" |),
            M.get_name (| "s3" |),
            M.get_name (| "s4" |),
            M.get_name (| "s5" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "F" |),
              "selector"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
