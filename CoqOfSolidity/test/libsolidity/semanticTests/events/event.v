(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module ClientReceipt.
  (* Event Deposit *)

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_id, _manually] =>
      let _ :=
        if M.get_name (| "_manually" |) then
          let _ :=
            M.define (|
              [ "s" ],
              Value.Integer 0x19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f
            |) in
          let _ :=
            M.define (|
              [ "value" ],
              M.member_access (|
                M.get_name (| "msg" |),
                "value"
              |)
            |) in
          let _ :=
            M.define (|
              [ "sender" ],
              M.member_access (|
                M.get_name (| "msg" |),
                "sender"
              |)
            |) in
          let _ :=
            (* Beginning of a node! *)
id: 30
src: 374:103:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 459:3:0declaration: 10isSlot: isOffset: alueSize: src: 448:1:0declaration: 17isSlot: isOffset: alueSize: src: 451:6:0declaration: 26isSlot: isOffset: alueSize: src: 411:5:0declaration: 21isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          Value.Tuple []
        else
          let _ :=
            EmitStatement M.call (|
              M.get_name (| "Deposit" |),
              [
                M.member_access (|
                  M.get_name (| "msg" |),
                  "sender"
                |),
                M.get_name (| "_id" |),
                M.member_access (|
                  M.get_name (| "msg" |),
                  "value"
                |)
              ]
            |)
 in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ClientReceipt.
