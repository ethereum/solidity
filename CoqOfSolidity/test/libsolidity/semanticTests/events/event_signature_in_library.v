(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Library *)
Module L.
  (* Struct S *)

  (* Event E *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "s" ],
          Value.Default
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "E" |),
          [
            M.get_name (| "s" |),
            M.get_name (| "s" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "f"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
