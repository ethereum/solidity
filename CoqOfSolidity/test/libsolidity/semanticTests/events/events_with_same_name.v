(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module ClientReceipt.
  (* Event Deposit *)

  (* Event Deposit *)

  (* Event Deposit *)

  (* Event Deposit *)

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          []
        |)
 in
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_addr] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          [
            M.get_name (| "_addr" |)
          ]
        |)
 in
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_addr, _amount] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          [
            M.get_name (| "_addr" |),
            M.get_name (| "_amount" |)
          ]
        |)
 in
      let _ :=
        M.return_ (|
          Value.Integer 3
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_addr, _flag] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          [
            M.get_name (| "_addr" |),
            M.get_name (| "_flag" |)
          ]
        |)
 in
      let _ :=
        M.return_ (|
          Value.Integer 4
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ClientReceipt.
