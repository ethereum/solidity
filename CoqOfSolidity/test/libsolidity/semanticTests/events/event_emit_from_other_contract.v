(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  (* Event Deposit *)

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_id] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "_id" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "value"
            |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Contract *)
Module C.
  Definition d : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            NewExpression Ty.path "D"
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [_id] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "d" |),
            "deposit"
          |),
          [
            M.get_name (| "_id" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
