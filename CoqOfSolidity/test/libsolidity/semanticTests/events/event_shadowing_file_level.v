(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Event E *)

(* Library *)
Module L1.
  (* Event E *)
End L1.


(* Library *)
Module L2.
  (* Event E *)
End L2.


(* Library *)
Module K.
  Definition main (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.get_name (| "E" |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L1" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "E" |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L2" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "E" |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "L1" |),
                "E"
              |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "L2" |),
                "E"
              |),
              "selector"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End K.


(* Contract *)
Module C.
  (* Event E *)

  Definition main (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "E" |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L1" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.member_access (|
                M.get_name (| "E" |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L2" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "E" |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "L1" |),
                "E"
              |),
              "selector"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "L2" |),
                "E"
              |),
              "selector"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k_main (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "K" |),
              "main"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
