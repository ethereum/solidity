(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module ClientReceipt.
  Definition x : Value.t :=
    undefined.

  (* Event Deposit *)

  Definition deposit (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 31
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          Value.String "A"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          Value.String "B"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 2)
          |),
          Value.String "C"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 30)
          |),
          Value.String "Z"
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Deposit" |),
          [
            Value.Integer 10,
            M.get_name (| "x" |),
            Value.Integer 15
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ClientReceipt.
