(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint120") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 0)
            |),
            M.call (|
              Ty.path "uint120",
              [
                M.bin_op (|
                  "-",
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        Ty.path "uint"
                      ]
                    |),
                    "max"
                  |),
                  Value.Integer 1
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 1)
            |),
            M.call (|
              Ty.path "uint120",
              [
                M.bin_op (|
                  "-",
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        Ty.path "uint"
                      ]
                    |),
                    "max"
                  |),
                  Value.Integer 2
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 2)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 2)
            |),
            M.call (|
              Ty.path "uint120",
              [
                M.bin_op (|
                  "-",
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        Ty.path "uint"
                      ]
                    |),
                    "max"
                  |),
                  Value.Integer 3
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "hash1" |),
          M.call (|
            M.get_name (| "keccak256" |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodePacked"
                |),
                [
                  M.get_name (| "x" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "hash2" |),
          M.call (|
            M.get_name (| "keccak256" |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodePacked"
                |),
                [
                  M.get_name (| "y" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "hash3" |),
          M.call (|
            M.get_name (| "keccak256" |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodePacked"
                |),
                [
                  M.member_access (|
                    M.get_name (| "this" |),
                    "f"
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
