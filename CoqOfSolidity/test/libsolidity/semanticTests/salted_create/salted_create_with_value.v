(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module B.
  Definition x : Value.t :=
    undefined.

  Definition getBalance (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.bin_op (|
              "*",
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "this" |)
                  ]
                |),
                "balance"
              |),
              Value.Integer 1000
            |),
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "_x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.


(* Contract *)
Module A.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            FunctionCallOptions NewExpression Ty.path "B"
 [salt, value, ] Value.String "abc", Value.Integer 3
,
            [
              Value.Integer 7
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            FunctionCallOptions NewExpression Ty.path "B"
 [value, salt, ] Value.Integer 3, Value.String "abc"
,
            [
              Value.Integer 8
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            FunctionCallOptions NewExpression Ty.path "B"
 [salt, value, ] Value.String "abc", Value.Integer 3
,
            [
              Value.Integer 9
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "getBalance"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "y" |),
                "getBalance"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "z" |),
                "getBalance"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.
