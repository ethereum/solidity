(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.4.0<0.9.0 *)

(* Contract *)
Module InvalidTest.
  Definition storedFn : Value.t :=
    undefined.

  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "_y1" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y2" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y3" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y4" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y5" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y6" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y7" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y8" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y9" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y10" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y11" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y12" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y13" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "_y14" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "invalid" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "storedFn" |),
          M.get_name (| "invalid" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition run (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "storedFn" |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition z (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          false,
          "++",
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End InvalidTest.
