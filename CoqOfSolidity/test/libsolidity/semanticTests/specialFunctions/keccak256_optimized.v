(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition short (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.get_name (| "keccak256" |),
            [
              Value.String "abcdefghijklmn"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "s" ],
          Value.String "abcdefghijklmn"
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.get_name (| "a" |),
            M.call (|
              M.get_name (| "keccak256" |),
              [
                M.get_name (| "s" |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sc : Value.t :=
    M.call (|
      M.get_name (| "keccak256" |),
      [
        Value.String "abcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmn"
      ]
    |).

  Definition long (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.get_name (| "keccak256" |),
            [
              Value.String "abcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmn"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "s" ],
          Value.String "abcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmn"
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "==",
              M.get_name (| "a" |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.get_name (| "s" |)
                ]
              |)
            |),
            M.bin_op (|
              "==",
              M.get_name (| "sc" |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.get_name (| "s" |)
                ]
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
