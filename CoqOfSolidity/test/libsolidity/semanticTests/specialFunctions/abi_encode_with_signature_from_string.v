(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "my_signature"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r1" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "my_signature",
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r2" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "x" |),
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "r1" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "r2" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "r1" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "r1" |),
                  Some (M.get_name (| "i" |))
                |),
                M.index_access (|
                  M.get_name (| "r2" |),
                  Some (M.get_name (| "i" |))
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
