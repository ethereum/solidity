(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition eq (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 12
src: 83:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 94:1:0declaration: 10isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "==",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition neq (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 31
src: 201:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 212:1:0declaration: 29isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition geq (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 50
src: 319:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 330:1:0declaration: 48isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              ">=",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition leq (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 2
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 69
src: 437:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 448:1:0declaration: 67isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "<=",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition gt (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 2
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 88
src: 554:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 565:1:0declaration: 86isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              ">",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition lt (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 107
src: 670:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 681:1:0declaration: 105isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "<",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
