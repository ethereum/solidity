(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition add (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 0
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 14
src: 92:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 103:1:0declaration: 8isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "+",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |),
            M.bin_op (|
              "+",
              M.get_name (| "y" |),
              M.get_name (| "x" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sub (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 1
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 38
src: 224:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 235:1:0declaration: 32isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "-",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |),
            M.bin_op (|
              "-",
              M.get_name (| "y" |),
              M.get_name (| "x" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 1
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 62
src: 356:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 367:1:0declaration: 56isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "*",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |),
            M.bin_op (|
              "*",
              M.get_name (| "y" |),
              M.get_name (| "x" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition div (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 1
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 86
src: 488:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 499:1:0declaration: 80isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "/",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |),
            M.bin_op (|
              "/",
              M.get_name (| "y" |),
              M.get_name (| "x" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mod (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 2
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 110
src: 620:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 631:1:0declaration: 104isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "%",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |),
            M.bin_op (|
              "%",
              M.get_name (| "y" |),
              M.get_name (| "x" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc_pre (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 128
src: 736:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 747:1:0declaration: 126isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "++",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc_post (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 141
src: 842:24:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 853:1:0declaration: 139isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.un_op (|
            false,
            "++",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition dec_pre (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 154
src: 947:27:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 958:1:0declaration: 152isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "--",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition dec_post (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 167
src: 1056:27:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1067:1:0declaration: 165isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.un_op (|
            false,
            "--",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition neg (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 180
src: 1158:22:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1169:1:0declaration: 178isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "-",
            M.get_name (| "x" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
