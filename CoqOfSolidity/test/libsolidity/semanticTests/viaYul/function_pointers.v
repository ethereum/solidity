(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "_f" ],
          Value.Default
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_f" |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "_g" ],
          Value.Default
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_g" |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.call (|
            M.get_name (| "h1" |),
            []
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.call (|
            M.get_name (| "k1" |),
            []
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
