(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [condition] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 23
        |) in
      let _ :=
        if M.get_name (| "condition" |) then
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 42
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [condition] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 0
        |) in
      let _ :=
        if M.get_name (| "condition" |) then
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 42
          |)
        else
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 23
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [condition] =>
      let _ :=
        if M.get_name (| "condition" |) then
          M.return_ (|
            Value.Integer 42
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 23
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [condition] =>
      let _ :=
        if M.get_name (| "condition" |) then
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 10
          |)
        else
          M.return_ (|
            Value.Integer 23
          |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 42
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.bin_op (|
            "+",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |),
          Value.Integer 10
        |) then
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "a" |)
          |)
        else
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "b" |)
          |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          Value.Integer 100
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 42
        |) in
      let _ :=
        M.while (|
          WhileKind.DoWhile,
          Value.Bool false,
          let _ :=
            if M.bin_op (|
              "<",
              M.bin_op (|
                "+",
                M.get_name (| "a" |),
                M.get_name (| "b" |)
              |),
              Value.Integer 10
            |) then
              let _ :=
                if M.bin_op (|
                  "==",
                  M.get_name (| "a" |),
                  M.get_name (| "b" |)
                |) then
                  let _ :=
                    M.assign (|
                      "=",
                      M.get_name (| "x" |),
                      Value.Integer 99
                    |) in
                  let _ :=
                    M.assign (|
                      "=",
                      M.get_name (| "y" |),
                      Value.Integer 99
                    |) in
                  let _ :=
                    M.break (||) in
                  Value.Tuple []
                else
                  let _ :=
                    M.assign (|
                      "=",
                      M.get_name (| "x" |),
                      M.get_name (| "a" |)
                    |) in
                  Value.Tuple [] in
              Value.Tuple []
            else
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "x" |),
                  M.get_name (| "b" |)
                |) in
              let _ :=
                if M.bin_op (|
                  "!=",
                  M.get_name (| "a" |),
                  M.get_name (| "b" |)
                |) then
                  M.assign (|
                    "=",
                    M.get_name (| "y" |),
                    Value.Integer 17
                  |)
                else
                  M.assign (|
                    "=",
                    M.get_name (| "y" |),
                    Value.Integer 13
                  |) in
              let _ :=
                M.break (||) in
              Value.Tuple [] in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "y" |),
              Value.Integer 100
            |) in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
