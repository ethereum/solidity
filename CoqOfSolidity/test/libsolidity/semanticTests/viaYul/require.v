(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.define (|
          [ "b" ],
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "b" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fail (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Bool true
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool false
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition succeed (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Bool true
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool true
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.define (|
          [ "message" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "message" |),
          Value.String "fancy message!"
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "a" |),
            M.get_name (| "message" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "a" |),
            Value.String "msg"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.define (|
          [ "message" ],
          Value.Default
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "a" |),
            M.get_name (| "message" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
