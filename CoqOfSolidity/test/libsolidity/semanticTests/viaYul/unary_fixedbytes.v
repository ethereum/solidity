(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition conv (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes32",
              [
                M.call (|
                  Ty.path "bytes16",
                  [
                    M.un_op (|
                      true,
                      "~",
                      M.get_name (| "a" |)
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition upcast (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition downcast (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "bytes12",
            [
              M.un_op (|
                true,
                "~",
                M.get_name (| "a" |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b32 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes32",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b25 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes25",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b16 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes16",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes8",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes4",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r_b1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes1",
              [
                hexString
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b32 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes32",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b25 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes25",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b16 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes16",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes8",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes4",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a_b1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "r" ],
          M.un_op (|
            true,
            "~",
            M.call (|
              Ty.path "bytes1",
              [
                hexString
              ]
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
