(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    Value.Integer 17.

  Definition f (α : list Value.t) : M :=
    match α with
    | [a1, a2] =>
      let _ :=
        M.define (|
          [ "b1"; "b2" ],
          Value.Tuple [
            M.get_name (| "a1" |),
            M.get_name (| "a2" |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "r1" |),
            M.get_name (| "x" |),
            M.get_name (| "r2" |)
          ],
          Value.Tuple [
            M.get_name (| "b1" |),
            M.get_name (| "b2" |),
            M.get_name (| "b2" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |)
          ],
          Value.Tuple [
            Value.Integer 1,
            M.get_name (| "x" |),
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |)
          ],
          Value.Tuple [
            Value.Integer 1,
            M.get_name (| "x" |),
            Value.Integer 3,
            Value.Integer 4,
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "a" |)
          ],
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                Value.Tuple [
                  Value.Tuple [
                    M.get_name (| "b" |)
                  ]
                ]
              ]
            ]
          ],
          Value.Integer 23
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                Value.Integer 17
              ]
            ]
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                M.get_name (| "d" |)
              ]
            ]
          ],
          Value.Tuple [
            Value.Integer 13
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
