(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition s : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "b"
            |),
            "push"
          |),
          [
            Value.Integer 1
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "b"
            |),
            "push"
          |),
          [
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "b"
            |),
            "push"
          |),
          [
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "c"
          |),
          Value.Integer 21
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [m] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "m" |),
              "a"
            |),
            M.member_access (|
              M.get_name (| "m" |),
              "b"
            |),
            M.member_access (|
              M.get_name (| "m" |),
              "c"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "c" |),
              "a"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "c" |),
                "b"
              |),
              "length"
            |),
            M.member_access (|
              M.get_name (| "c" |),
              "c"
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "c" |),
                "b"
              |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "c" |),
                "b"
              |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "c" |),
                "b"
              |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g2 (α : list Value.t) : M :=
    match α with
    | [c1, c2] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "c1" |),
              "a"
            |),
            M.member_access (|
              M.get_name (| "c1" |),
              "c"
            |),
            M.member_access (|
              M.get_name (| "c2" |),
              "a"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "c2" |),
                "b"
              |),
              "length"
            |),
            M.member_access (|
              M.get_name (| "c2" |),
              "c"
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "c2" |),
                "b"
              |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "s" |),
              "a"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              "length"
            |),
            M.member_access (|
              M.get_name (| "s" |),
              "c"
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
