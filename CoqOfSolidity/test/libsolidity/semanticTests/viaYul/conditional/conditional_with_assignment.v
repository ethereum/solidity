(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "y1" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "y2" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          Conditional M.bin_op (|
            "<",
            Value.Integer 3,
            Value.Integer 0
          |) M.assign (|
            "=",
            M.get_name (| "y1" |),
            Value.Integer 3
          |) Value.Integer 6

        |) in
      let _ :=
        M.define (|
          [ "z" ],
          Conditional M.bin_op (|
            "<",
            Value.Integer 3,
            Value.Integer 10
          |) M.assign (|
            "=",
            M.get_name (| "y2" |),
            Value.Integer 5
          |) Value.Integer 6

        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "x" |),
            M.get_name (| "y1" |),
            M.get_name (| "y2" |),
            M.get_name (| "z" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.
