(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition preincr_u8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              true,
              "++",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postincr_u8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              false,
              "++",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition predecr_u8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              true,
              "--",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postdecr_u8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              false,
              "--",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition preincr_s8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret1" |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret2" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postincr_s8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret1" |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret2" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition predecr_s8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret1" |),
          M.un_op (|
            true,
            "--",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret2" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postdecr_s8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret1" |),
          M.un_op (|
            false,
            "--",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret2" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition preincr (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              true,
              "++",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postincr (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              false,
              "++",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition predecr (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              true,
              "--",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition postdecr (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.un_op (|
              false,
              "--",
              M.get_name (| "a" |)
            |),
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition not (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "!",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition bitnot (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "~",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition bitnot_u8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.un_op (|
            true,
            "~",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 214
src: 1280:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1353:1:0declaration: 204isSlot: isOffset: alueSize: src: 1346:3:0declaration: 207isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition bitnot_s8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 224
src: 1432:27:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1446:1:0declaration: 222isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.un_op (|
            true,
            "~",
            M.get_name (| "a" |)
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 230
src: 1474:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1547:1:0declaration: 222isSlot: isOffset: alueSize: src: 1540:3:0declaration: 219isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition negate (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "-",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition negate_s8 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "-",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition negate_s16 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.un_op (|
            true,
            "-",
            M.get_name (| "a" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
