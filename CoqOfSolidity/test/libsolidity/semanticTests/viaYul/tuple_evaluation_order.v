(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [v] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "v" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "v" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "y" |),
            M.get_name (| "y" |),
            M.get_name (| "y" |)
          ],
          Value.Tuple [
            M.call (|
              M.get_name (| "set" |),
              [
                Value.Integer 1
              ]
            |),
            M.call (|
              M.get_name (| "set" |),
              [
                Value.Integer 2
              ]
            |),
            M.call (|
              M.get_name (| "set" |),
              [
                Value.Integer 3
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.get_name (| "y" |),
                Value.Integer 1
              |),
              M.bin_op (|
                "==",
                M.get_name (| "x" |),
                Value.Integer 3
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
