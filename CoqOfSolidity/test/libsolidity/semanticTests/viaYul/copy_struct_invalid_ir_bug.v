(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct Struct *)

  Definition array : Value.t :=
    undefined.

  Definition externalCalled : Value.t :=
    Value.Integer 0.

  Definition ext (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          false,
          "++",
          M.get_name (| "externalCalled" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "array" |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "Struct" |),
              [
                M.member_access (|
                  M.get_name (| "this" |),
                  "ext"
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "array" |),
            "push"
          |),
          [
            M.index_access (|
              M.get_name (| "array" |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "array" |),
              Some (Value.Integer 0)
            |),
            "el"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "array" |),
              Some (Value.Integer 1)
            |),
            "el"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "externalCalled" |),
              Value.Integer 2
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
