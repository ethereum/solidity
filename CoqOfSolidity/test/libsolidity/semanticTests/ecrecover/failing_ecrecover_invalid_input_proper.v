(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "recover" |),
            [
              Value.Integer 0x77e5189111eb6557e8a637b27ef8fbb15bc61d61c2f00cc48878f3a296e5e0ca,
              Value.Integer 0,
              Value.Integer 0x6944c77849b18048f6abe0db8084b0d0d0689cdddb53d2671c36967b58691ad4,
              Value.Integer 0xef4f06ba4f78319baafd0424365777241af4dfd3da840471b4b4b087b7750d0d,
              Value.Integer 0x000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c,
              Value.Integer 0x000000000000000000000000ca35b7d915458ef540ade6068dfe2f44e8fa733c
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition recover (α : list Value.t) : M :=
    match α with
    | [hash, v, r, s, blockExpired, salt] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "hash" |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "abi" |),
                      "encodePacked"
                    |),
                    [
                      M.get_name (| "blockExpired" |),
                      M.get_name (| "salt" |)
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "ecrecover" |),
            [
              M.get_name (| "hash" |),
              M.get_name (| "v" |),
              M.get_name (| "r" |),
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
