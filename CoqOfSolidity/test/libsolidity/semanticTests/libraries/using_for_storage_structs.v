(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Struct Struct *)

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "_x" |),
            "x"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "Struct"),
      UsingKind.Local,
      "L"
    |).

  Definition s : Value.t :=
    undefined.

  Definition h (α : list Value.t) : M :=
    match α with
    | [_s] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "_s" |),
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "x"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "s" |),
                "f"
              |),
              []
            |),
            M.call (|
              M.get_name (| "h" |),
              [
                M.get_name (| "s" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
