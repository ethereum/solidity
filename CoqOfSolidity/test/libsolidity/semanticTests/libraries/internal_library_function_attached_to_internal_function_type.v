(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition double (α : list Value.t) : M :=
    match α with
    | [f, x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "*",
            M.call (|
              M.get_name (| "f" |),
              [
                M.get_name (| "x" |)
              ]
            |),
            Value.Integer 2
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.function
      (ParameterList.make [
        Definition  : Value.t :=
          undefined.
      ])
      (ParameterList.make [
        Definition  : Value.t :=
          undefined.
      ])),
      UsingKind.Local,
      "L"
    |).

  Definition identity (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "identity" |),
              "double"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
