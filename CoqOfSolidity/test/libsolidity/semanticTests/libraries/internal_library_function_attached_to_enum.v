(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Enum E *)

  Definition equals (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "L.E"),
      UsingKind.Local,
      "L"
    |).

  Definition equalsA (α : list Value.t) : M :=
    match α with
    | [choice] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.member_access (|
            M.member_access (|
              M.get_name (| "L" |),
              "E"
            |),
            "A"
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "x" |),
              "equals"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "E"
                |),
                [
                  M.get_name (| "choice" |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
