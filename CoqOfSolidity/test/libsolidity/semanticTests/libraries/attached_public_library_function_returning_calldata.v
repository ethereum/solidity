(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module D.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "_x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "_x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "bytes"),
      UsingKind.Local,
      "D"
    |).

  Definition f (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "_x" |),
                  "f"
                |),
                []
              |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "_x" |),
                  "g"
                |),
                []
              |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
