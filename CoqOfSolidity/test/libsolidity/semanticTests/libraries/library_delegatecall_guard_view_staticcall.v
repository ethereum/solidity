(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [d] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "d" |),
              "x"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition d : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            NewExpression Ty.path "D"
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "L" |),
              "f"
            |),
            [
              M.get_name (| "d" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "delegatecall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.get_name (| "d" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "success" |),
            Conditional M.get_name (| "success" |) M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |) Value.Integer 0

          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "call"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.get_name (| "d" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "success" |),
            Conditional M.get_name (| "success" |) M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |) Value.Integer 0

          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
