(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Library *)
Module L.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [m] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "m" |),
            "a"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition s : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "s_ptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 54
src: 341:28:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 361:6:0declaration: 32sSlot: isOffset: suffix: slotalueSize: src: 352:5:0declaration: 52isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "delegatecall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.get_name (| "s_ptr" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "f"
                |),
                "selector"
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.call (|
                    M.get_name (| "keccak256" |),
                    [
                      Value.String "f(L.S storage)"
                    ]
                  |)
                ]
              |)
            |),
            M.get_name (| "success" |),
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "delegatecall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "g"
                    |),
                    "selector"
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "S"
                    |),
                    [
                      Value.Integer 23
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "g"
                |),
                "selector"
              |),
              M.call (|
                Ty.path "bytes4",
                [
                  M.call (|
                    M.get_name (| "keccak256" |),
                    [
                      Value.String "g(L.S)"
                    ]
                  |)
                ]
              |)
            |),
            M.get_name (| "success" |),
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
