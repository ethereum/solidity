(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Lib.
  (* Struct Data *)

  Definition set (α : list Value.t) : M :=
    match α with
    | [_s] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "_s" |),
            "a"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.member_access (|
                M.get_name (| "_s" |),
                "b"
              |),
              "length"
            |),
            Value.Integer 20
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "_s" |),
                "b"
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "_s" |),
              "b"
            |),
            Some (Value.Integer 19)
          |),
          Value.Integer 8
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Lib.


(* Contract *)
Module Test.
  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Lib" |),
            "set"
          |),
          [
            M.index_access (|
              M.get_name (| "data" |),
              Some (Value.String "abc")
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (Value.String "abc")
            |),
            "a"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.String "abc")
              |),
              "b"
            |),
            Some (Value.Integer 19)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
