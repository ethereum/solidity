(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Lib.
  Definition find (α : list Value.t) : M :=
    match α with
    | [_haystack, _needle] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "_haystack" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          if M.bin_op (|
            "==",
            M.index_access (|
              M.get_name (| "_haystack" |),
              Some (M.get_name (| "i" |))
            |),
            M.get_name (| "_needle" |)
          |) then
            M.return_ (|
              M.get_name (| "i" |)
            |)
          else
            Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Lib.


(* Contract *)
Module Test.
  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.String "abc")
              |),
              "length"
            |),
            Value.Integer 20
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.String "abc")
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (Value.String "abc")
            |),
            Some (Value.Integer 4)
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (Value.String "abc")
            |),
            Some (Value.Integer 17)
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.call (|
            M.member_access (|
              M.get_name (| "Lib" |),
              "find"
            |),
            [
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.String "abc")
              |),
              Value.Integer 9
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.call (|
            M.member_access (|
              M.get_name (| "Lib" |),
              "find"
            |),
            [
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.String "abc")
              |),
              Value.Integer 3
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
