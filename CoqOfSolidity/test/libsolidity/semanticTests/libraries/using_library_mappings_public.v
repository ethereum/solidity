(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Lib.
  Definition set (α : list Value.t) : M :=
    match α with
    | [m, key, value] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (M.get_name (| "key" |))
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Lib.


(* Contract *)
Module Test.
  Definition m1 : Value.t :=
    undefined.

  Definition m2 : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Lib" |),
            "set"
          |),
          [
            M.get_name (| "m1" |),
            Value.Integer 0,
            Value.Integer 1
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Lib" |),
            "set"
          |),
          [
            M.get_name (| "m1" |),
            Value.Integer 2,
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Lib" |),
            "set"
          |),
          [
            M.get_name (| "m2" |),
            Value.Integer 0,
            Value.Integer 23
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "Lib" |),
            "set"
          |),
          [
            M.get_name (| "m2" |),
            Value.Integer 2,
            Value.Integer 99
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
