(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition transfer (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition send (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "address"),
      UsingKind.Local,
      "L"
    |).

  Definition useTransfer (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "transfer"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition useSend (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "send"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
