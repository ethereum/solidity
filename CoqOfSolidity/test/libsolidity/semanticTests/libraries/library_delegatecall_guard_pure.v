(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          Value.Integer 23
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition y : Value.t :=
    undefined.

  Definition x : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "y" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "L" |),
              "f"
            |),
            [
              M.get_name (| "y" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "ys" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 48
src: 341:25:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 358:6:0declaration: 15sSlot: isOffset: suffix: slotalueSize: src: 352:2:0declaration: 46isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "delegatecall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.get_name (| "ys" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "success" |),
            Conditional M.get_name (| "success" |) M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |) Value.Integer 0

          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "ys" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 91
src: 630:25:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 647:6:0declaration: 15sSlot: isOffset: suffix: slotalueSize: src: 641:2:0declaration: 89isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.define (|
          [ "success"; "data" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "L" |)
                ]
              |),
              "call"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "L" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.get_name (| "ys" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "success" |),
            Conditional M.get_name (| "success" |) M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "decode"
              |),
              [
                M.get_name (| "data" |),
                Value.Tuple [
                  Ty.path "uint256"
                ]
              ]
            |) Value.Integer 0

          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
