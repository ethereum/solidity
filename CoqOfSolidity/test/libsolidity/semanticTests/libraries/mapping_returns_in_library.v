(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Lib.
  Definition choose_mapping (α : list Value.t) : M :=
    match α with
    | [a, b, c] =>
      let _ :=
        M.return_ (|
          Conditional M.get_name (| "c" |) M.get_name (| "a" |) M.get_name (| "b" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Lib.


(* Contract *)
Module Test.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [choice, key, value] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Lib" |),
              "choose_mapping"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "b" |),
              M.get_name (| "choice" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "oldValue" ],
          M.index_access (|
            M.get_name (| "m" |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (M.get_name (| "key" |))
          |),
          M.get_name (| "value" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "oldValue" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get (α : list Value.t) : M :=
    match α with
    | [choice, key] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.call (|
              M.member_access (|
                M.get_name (| "Lib" |),
                "choose_mapping"
              |),
              [
                M.get_name (| "a" |),
                M.get_name (| "b" |),
                M.get_name (| "choice" |)
              ]
            |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get_a (α : list Value.t) : M :=
    match α with
    | [key] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a" |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get_b (α : list Value.t) : M :=
    match α with
    | [key] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "b" |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
