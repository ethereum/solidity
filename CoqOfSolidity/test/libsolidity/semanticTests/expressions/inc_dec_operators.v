(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition x : Value.t :=
    undefined.

  Definition v : Value.t :=
    undefined.

  Definition f (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Integer 6
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.bin_op (|
            "*",
            Value.Tuple [
              M.un_op (|
                false,
                "++",
                M.get_name (| "a" |)
              |)
            ],
            Value.Integer 0x10
          |)
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.bin_op (|
            "*",
            Value.Tuple [
              M.un_op (|
                true,
                "++",
                M.get_name (| "a" |)
              |)
            ],
            Value.Integer 0x100
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "v" |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.bin_op (|
            "*",
            Value.Tuple [
              M.un_op (|
                false,
                "++",
                M.get_name (| "v" |)
              |)
            ],
            Value.Integer 0x1000
          |)
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.bin_op (|
            "*",
            Value.Tuple [
              M.un_op (|
                true,
                "++",
                M.get_name (| "v" |)
              |)
            ],
            Value.Integer 0x10000
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
