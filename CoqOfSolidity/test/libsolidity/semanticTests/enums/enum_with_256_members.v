(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Enum E *)

(* Contract *)
Module C.
  Definition getMinMax (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "E" |),
              "E000"
            |),
            M.member_access (|
              M.get_name (| "E" |),
              "E255"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intToEnum (α : list Value.t) : M :=
    match α with
    | [_i] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "E" |),
            [
              M.get_name (| "_i" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition enumToInt (α : list Value.t) : M :=
    match α with
    | [_e] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint8",
            [
              M.get_name (| "_e" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition decodeEnum (α : list Value.t) : M :=
    match α with
    | [data] =>
      let _ :=
        M.define (|
          [ "e" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "data" |),
              Value.Tuple [
                M.get_name (| "E" |)
              ]
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "e" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
