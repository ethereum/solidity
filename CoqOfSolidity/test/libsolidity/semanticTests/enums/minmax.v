(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  (* Enum MinMax *)

  Definition min (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint",
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "MinMax" |)
                  ]
                |),
                "min"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition max (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint",
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "MinMax" |)
                  ]
                |),
                "max"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
