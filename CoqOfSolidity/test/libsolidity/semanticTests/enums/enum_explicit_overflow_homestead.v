(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  (* Enum ActionChoices *)

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getChoiceExp (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "choice" |),
          M.call (|
            M.get_name (| "ActionChoices" |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            Ty.path "uint256",
            [
              M.get_name (| "choice" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getChoiceFromSigned (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "choice" |),
          M.call (|
            M.get_name (| "ActionChoices" |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            Ty.path "uint256",
            [
              M.get_name (| "choice" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getChoiceFromMax (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "choice" |),
          M.call (|
            M.get_name (| "ActionChoices" |),
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    Ty.path "uint256"
                  ]
                |),
                "max"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            Ty.path "uint256",
            [
              M.get_name (| "choice" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition choice : Value.t :=
    undefined.
End test.
