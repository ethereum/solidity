(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

Axiom user_type_MyInt : Ty.path "MyInt" = Ty.path "int".

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition setX (α : list Value.t) : M :=
    match α with
    | [_x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "unwrap"
            |),
            [
              M.get_name (| "_x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getX (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition add (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "+",
                M.call (|
                  M.member_access (|
                    M.get_name (| "MyInt" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "a" |)
                  ]
                |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "MyInt" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "b" |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
