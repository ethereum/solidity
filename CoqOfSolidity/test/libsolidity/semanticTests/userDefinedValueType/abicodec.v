(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Axiom user_type_MyInt : Ty.path "MyInt" = Ty.path "int".

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success1"; "ret1" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "call"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "MyInt" |),
                      "wrap"
                    |),
                    [
                      Value.Integer 5
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.get_name (| "success1" |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "a1"; "b1"; "c1"; "d1" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "ret1" |),
              Value.Tuple [
                M.get_name (| "MyInt" |),
                M.get_name (| "MyInt" |),
                M.get_name (| "MyInt" |),
                M.get_name (| "MyInt" |)
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "MyInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "a1" |)
                ]
              |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "MyInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "b1" |)
                ]
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "MyInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "c1" |)
                ]
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.get_name (| "MyInt" |),
                  "unwrap"
                |),
                [
                  M.get_name (| "d1" |)
                ]
              |),
              Value.Integer 5
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "success2"; "ret2" ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "call"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeWithSelector"
                |),
                [
                  M.member_access (|
                    M.member_access (|
                      M.get_name (| "this" |),
                      "f"
                    |),
                    "selector"
                  |),
                  M.call (|
                    Ty.path "int",
                    [
                      M.un_op (|
                        true,
                        "-",
                        Value.Integer 5
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.get_name (| "success2" |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "a2"; "b2"; "c2"; "d2" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "ret2" |),
              Value.Tuple [
                Ty.path "int",
                Ty.path "int",
                Ty.path "int",
                Ty.path "int"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "a2" |),
              M.un_op (|
                true,
                "-",
                Value.Integer 1
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "b2" |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "c2" |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "d2" |),
              M.un_op (|
                true,
                "-",
                Value.Integer 5
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
