(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_MyInt64 : Ty.path "MyInt64" = Ty.path "int64".

(* Struct HalfSlot *)

(* Struct RegularHalfSlot *)

Axiom user_type_MyAddress : Ty.path "MyAddress" = Ty.path "address".

Axiom user_type_MyInt96 : Ty.path "MyInt96" = Ty.path "int96".

(* Struct FullSlot *)

(* Struct RegularFullSlot *)

(* Contract *)
Module C.
  Definition a : Value.t :=
    undefined.

  Definition ra : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition rb : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition rc : Value.t :=
    undefined.

  Definition d : Value.t :=
    undefined.

  Definition rd : Value.t :=
    undefined.

  Definition storage_a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 61
src: 600:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 660:8:0declaration: 33isSlot: sOffset: suffix: offsetalueSize: src: 631:6:0declaration: 33sSlot: isOffset: suffix: slotalueSize: src: 650:6:0declaration: 59isSlot: isOffset: alueSize: src: 623:4:0declaration: 57isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_ra (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 70
src: 768:80:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 819:6:0declaration: 68isSlot: isOffset: alueSize: src: 829:9:0declaration: 36isSlot: sOffset: suffix: offsetalueSize: src: 799:7:0declaration: 36sSlot: isOffset: suffix: slotalueSize: src: 791:4:0declaration: 66isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 79
src: 937:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 997:8:0declaration: 39isSlot: sOffset: suffix: offsetalueSize: src: 968:6:0declaration: 39sSlot: isOffset: suffix: slotalueSize: src: 987:6:0declaration: 77isSlot: isOffset: alueSize: src: 960:4:0declaration: 75isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_rb (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 88
src: 1105:80:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1156:6:0declaration: 86isSlot: isOffset: alueSize: src: 1166:9:0declaration: 42isSlot: sOffset: suffix: offsetalueSize: src: 1136:7:0declaration: 42sSlot: isOffset: suffix: slotalueSize: src: 1128:4:0declaration: 84isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 97
src: 1273:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1333:8:0declaration: 45isSlot: sOffset: suffix: offsetalueSize: src: 1304:6:0declaration: 45sSlot: isOffset: suffix: slotalueSize: src: 1323:6:0declaration: 95isSlot: isOffset: alueSize: src: 1296:4:0declaration: 93isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_rc (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 106
src: 1440:80:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1491:6:0declaration: 104isSlot: isOffset: alueSize: src: 1501:9:0declaration: 48isSlot: sOffset: suffix: offsetalueSize: src: 1471:7:0declaration: 48sSlot: isOffset: suffix: slotalueSize: src: 1463:4:0declaration: 102isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_d (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 115
src: 1608:78:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1668:8:0declaration: 51isSlot: sOffset: suffix: offsetalueSize: src: 1639:6:0declaration: 51sSlot: isOffset: suffix: slotalueSize: src: 1658:6:0declaration: 113isSlot: isOffset: alueSize: src: 1631:4:0declaration: 111isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storage_rd (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 124
src: 1775:80:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1826:6:0declaration: 122isSlot: isOffset: alueSize: src: 1836:9:0declaration: 54isSlot: sOffset: suffix: offsetalueSize: src: 1806:7:0declaration: 54sSlot: isOffset: suffix: slotalueSize: src: 1798:4:0declaration: 120isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_a (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "a" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "a" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_ra (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "ra" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "ra" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_b (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "b" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "b" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_rb (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rb" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rb" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_c (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "c" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "c" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_rc (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rc" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rc" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_d (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "d" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "d" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set_rd (α : list Value.t) : M :=
    match α with
    | [_a, _b] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rd" |),
            "a"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rd" |),
            "b"
          |),
          M.get_name (| "_b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition read_slot (α : list Value.t) : M :=
    match α with
    | [slot] =>
      let _ :=
        (* Beginning of a node! *)
id: 301
src: 2685:51:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 2722:4:0declaration: 296isSlot: isOffset: alueSize: src: 2707:5:0declaration: 299isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition read_contents_asm (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "b" |),
            "a"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt64" |),
              "wrap"
            |),
            [
              M.un_op (|
                true,
                "-",
                Value.Integer 2
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "b" |),
            "b"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt64" |),
              "wrap"
            |),
            [
              M.un_op (|
                true,
                "-",
                Value.Integer 3
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.member_access (|
            M.get_name (| "b" |),
            "a"
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.member_access (|
            M.get_name (| "b" |),
            "b"
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 351
src: 2994:124:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 3016:3:0declaration: 306isSlot: isOffset: alueSize: src: 3063:3:0declaration: 310isSlot: isOffset: alueSize: src: 3043:3:0declaration: 308isSlot: isOffset: alueSize: src: 3101:3:0declaration: 312isSlot: isOffset: alueSize: src: 3029:1:0declaration: 336isSlot: isOffset: alueSize: src: 3080:1:0declaration: 336isSlot: isOffset: alueSize: src: 3050:1:0declaration: 341isSlot: isOffset: alueSize: src: 3108:1:0declaration: 347isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
