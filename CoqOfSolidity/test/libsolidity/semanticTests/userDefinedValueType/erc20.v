(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

Axiom user_type_UFixed18 : Ty.path "UFixed18" = Ty.path "uint256".

(* Library *)
Module FixedMath.
  Definition add (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "UFixed18" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "+",
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "a" |)
                  ]
                |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "b" |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sub (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "UFixed18" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "-",
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "a" |)
                  ]
                |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "b" |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End FixedMath.


(* Contract *)
Module ERC20.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "UFixed18"),
      UsingKind.Local,
      "FixedMath"
    |).

  (* Event Transfer *)

  (* Event Approval *)

  Definition _balances : Value.t :=
    undefined.

  Definition _allowances : Value.t :=
    undefined.

  Definition _totalSupply : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "_mint" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "UFixed18" |),
                "wrap"
              |),
              [
                Value.Integer 20
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition totalSupply (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "_totalSupply" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition balanceOf (α : list Value.t) : M :=
    match α with
    | [owner] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "owner" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition allowance (α : list Value.t) : M :=
    match α with
    | [owner, spender] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "_allowances" |),
              Some (M.get_name (| "owner" |))
            |),
            Some (M.get_name (| "spender" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transfer (α : list Value.t) : M :=
    match α with
    | [to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_transfer" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition approve (α : list Value.t) : M :=
    match α with
    | [spender, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transferFrom (α : list Value.t) : M :=
    match α with
    | [from, to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_transfer" |),
          [
            M.get_name (| "from" |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.get_name (| "from" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "_allowances" |),
                    Some (M.get_name (| "from" |))
                  |),
                  Some (M.member_access (|
                    M.get_name (| "msg" |),
                    "sender"
                  |))
                |),
                "sub"
              |),
              [
                M.get_name (| "value" |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition increaseAllowance (α : list Value.t) : M :=
    match α with
    | [spender, addedValue] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "_allowances" |),
                    Some (M.member_access (|
                      M.get_name (| "msg" |),
                      "sender"
                    |))
                  |),
                  Some (M.get_name (| "spender" |))
                |),
                "add"
              |),
              [
                M.get_name (| "addedValue" |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition decreaseAllowance (α : list Value.t) : M :=
    match α with
    | [spender, subtractedValue] =>
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.get_name (| "spender" |),
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "_allowances" |),
                    Some (M.member_access (|
                      M.get_name (| "msg" |),
                      "sender"
                    |))
                  |),
                  Some (M.get_name (| "spender" |))
                |),
                "sub"
              |),
              [
                M.get_name (| "subtractedValue" |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _transfer (α : list Value.t) : M :=
    match α with
    | [from, to, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "to" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: transfer to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "from" |))
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "_balances" |),
                Some (M.get_name (| "from" |))
              |),
              "sub"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "to" |))
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "_balances" |),
                Some (M.get_name (| "to" |))
              |),
              "add"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.get_name (| "from" |),
            M.get_name (| "to" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _mint (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "account" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: mint to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_totalSupply" |),
          M.call (|
            M.member_access (|
              M.get_name (| "_totalSupply" |),
              "add"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "account" |))
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "_balances" |),
                Some (M.get_name (| "account" |))
              |),
              "add"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.call (|
              Ty.path "address",
              [
                Value.Integer 0
              ]
            |),
            M.get_name (| "account" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _burn (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "account" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: burn from the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_totalSupply" |),
          M.call (|
            M.member_access (|
              M.get_name (| "_totalSupply" |),
              "sub"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_balances" |),
            Some (M.get_name (| "account" |))
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "_balances" |),
                Some (M.get_name (| "account" |))
              |),
              "sub"
            |),
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Transfer" |),
          [
            M.get_name (| "account" |),
            M.call (|
              Ty.path "address",
              [
                Value.Integer 0
              ]
            |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _approve (α : list Value.t) : M :=
    match α with
    | [owner, spender, value] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "owner" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: approve from the zero address"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "!=",
              M.get_name (| "spender" |),
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            |),
            Value.String "ERC20: approve to the zero address"
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "_allowances" |),
              Some (M.get_name (| "owner" |))
            |),
            Some (M.get_name (| "spender" |))
          |),
          M.get_name (| "value" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Approval" |),
          [
            M.get_name (| "owner" |),
            M.get_name (| "spender" |),
            M.get_name (| "value" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition _burnFrom (α : list Value.t) : M :=
    match α with
    | [account, value] =>
      let _ :=
        M.call (|
          M.get_name (| "_burn" |),
          [
            M.get_name (| "account" |),
            M.get_name (| "value" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "_approve" |),
          [
            M.get_name (| "account" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |),
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "_allowances" |),
                    Some (M.get_name (| "account" |))
                  |),
                  Some (M.member_access (|
                    M.get_name (| "msg" |),
                    "sender"
                  |))
                |),
                "sub"
              |),
              [
                M.get_name (| "value" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ERC20.
