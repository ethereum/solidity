(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_MyInt : Ty.path "MyInt" = Ty.path "int".

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "int",
                [
                  Value.Integer 1
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "wrap"
            |),
            [
              Value.Integer 1
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
