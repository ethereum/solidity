(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Ownable.
  Axiom user_type_Owner : Ty.path "Owner" = Ty.path "address".

  Definition owner : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "Owner" |),
        "wrap"
      |),
      [
        M.member_access (|
          M.get_name (| "msg" |),
          "sender"
        |)
      ]
    |).

  (* Error OnlyOwner *)

  (* Beginning of a node! *)
id: 27
src: 292:119:0
nodeType: ModifierDefinition
name: onlyOwner
nameLocation: 301:9:0
documentation: 
visibility: internal
parameters: ParameterList.make []
virtual: 0
overrides: 
body: let _ :=
    if M.bin_op (|
      "!=",
      M.call (|
        M.member_access (|
          M.get_name (| "Owner" |),
          "unwrap"
        |),
        [
          M.get_name (| "owner" |)
        ]
      |),
      M.member_access (|
        M.get_name (| "msg" |),
        "sender"
      |)
    |) then
      M.revert (|
        M.call (|
          M.get_name (| "OnlyOwner" |),
          []
        |)
      |)
    else
      Value.Tuple [] in
  let _ :=
    (* Beginning of a node! *)
id: 25
src: 403:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  (* Event OwnershipTransferred *)

  Definition setOwner (α : list Value.t) : M :=
    match α with
    | [newOwner] =>
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "OwnershipTransferred" |),
          [
            M.get_name (| "owner" |),
            M.get_name (| "newOwner" |)
          ]
        |)
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "owner" |),
          M.get_name (| "newOwner" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition renounceOwnership (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "owner" |),
          M.call (|
            M.member_access (|
              M.get_name (| "Owner" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Ownable.
