(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

Axiom user_type_MyAddress : Ty.path "MyAddress" = Ty.path "address".

(* Contract *)
Module C.
  Definition addresses : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [_addresses] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "_addresses" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.call (|
              M.member_access (|
                M.call (|
                  M.member_access (|
                    M.get_name (| "MyAddress" |),
                    "unwrap"
                  |),
                  [
                    M.index_access (|
                      M.get_name (| "_addresses" |),
                      Some (M.get_name (| "i" |))
                    |)
                  ]
                |),
                "call"
              |),
              [
                Value.String ""
              ]
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "addresses" |),
          M.get_name (| "_addresses" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [_addresses] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "_addresses" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.call (|
              M.member_access (|
                M.call (|
                  M.member_access (|
                    M.get_name (| "MyAddress" |),
                    "unwrap"
                  |),
                  [
                    M.index_access (|
                      M.get_name (| "_addresses" |),
                      Some (M.get_name (| "i" |))
                    |)
                  ]
                |),
                "call"
              |),
              [
                Value.String ""
              ]
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "addresses" |),
          M.get_name (| "_addresses" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "clean" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "test" ],
          M.call (|
            NewExpression Ty.array (Ty.path "MyAddress") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 21
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 22
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 2)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 23
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "f"
          |),
          [
            M.get_name (| "test" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "test_equality" |),
          [
            M.get_name (| "test" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "clean" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "test" ],
          M.call (|
            NewExpression Ty.array (Ty.path "MyAddress") None
,
            [
              Value.Integer 5
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 24
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 25
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 2)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 26
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 3)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 27
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "test" |),
            Some (Value.Integer 4)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 28
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.get_name (| "test" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "test_equality" |),
          [
            M.get_name (| "test" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition clean (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "addresses" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_equality (α : list Value.t) : M :=
    match α with
    | [_addresses] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "_addresses" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "addresses" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "_addresses" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.call (|
              M.get_name (| "require" |),
              [
                M.bin_op (|
                  "==",
                  M.call (|
                    M.member_access (|
                      M.get_name (| "MyAddress" |),
                      "unwrap"
                    |),
                    [
                      M.index_access (|
                        M.get_name (| "_addresses" |),
                        Some (M.get_name (| "i" |))
                      |)
                    ]
                  |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "MyAddress" |),
                      "unwrap"
                    |),
                    [
                      M.index_access (|
                        M.get_name (| "addresses" |),
                        Some (M.get_name (| "i" |))
                      |)
                    ]
                  |)
                |)
              ]
            |) in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
