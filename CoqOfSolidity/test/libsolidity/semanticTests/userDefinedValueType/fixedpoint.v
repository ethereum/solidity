(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_UFixed256x18 : Ty.path "UFixed256x18" = Ty.path "uint256".

(* Library *)
Module FixedMath.
  Definition multiplier : Value.t :=
    M.bin_op (|
      "**",
      Value.Integer 10,
      Value.Integer 18
    |).

  Definition add (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "UFixed256x18" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "+",
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed256x18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "a" |)
                  ]
                |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed256x18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "b" |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "UFixed256x18" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "*",
                M.call (|
                  M.member_access (|
                    M.get_name (| "UFixed256x18" |),
                    "unwrap"
                  |),
                  [
                    M.get_name (| "a" |)
                  ]
                |),
                M.get_name (| "b" |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition floor (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "/",
            M.call (|
              M.member_access (|
                M.get_name (| "UFixed256x18" |),
                "unwrap"
              |),
              [
                M.get_name (| "a" |)
              ]
            |),
            M.get_name (| "multiplier" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toUFixed256x18 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "UFixed256x18" |),
              "wrap"
            |),
            [
              M.bin_op (|
                "*",
                M.get_name (| "a" |),
                M.get_name (| "multiplier" |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End FixedMath.


(* Contract *)
Module TestFixedMath.
  Definition add (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "FixedMath" |),
              "add"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "FixedMath" |),
              "mul"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition floor (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "FixedMath" |),
              "floor"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toUFixed256x18 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "FixedMath" |),
              "toUFixed256x18"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End TestFixedMath.
