(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

Axiom user_type_MyAddress : Ty.path "MyAddress" = Ty.path "address".

(* Contract *)
Module C.
  Definition id (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition unwrap_assembly (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        (* Beginning of a node! *)
id: 25
src: 226:19:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 242:1:0declaration: 20isSlot: isOffset: alueSize: src: 237:1:0declaration: 23isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition wrap_assembly (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 332:19:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 348:1:0declaration: 29isSlot: isOffset: alueSize: src: 343:1:0declaration: 33isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition unwrap (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "unwrap"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition wrap (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.call (|
            M.member_access (|
              M.get_name (| "MyAddress" |),
              "wrap"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
