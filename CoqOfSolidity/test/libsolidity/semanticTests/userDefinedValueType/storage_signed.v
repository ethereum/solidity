(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_MyInt : Ty.path "MyInt" = Ty.path "int16".

(* Contract *)
Module C.
  Definition first : Value.t :=
    Value.String "ab".

  Definition a : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "MyInt" |),
        "wrap"
      |),
      [
        M.un_op (|
          true,
          "-",
          Value.Integer 2
        |)
      ]
    |).

  Definition third : Value.t :=
    Value.String "ef".

  Definition direct (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition indirect (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "MyInt" |),
              "unwrap"
            |),
            [
              M.get_name (| "a" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toMemDirect (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            M.get_name (| "a" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toMemIndirect (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            M.call (|
              M.member_access (|
                M.get_name (| "MyInt" |),
                "unwrap"
              |),
              [
                M.get_name (| "a" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition div (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "/",
            M.call (|
              M.member_access (|
                M.get_name (| "MyInt" |),
                "unwrap"
              |),
              [
                M.get_name (| "a" |)
              ]
            |),
            Value.Integer 2
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition viaasm (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "st" ],
          M.get_name (| "a" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 85
src: 650:20:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 666:2:0declaration: 82isSlot: isOffset: alueSize: src: 661:1:0declaration: 78isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
