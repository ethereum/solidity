(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_MyUInt16 : Ty.path "MyUInt16" = Ty.path "uint16".

Axiom user_type_MyBytes2 : Ty.path "MyBytes2" = Ty.path "bytes2".

(* Contract *)
Module C.
  Definition a : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "MyUInt16" |),
        "wrap"
      |),
      [
        Value.Integer 13
      ]
    |).

  Definition b : Value.t :=
    M.call (|
      M.member_access (|
        M.get_name (| "MyBytes2" |),
        "wrap"
      |),
      [
        M.call (|
          Ty.path "bytes2",
          [
            M.call (|
              Ty.path "uint16",
              [
                Value.Integer 1025
              ]
            |)
          ]
        |)
      ]
    |).

  Definition x : Value.t :=
    undefined.

  Definition write_a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "max" ],
          Value.Integer 0xf00e0bbc0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e0c0ba098076054032001
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 33
src: 317:52:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 347:6:0declaration: 11sSlot: isOffset: suffix: slotalueSize: src: 355:3:0declaration: 30isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition write_b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "max" ],
          Value.Integer 0xf00e0bbc0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e0c0ba098076054032001
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 42
src: 505:52:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 535:6:0declaration: 24sSlot: isOffset: suffix: slotalueSize: src: 543:3:0declaration: 39isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get_b (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.call (|
              M.member_access (|
                M.get_name (| "MyBytes2" |),
                "unwrap"
              |),
              [
                M.get_name (| "b" |)
              ]
            |),
            Some (M.get_name (| "index" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
