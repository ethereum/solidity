(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Helper.
  Definition name : Value.t :=
    undefined.

  Definition flag : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [x, f] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "name" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "flag" |),
          M.get_name (| "f" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getName (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "name" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getFlag (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "flag" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Helper.


(* Contract *)
Module Main.
  Definition h : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "h" |),
          M.call (|
            FunctionCallOptions Value.Tuple [
              NewExpression Ty.path "Helper"

            ] [value, ] Value.Integer 10
,
            [
              Value.String "abc",
              Value.Bool true
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getFlag (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "h" |),
              "getFlag"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getName (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "h" |),
              "getName"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getBalances (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "me" |),
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "balance"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "them" |),
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "h" |)
              ]
            |),
            "balance"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Main.
