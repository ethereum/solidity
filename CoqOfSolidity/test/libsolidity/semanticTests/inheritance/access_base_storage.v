(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Base.
  Definition dataBase : Value.t :=
    undefined.

  Definition getViaBase (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "dataBase" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module Derived.
  Definition dataDerived : Value.t :=
    undefined.

  Definition setData (α : list Value.t) : M :=
    match α with
    | [base, derived] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dataBase" |),
          M.get_name (| "base" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dataDerived" |),
          M.get_name (| "derived" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getViaDerived (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "base" |),
          M.get_name (| "dataBase" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "derived" |),
          M.get_name (| "dataDerived" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Derived.
