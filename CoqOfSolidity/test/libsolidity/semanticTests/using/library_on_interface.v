(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom using : M.usingLibrary (|
    Some (Ty.path "I"),
    UsingKind.Local,
    "L"
  |).

(* Interface *)
Module I.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End I.


(* Library *)
Module L.
  Definition execute (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "i" |),
              "f"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition x (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          M.get_name (| "this" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "i" |),
              "execute"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
