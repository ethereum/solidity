(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [arr] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "arr" |),
              "sum"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


Definition sum (α : list Value.t) : M :=
  match α with
  | [arr] =>
    let _ :=
      M.for_ (|
        M.define (|
          [ "i" ],
          Value.Integer 0
        |),
        M.bin_op (|
          "<",
          M.get_name (| "i" |),
          M.member_access (|
            M.get_name (| "arr" |),
            "length"
          |)
        |),
        M.un_op (|
          false,
          "++",
          M.get_name (| "i" |)
        |),
        let _ :=
          M.assign (|
            "+=",
            M.get_name (| "result" |),
            M.index_access (|
              M.get_name (| "arr" |),
              Some (M.get_name (| "i" |))
            |)
          |) in
        Value.Tuple []
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Axiom using : M.usingFunctions (|
    Some (Ty.array (Ty.path "uint") None),
    UsingKind.Local,
    [
    UsingFunction.Function "sum",
  ]
  |).