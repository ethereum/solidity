(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition uf (α : list Value.t) : M :=
    match α with
    | [b, x, y] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "b" |),
            Value.String "failure"
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "-",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition onlyPanic (α : list Value.t) : M :=
    match α with
    | [b, x, y] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "uf"
          |),
          [
            M.get_name (| "b" |),
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "b" |)
          |) in
        Value.Tuple [], TryCatchClause Panic ParameterList.make [
          Definition c : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "code" |),
            M.get_name (| "c" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition panicAndError (α : list Value.t) : M :=
    match α with
    | [b, x, y] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "uf"
          |),
          [
            M.get_name (| "b" |),
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "r" |),
            M.get_name (| "b" |)
          |) in
        Value.Tuple [], TryCatchClause Panic ParameterList.make [
          Definition c : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "code" |),
            M.get_name (| "c" |)
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition _errmsg : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "msg_" |),
            M.get_name (| "_errmsg" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
