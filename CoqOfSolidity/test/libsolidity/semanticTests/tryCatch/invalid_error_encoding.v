(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition g (α : list Value.t) : M :=
    match α with
    | [revertMsg] =>
      let _ :=
        (* Beginning of a node! *)
id: 9
src: 95:59:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 117:9:0declaration: 2isSlot: isOffset: alueSize: src: 141:9:0declaration: 2isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSelector"
              |),
              [
                Value.Integer 0x12345678,
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause  ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSelector"
              |),
              [
                Value.Integer 0x12345678,
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSelector"
              |),
              [
                Value.Integer 0x12345678,
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSelector"
              |),
              [
                Value.Integer 0x12345678,
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x100
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause  ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x100
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x100
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x100
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x30
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause  ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x30
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause  ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x30
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x30
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x7
                  ]
                |),
                M.call (|
                  Ty.path "bytes7",
                  [
                    Value.String "abcdefg"
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause  ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x7
                  ]
                |),
                M.call (|
                  Ty.path "bytes7",
                  [
                    Value.String "abcdefg"
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 2
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x7
                  ]
                |),
                M.call (|
                  Ty.path "bytes7",
                  [
                    Value.String "abcdefg"
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition  : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4c (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        TryStatement M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encodeWithSignature"
              |),
              [
                Value.String "Error(string)",
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x20
                  ]
                |),
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 0x7
                  ]
                |),
                M.call (|
                  Ty.path "bytes7",
                  [
                    Value.String "abcdefg"
                  ]
                |)
              ]
            |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition a : Value.t :=
            undefined.;
Definition b : Value.t :=
            undefined.
        ] let _ :=
          M.return_ (|
            Value.Integer 0
          |) in
        Value.Tuple [], TryCatchClause   let _ :=
          M.return_ (|
            Value.Integer 1
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
