(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Reverts.
  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
        M.call (|
          M.get_name (| "revert" |),
          [
            Value.String "test message."
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Reverts.


(* Contract *)
Module Succeeds.
  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Succeeds.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Integer 3
        |) in
      let _ :=
        TryStatement M.call (|
          NewExpression Ty.path "Reverts"
,
          [
            M.get_name (| "i" |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition r : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "r" |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            Value.String "success"
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition s : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Integer 8
        |) in
      let _ :=
        TryStatement M.call (|
          NewExpression Ty.path "Succeeds"
,
          [
            M.get_name (| "i" |)
          ]
        |) TryCatchClause  ParameterList.make [
          Definition r : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            M.get_name (| "r" |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            Value.String "success"
          |) in
        Value.Tuple [], TryCatchClause Error ParameterList.make [
          Definition s : Value.t :=
            undefined.
        ] let _ :=
          M.assign (|
            "=",
            M.get_name (| "txt" |),
            M.get_name (| "s" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
