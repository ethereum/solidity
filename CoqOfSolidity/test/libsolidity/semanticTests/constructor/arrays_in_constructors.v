(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Base.
  Definition m_x : Value.t :=
    undefined.

  Definition m_s : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [x, s] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "m_x" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "m_s" |),
          M.get_name (| "s" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition part (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m_s" |),
            Some (M.get_name (| "i" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module Main.
  Definition  (α : list Value.t) : M :=
    match α with
    | [s, x] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.return_ (|
          M.get_name (| "s" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Main.


(* Contract *)
Module Creator.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x, s] =>
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            NewExpression Ty.path "Main"
,
            [
              M.get_name (| "s" |),
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "c" |),
              "m_x"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ch" |),
          M.call (|
            M.member_access (|
              M.get_name (| "c" |),
              "part"
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Creator.
