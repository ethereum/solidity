(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A1.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A1.


(* Contract *)
Module B1.
  
End B1.


(* Contract *)
Module A2.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A2.


(* Contract *)
Module B2.
  
End B2.


(* Contract *)
Module B3.
  
End B3.


(* Contract *)
Module B4.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B4.


(* Contract *)
Module C.
  Definition createWithValue (α : list Value.t) : M :=
    match α with
    | [c, value] =>
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 0
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 289:55:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 323:1:0declaration: 24isSlot: isOffset: alueSize: src: 339:1:0declaration: 24isSlot: isOffset: alueSize: src: 312:5:0declaration: 26isSlot: isOffset: alueSize: src: 300:1:0declaration: 32isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.get_name (| "y" |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "createWithValue" |),
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "B1" |)
                  ]
                |),
                "creationCode"
              |),
              M.get_name (| "value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "createWithValue" |),
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "B2" |)
                  ]
                |),
                "creationCode"
              |),
              M.get_name (| "value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "createWithValue" |),
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "B3" |)
                  ]
                |),
                "creationCode"
              |),
              M.get_name (| "value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "createWithValue" |),
            [
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    M.get_name (| "B4" |)
                  ]
                |),
                "creationCode"
              |),
              M.get_name (| "value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
