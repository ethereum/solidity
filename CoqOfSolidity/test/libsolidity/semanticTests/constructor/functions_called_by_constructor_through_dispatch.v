(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition name : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "setter" ],
          M.get_name (| "setName" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "setter" |),
          [
            Value.String "abcdef"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "applyShift" |),
          [
            M.get_name (| "leftByteShift" |),
            Value.Integer 3
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getName (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "name" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setName (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "name" |),
          M.get_name (| "_name" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition leftByteShift (α : list Value.t) : M :=
    match α with
    | [_value, _shift] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "<<",
            M.get_name (| "_value" |),
            M.bin_op (|
              "*",
              M.get_name (| "_shift" |),
              Value.Integer 8
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition applyShift (α : list Value.t) : M :=
    match α with
    | [_shiftOperator, _bytes] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "name" |),
          M.call (|
            M.get_name (| "_shiftOperator" |),
            [
              M.get_name (| "name" |),
              M.get_name (| "_bytes" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
