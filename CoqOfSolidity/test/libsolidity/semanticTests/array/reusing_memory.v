(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Helper.
  Definition flag : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "flag" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Helper.


(* Contract *)
Module Main.
  Definition map : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "map" |),
            Some (M.get_name (| "x" |))
          |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  NewExpression Ty.path "Helper"
,
                  [
                    M.call (|
                      Ty.path "uint256",
                      [
                        M.call (|
                          M.get_name (| "keccak256" |),
                          [
                            M.call (|
                              M.member_access (|
                                M.get_name (| "abi" |),
                                "encodePacked"
                              |),
                              [
                                M.call (|
                                  M.member_access (|
                                    M.get_name (| "this" |),
                                    "g"
                                  |),
                                  [
                                    M.index_access (|
                                      M.get_name (| "map" |),
                                      Some (M.get_name (| "x" |))
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ],
              "flag"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "map" |),
            Some (M.get_name (| "a" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Main.
