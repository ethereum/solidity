(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [len, idx] =>
      let _ :=
        M.define (|
          [ "array" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              M.get_name (| "len" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          M.call (|
            M.get_name (| "receiver" |),
            [
              M.get_name (| "array" |),
              M.get_name (| "idx" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "array" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.get_name (| "require" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "array" |),
                  Some (M.get_name (| "i" |))
                |),
                M.bin_op (|
                  "+",
                  M.get_name (| "i" |),
                  Value.Integer 1
                |)
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "result" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition receiver (α : list Value.t) : M :=
    match α with
    | [array, idx] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "array" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "array" |),
              Some (M.get_name (| "i" |))
            |),
            M.bin_op (|
              "+",
              M.get_name (| "i" |),
              Value.Integer 1
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "array" |),
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
