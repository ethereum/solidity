(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition s : Value.t :=
    Value.String "bcdef".

  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.get_name (| "a" |),
              Value.String "bcdef"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.get_name (| "a" |),
              Value.String "abcdefghabcdefghabcdefghabcdefghab"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.define (|
          [ "ref" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "ref" |),
              M.get_name (| "s" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.get_name (| "a" |),
              M.call (|
                Ty.path "bytes",
                [
                  M.get_name (| "b" |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition slice (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 2
            |),
            Value.String ""
          ]
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              IndexRangeAccess M.get_name (| "a" |)  Value.Integer 2
,
              IndexRangeAccess M.get_name (| "a" |) Value.Integer 2 

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition strParam (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.call (|
                Ty.path "bytes",
                [
                  M.get_name (| "a" |)
                ]
              |),
              Value.String "bcdef"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fixedBytesParam (α : list Value.t) : M :=
    match α with
    | [b1, b2, b3] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "b1" |),
                M.get_name (| "b2" |)
              ]
            |),
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "b1" |),
                M.get_name (| "b3" |)
              ]
            |),
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "b1" |),
                Value.String "bcdef"
              ]
            |),
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "b1" |),
                M.get_name (| "s" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fixedBytesParam2 (α : list Value.t) : M :=
    match α with
    | [c, b1, b2] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "s" |),
                M.get_name (| "b1" |),
                M.get_name (| "c" |)
              ]
            |),
            M.call (|
              M.member_access (|
                Ty.path "bytes",
                "concat"
              |),
              [
                M.get_name (| "b1" |),
                M.get_name (| "c" |),
                M.get_name (| "b2" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
