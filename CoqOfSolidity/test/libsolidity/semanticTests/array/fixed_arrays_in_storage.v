(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  (* Struct Data *)

  Definition data : Value.t :=
    undefined.

  Definition ids : Value.t :=
    undefined.

  Definition setIDStatic (α : list Value.t) : M :=
    match α with
    | [id] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ids" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "id" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setID (α : list Value.t) : M :=
    match α with
    | [index, id] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ids" |),
            Some (M.get_name (| "index" |))
          |),
          M.get_name (| "id" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setData (α : list Value.t) : M :=
    match α with
    | [index, x, y] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "index" |))
            |),
            "x"
          |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "index" |))
            |),
            "y"
          |),
          M.get_name (| "y" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getID (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "ids" |),
            Some (M.get_name (| "index" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getData (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "index" |))
            |),
            "x"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "index" |))
            |),
            "y"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getLengths (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "l1" |),
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "l2" |),
          M.member_access (|
            M.get_name (| "ids" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
