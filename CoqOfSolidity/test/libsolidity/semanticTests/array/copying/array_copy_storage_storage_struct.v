(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  (* Struct Data *)

  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.get_name (| "data1" |),
              "length"
            |),
            Value.Integer 9
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "data1" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data1" |),
              Some (Value.Integer 8)
            |),
            "x"
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data1" |),
              Some (Value.Integer 8)
            |),
            "y"
          |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data2" |),
              Some (Value.Integer 8)
            |),
            "x"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data2" |),
              Some (Value.Integer 8)
            |),
            "y"
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            ">",
            M.member_access (|
              M.get_name (| "data1" |),
              "length"
            |),
            Value.Integer 0
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "data1" |),
              "pop"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
