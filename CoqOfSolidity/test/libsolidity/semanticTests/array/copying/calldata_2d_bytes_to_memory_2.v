(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition g (α : list Value.t) : M :=
    match α with
    | [m] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              ">",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              ">",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 0)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 1)
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "m" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 1)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.call (|
          M.get_name (| "g" |),
          [
            M.get_name (| "c" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
