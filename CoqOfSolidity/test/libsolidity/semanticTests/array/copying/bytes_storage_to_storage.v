(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [len] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              M.get_name (| "len" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.get_name (| "len" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "x" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes1",
              [
                M.call (|
                  Ty.path "uint8",
                  [
                    M.get_name (| "i" |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.get_name (| "len" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (M.get_name (| "i" |))
                |),
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (M.get_name (| "i" |))
                |)
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.get_name (| "len" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.get_name (| "assert" |),
            [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "b" |),
                  Some (M.get_name (| "i" |))
                |),
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (M.get_name (| "i" |))
                |)
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "b" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
