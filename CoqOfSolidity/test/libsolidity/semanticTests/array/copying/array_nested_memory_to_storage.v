(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition unused : Value.t :=
    undefined.

  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 3)
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.bin_op (|
              "+",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 1)
              |)
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 3)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") (Some (Value.Integer 2))) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.index_access (|
              M.index_access (|
                M.get_name (| "b" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "b" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 1)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.bin_op (|
              "+",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "c" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "c" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 1)
              |)
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "c" |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 1)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m" |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.bin_op (|
              "+",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 0)
              |)
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 2)
              |),
              Some (Value.Integer 1)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
