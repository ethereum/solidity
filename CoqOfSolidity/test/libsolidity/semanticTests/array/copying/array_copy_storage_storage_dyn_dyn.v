(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition setData1 (α : list Value.t) : M :=
    match α with
    | [length, index, value] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data1" |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              M.get_name (| "length" |)
            ]
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.get_name (| "index" |),
          M.get_name (| "length" |)
        |) then
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "data1" |),
              Some (M.get_name (| "index" |))
            |),
            M.get_name (| "value" |)
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copyStorageStorage (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getData2 (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "len" |),
          M.member_access (|
            M.get_name (| "data2" |),
            "length"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.get_name (| "index" |),
          M.get_name (| "len" |)
        |) then
          M.assign (|
            "=",
            M.get_name (| "val" |),
            M.index_access (|
              M.get_name (| "data2" |),
              Some (M.get_name (| "index" |))
            |)
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
