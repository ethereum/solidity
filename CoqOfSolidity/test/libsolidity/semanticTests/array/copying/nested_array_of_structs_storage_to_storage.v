(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition src1 : Value.t :=
    undefined.

  Definition src2 : Value.t :=
    undefined.

  Definition src3 : Value.t :=
    undefined.

  Definition dst1 : Value.t :=
    undefined.

  Definition dst2 : Value.t :=
    undefined.

  Definition dst3 : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "src1" |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "S") None) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "src1" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 3,
                Value.Integer 7
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "src1" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 11,
                Value.Integer 13
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "src2" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 3,
                Value.Integer 7
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "src2" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 11,
                Value.Integer 13
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "src2" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          [
            M.call (|
              M.get_name (| "S" |),
              [
                Value.Integer 17,
                Value.Integer 19
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "src3" |),
            "push"
          |),
          [
            Value.Array [
              M.call (|
                M.get_name (| "S" |),
                [
                  Value.Integer 3,
                  Value.Integer 7
                ]
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "src3" |),
            "push"
          |),
          [
            Value.Array [
              M.call (|
                M.get_name (| "S" |),
                [
                  Value.Integer 11,
                  Value.Integer 13
                ]
              |)
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dst1" |),
          M.get_name (| "src1" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "dst1" |),
                "length"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src1" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "y"
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dst2" |),
          M.get_name (| "src2" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "dst2" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "y"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |),
                "y"
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dst3" |),
          M.get_name (| "src3" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "dst3" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst3" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src3" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst3" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src3" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst3" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src3" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "x"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "dst3" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |),
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "src3" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |),
                "y"
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
