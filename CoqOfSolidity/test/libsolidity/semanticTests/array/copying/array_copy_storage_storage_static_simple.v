(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Default
        |) in
      let _ :=
        M.for_ (|
          M.assign (|
            "=",
            M.get_name (| "i" |),
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data1" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "data1" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes1",
              [
                M.call (|
                  Ty.path "uint8",
                  [
                    M.bin_op (|
                      "+",
                      Value.Integer 1,
                      M.get_name (| "i" |)
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "data2" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "data2" |),
              Some (Value.Integer 1)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
