(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition x1 : Value.t :=
    undefined.

  Definition x2 : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint128") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 23
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "y" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 59
src: 253:30:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 271:6:0declaration: 3sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 0)
              |),
              Value.Integer 23
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 2)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 3)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x1" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x1" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x1" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x1" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint64") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 23
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x1" |),
          M.get_name (| "y" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 139
src: 584:31:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 602:7:0declaration: 6sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x1" |),
                Some (Value.Integer 0)
              |),
              Value.Integer 23
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x1" |),
                Some (Value.Integer 2)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x1" |),
                Some (Value.Integer 3)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x1" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x2" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x2" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x2" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x2" |),
            "push"
          |),
          [
            Value.Integer 42
          ]
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint120") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 23
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x2" |),
          M.get_name (| "y" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 219
src: 923:31:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 941:7:0declaration: 9sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x2" |),
                Some (Value.Integer 0)
              |),
              Value.Integer 23
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x2" |),
                Some (Value.Integer 2)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "x2" |),
                Some (Value.Integer 3)
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x2" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
