(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Definition dataslot (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.get_name (| "keccak256" |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encode"
              |),
              [
                Value.Integer 1
              ]
            |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition readDataSlot (α : list Value.t) : M :=
  match α with
  | [offset] =>
    let _ :=
      M.define (|
        [ "s" ],
        M.call (|
          M.get_name (| "dataslot" |),
          []
        |)
      |) in
    let _ :=
      (* Beginning of a node! *)
id: 25
src: 179:39:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 208:6:0declaration: 15isSlot: isOffset: alueSize: src: 190:1:0declaration: 18isSlot: isOffset: alueSize: src: 205:1:0declaration: 21isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition readDataSlot (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.get_name (| "readDataSlot" |),
          [
            Value.Integer 0
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition readHead (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      (* Beginning of a node! *)
id: 42
src: 353:26:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 364:1:0declaration: 40isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition padding : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "zero" ],
          Value.Default
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                []
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 1
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.String "abc"
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                []
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 2
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.String "1234567890123456789012345678901234567890123456789012345678901234567890"
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "readDataSlot" |),
                []
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 3
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 1
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 4
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 2
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 5
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 3
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 6
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 4
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 7
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.String "abc"
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                []
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 8
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 1
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 9
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 2
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 10
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 3
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 11
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.String "1234567890123456789012345678901234567890123456789012345678901234567890"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.String "123456789012345678901234567890123456"
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "readDataSlot" |),
                []
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 12
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 1
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 13
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 2
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 14
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          Value.Tuple [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "readDataSlot" |),
                [
                  Value.Integer 3
                ]
              |),
              M.get_name (| "zero" |)
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 15
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Integer 0xff
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
