(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition mutex : Value.t :=
    undefined.

  Definition one (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "xmem" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "xmem" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 3
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition two (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "mutex" |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.Integer 7
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "mutex" |),
          Value.Integer 1
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
