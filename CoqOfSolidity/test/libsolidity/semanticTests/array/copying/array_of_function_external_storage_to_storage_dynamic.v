(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition testFunction1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testFunction2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testFunction3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition externalArray0 : Value.t :=
    undefined.

  Definition externalArray1 : Value.t :=
    undefined.

  Definition internalArray0 : Value.t :=
    undefined.

  Definition internalArray1 : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "externalArray0" |),
          M.call (|
            NewExpression Ty.array (Ty.function
              (ParameterList.make [])
              (ParameterList.make [])) None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "externalArray1" |),
          Value.Array [
            M.member_access (|
              M.get_name (| "this" |),
              "testFunction1"
            |),
            M.member_access (|
              M.get_name (| "this" |),
              "testFunction2"
            |),
            M.member_access (|
              M.get_name (| "this" |),
              "testFunction3"
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "internalArray0" |),
          M.call (|
            NewExpression Ty.array (Ty.function
              (ParameterList.make [])
              (ParameterList.make [])) None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "internalArray1" |),
          Value.Array [
            M.get_name (| "testFunction1" |),
            M.get_name (| "testFunction2" |),
            M.get_name (| "testFunction3" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copyExternalStorageArrayOfFunctionType (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "!=",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "abi" |),
                      "encode"
                    |),
                    [
                      M.get_name (| "externalArray0" |)
                    ]
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "abi" |),
                      "encode"
                    |),
                    [
                      M.get_name (| "externalArray1" |)
                    ]
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "externalArray0" |),
          M.get_name (| "externalArray1" |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.call (|
              M.get_name (| "keccak256" |),
              [
                M.call (|
                  M.member_access (|
                    M.get_name (| "abi" |),
                    "encode"
                  |),
                  [
                    M.get_name (| "externalArray0" |)
                  ]
                |)
              ]
            |),
            M.call (|
              M.get_name (| "keccak256" |),
              [
                M.call (|
                  M.member_access (|
                    M.get_name (| "abi" |),
                    "encode"
                  |),
                  [
                    M.get_name (| "externalArray1" |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copyInternalArrayOfFunctionType (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "internalArray0" |),
          M.get_name (| "internalArray1" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "internalArray0" |),
                "length"
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              M.bin_op (|
                "&&",
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.get_name (| "internalArray0" |),
                    "length"
                  |),
                  M.member_access (|
                    M.get_name (| "internalArray1" |),
                    "length"
                  |)
                |),
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.get_name (| "internalArray0" |),
                    Some (Value.Integer 0)
                  |),
                  M.index_access (|
                    M.get_name (| "internalArray1" |),
                    Some (Value.Integer 0)
                  |)
                |)
              |),
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "internalArray0" |),
                  Some (Value.Integer 1)
                |),
                M.index_access (|
                  M.get_name (| "internalArray1" |),
                  Some (Value.Integer 1)
                |)
              |)
            |),
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "internalArray0" |),
                Some (Value.Integer 2)
              |),
              M.index_access (|
                M.get_name (| "internalArray1" |),
                Some (Value.Integer 2)
              |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
