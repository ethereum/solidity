(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition a1 : Value.t :=
    undefined.

  Definition a2 : Value.t :=
    undefined.

  Definition a3 : Value.t :=
    undefined.

  Definition s1 : Value.t :=
    undefined.

  Definition s2 : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a1" |),
            "push"
          |),
          [
            Value.Integer 23
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a1" |),
            "push"
          |),
          [
            Value.Integer 29
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a2" |),
            "push"
          |),
          [
            Value.Integer 31
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s1" |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "S") None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "s1" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "S") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s1" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              M.get_name (| "a1" |),
              Value.Array [
                Value.Integer 7,
                Value.Integer 11
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s1" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              M.get_name (| "a2" |),
              Value.Array [
                Value.Integer 17,
                Value.Integer 19
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "s1" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "S") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s1" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              M.get_name (| "a3" |),
              Value.Array [
                Value.Integer 37,
                Value.Integer 41
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "s2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              M.get_name (| "a3" |),
              Value.Array [
                Value.Integer 43,
                Value.Integer 47
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "s1" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "s2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
