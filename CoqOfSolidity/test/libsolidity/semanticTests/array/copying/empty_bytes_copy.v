(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition otherData : Value.t :=
    undefined.

  Definition fromMemory (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "t" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "t" |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fromCalldata (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fromStorage (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 69
src: 503:104:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 522:14:0declaration: 4sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "otherData" |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
