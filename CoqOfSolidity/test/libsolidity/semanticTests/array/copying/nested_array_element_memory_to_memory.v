(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition test1 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test4 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint16") None) None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test5 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint32") None) (Some (Value.Integer 2))) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test6 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint32") (Some (Value.Integer 2))) None) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
