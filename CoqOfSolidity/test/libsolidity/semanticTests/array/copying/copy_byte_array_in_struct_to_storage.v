(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)

(* Contract *)
Module C.
  Definition padding : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "x"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "b"
          |),
          Value.String "1234567890123456789012345678901 1234567890123456789012345678901 123456789"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "a"
          |),
          Value.String "abcdef"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "y"
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "data" |),
              "a"
            |),
            M.member_access (|
              M.get_name (| "data" |),
              "b"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "x"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "b"
          |),
          Value.String "12345678923456789"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "a"
          |),
          Value.String "1234567890123456789012345678901 1234567890123456789012345678901 123456789"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "x" |),
            "y"
          |),
          Value.Integer 9
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "data" |),
              "a"
            |),
            M.member_access (|
              M.get_name (| "data" |),
              "b"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "data" |),
              "a"
            |),
            M.member_access (|
              M.get_name (| "data" |),
              "b"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
