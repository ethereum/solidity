(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition log : Value.t :=
    undefined.

  Definition fs : Value.t :=
    undefined.

  Definition gs : Value.t :=
    undefined.

  Definition a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "log" |),
          M.call (|
            M.member_access (|
              Ty.path "string",
              "concat"
            |),
            [
              M.get_name (| "log" |),
              Value.String "[a called]"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "log" |),
          M.call (|
            M.member_access (|
              Ty.path "string",
              "concat"
            |),
            [
              M.get_name (| "log" |),
              Value.String "[b called]"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "fs" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "fs" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "log" |),
          Value.String ""
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.array (Ty.function
              (ParameterList.make [])
              (ParameterList.make [])) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "a"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "b"
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "f"
          |),
          [
            M.get_name (| "x" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "fs" |),
            Some (Value.Integer 0)
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "fs" |),
            Some (Value.Integer 1)
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "log" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "log" |),
          Value.String ""
        |) in
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.array (Ty.function
              (ParameterList.make [])
              (ParameterList.make [])) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "b"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "a"
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "g" |),
          [
            M.get_name (| "x" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "fs" |),
            Some (Value.Integer 0)
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "fs" |),
            Some (Value.Integer 1)
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "log" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "log" |),
          Value.String ""
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "gs" |),
          M.get_name (| "fs" |)
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "gs" |),
            Some (Value.Integer 0)
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "gs" |),
            Some (Value.Integer 1)
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "log" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
