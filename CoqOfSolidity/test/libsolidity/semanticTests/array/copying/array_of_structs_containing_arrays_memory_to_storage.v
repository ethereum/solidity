(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition s : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            NewExpression Ty.array (Ty.path "S") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.get_name (| "S" |),
            [
              Value.Integer 0,
              Value.Array [
                M.call (|
                  Ty.path "uint128",
                  [
                    Value.Integer 1
                  ]
                |),
                Value.Integer 2,
                Value.Integer 3
              ],
              M.call (|
                NewExpression Ty.array (Ty.path "uint128") None
,
                [
                  Value.Integer 3
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              "c"
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              "c"
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "m" |),
                Some (Value.Integer 1)
              |),
              "c"
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "s" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "m" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "s" |),
                    Some (Value.Integer 1)
                  |),
                  "b"
                |),
                Some (Value.Integer 1)
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "m" |),
                    Some (Value.Integer 1)
                  |),
                  "b"
                |),
                Some (Value.Integer 1)
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "s" |),
                    Some (Value.Integer 1)
                  |),
                  "c"
                |),
                Some (Value.Integer 0)
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "m" |),
                    Some (Value.Integer 1)
                  |),
                  "c"
                |),
                Some (Value.Integer 0)
              |)
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "b"
              |),
              "length"
            |),
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "c"
              |),
              "length"
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "b"
              |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 1)
                |),
                "c"
              |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
