(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module receiver.
  Definition received : Value.t :=
    undefined.

  Definition recv (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "received" |),
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 1
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "received" |),
          Value.Integer 0x80
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End receiver.


(* Contract *)
Module sender.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "rec" |),
          M.call (|
            NewExpression Ty.path "receiver"
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "savedData1" |),
          M.assign (|
            "=",
            M.get_name (| "savedData2" |),
            M.member_access (|
              M.get_name (| "msg" |),
              "data"
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition forward (α : list Value.t) : M :=
    match α with
    | [selector] =>
      let _ :=
        if M.get_name (| "selector" |) then
          let _ :=
            M.call (|
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "rec" |)
                  ]
                |),
                "call"
              |),
              [
                M.get_name (| "savedData1" |)
              ]
            |) in
          let _ :=
            M.un_op (|
              true,
              "delete",
              M.get_name (| "savedData1" |)
            |) in
          Value.Tuple []
        else
          let _ :=
            M.call (|
              M.member_access (|
                M.call (|
                  Ty.path "address",
                  [
                    M.get_name (| "rec" |)
                  ]
                |),
                "call"
              |),
              [
                M.get_name (| "savedData2" |)
              ]
            |) in
          let _ :=
            M.un_op (|
              true,
              "delete",
              M.get_name (| "savedData2" |)
            |) in
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition val (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "rec" |),
              "received"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition rec : Value.t :=
    undefined.

  Definition savedData1 : Value.t :=
    undefined.

  Definition savedData2 : Value.t :=
    undefined.
End sender.
