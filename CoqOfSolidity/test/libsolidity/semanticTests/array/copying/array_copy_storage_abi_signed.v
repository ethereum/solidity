(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition x : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 1
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 1
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                Value.Integer 8
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 16
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 2
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                Value.Integer 6
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                Value.Integer 8
              ]
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "push"
          |),
          [
            M.call (|
              Ty.path "int16",
              [
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 1
                |)
              ]
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
