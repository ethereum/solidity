(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data1 : Value.t :=
    undefined.

  Definition data2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            Ty.path "bytes8",
            [
              M.call (|
                Ty.path "uint64",
                [
                  Value.Integer 1
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            Ty.path "bytes8",
            [
              M.call (|
                Ty.path "uint64",
                [
                  Value.Integer 2
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (Value.Integer 2)
          |),
          M.call (|
            Ty.path "bytes8",
            [
              M.call (|
                Ty.path "uint64",
                [
                  Value.Integer 3
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data1" |),
            Some (Value.Integer 3)
          |),
          M.call (|
            Ty.path "bytes8",
            [
              M.call (|
                Ty.path "uint64",
                [
                  Value.Integer 4
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data2" |),
              "length"
            |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "data2" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes10",
              [
                M.call (|
                  Ty.path "uint80",
                  [
                    M.bin_op (|
                      "|",
                      Value.Integer 0xffff00,
                      Value.Tuple [
                        M.bin_op (|
                          "+",
                          Value.Integer 1,
                          M.get_name (| "i" |)
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data2" |),
          M.get_name (| "data1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r1" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 3)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r2" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 4)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r3" |),
          M.index_access (|
            M.get_name (| "data2" |),
            Some (Value.Integer 5)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
