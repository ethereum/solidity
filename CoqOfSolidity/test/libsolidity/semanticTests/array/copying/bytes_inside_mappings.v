(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition set (α : list Value.t) : M :=
    match α with
    | [key] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "key" |))
          |),
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copy (α : list Value.t) : M :=
    match α with
    | [from, to] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "to" |))
          |),
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "from" |))
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition data : Value.t :=
    undefined.
End c.
