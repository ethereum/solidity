(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition s : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "s" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "s" |),
            "push"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.index_access (|
              M.get_name (| "s" |),
              Some (Value.Integer 1)
            |),
            M.get_name (| "s" |)
          ],
          Value.Tuple [
            Value.Integer 4,
            Value.Array [
              Value.Integer 0
            ]
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          Value.Array [
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "s" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "s" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
