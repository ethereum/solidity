(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition a : Value.t :=
    undefined.

  Definition a2 : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.index_access (|
            M.get_name (| "_a" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 8
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 1)
              |),
              Value.Integer 9
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [_a] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a2" |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") None) None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a2" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 1
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 8
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a2" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |),
                Some (Value.Integer 1)
              |),
              Value.Integer 9
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "a2" |),
                  Some (Value.Integer 1)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
