(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition a1 : Value.t :=
    M.call (|
      NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") None) None) None
,
      [
        Value.Integer 2
      ]
    |).

  Definition a2 : Value.t :=
    undefined.

  Definition a3 : Value.t :=
    M.call (|
      NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") None) (Some (Value.Integer 2))) None
,
      [
        Value.Integer 1
      ]
    |).

  Definition a4 : Value.t :=
    M.call (|
      NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") (Some (Value.Integer 2))) None) None
,
      [
        Value.Integer 2
      ]
    |).

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint8") None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a1" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a1" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 5,
            Value.Integer 6
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint8") None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 6,
            Value.Integer 7
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 8,
            Value.Integer 9
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint8") None) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a2" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 10,
            Value.Integer 11
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a3" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a3" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          Value.Array [
            Value.Integer 5,
            Value.Integer 6
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint8") (Some (Value.Integer 2))) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a4" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 17,
            Value.Integer 23
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint8") (Some (Value.Integer 2))) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "a4" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |),
          Value.Array [
            Value.Integer 19,
            Value.Integer 31
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a3" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test5 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") None) None) None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "a1" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test6 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") None) (Some (Value.Integer 2))) None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a3" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test7 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.array (Ty.path "uint8") (Some (Value.Integer 2))) None) None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "tmp" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "a4" |),
            Some (Value.Integer 0)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
