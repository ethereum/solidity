(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition len (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 234
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 123
          ]
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 23
src: 155:56:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 191:9:0declaration: 3sSlot: isOffset: suffix: slotalueSize: src: 178:3:0declaration: 6isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition val (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 30
src: 274:162:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 0)
              |),
              Value.Integer 234
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 1)
              |),
              Value.Integer 123
            |)
          ]
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      let _ :=
        M.define (|
          [ "size" ],
          Value.Integer 999
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 54
src: 559:117:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 636:3:0declaration: 28isSlot: isOffset: alueSize: src: 582:4:0declaration: 51isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
