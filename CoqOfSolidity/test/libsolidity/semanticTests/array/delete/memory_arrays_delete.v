(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition del (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "x" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.for_ (|
            M.define (|
              [ "j" ],
              Value.Integer 0
            |),
            M.bin_op (|
              "<",
              M.get_name (| "j" |),
              M.member_access (|
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (M.get_name (| "i" |))
                |),
                "length"
              |)
            |),
            M.un_op (|
              false,
              "++",
              M.get_name (| "j" |)
            |),
            M.assign (|
              "=",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (M.get_name (| "i" |))
                |),
                Some (M.get_name (| "j" |))
              |),
              M.bin_op (|
                "+",
                M.bin_op (|
                  "*",
                  M.get_name (| "i" |),
                  Value.Integer 0x10
                |),
                M.get_name (| "j" |)
              |)
            |)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 3)
            |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
