(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition test1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 100
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes1",
              [
                M.call (|
                  Ty.path "uint8",
                  [
                    M.get_name (| "i" |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 94)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 96)
          |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 98)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              M.bin_op (|
                "&&",
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (Value.Integer 94)
                  |),
                  Value.Integer 0
                |),
                M.bin_op (|
                  "==",
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.index_access (|
                        M.get_name (| "data" |),
                        Some (Value.Integer 95)
                      |)
                    ]
                  |),
                  Value.Integer 95
                |)
              |),
              M.bin_op (|
                "==",
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 96)
                |),
                Value.Integer 0
              |)
            |),
            M.bin_op (|
              "==",
              M.call (|
                Ty.path "uint8",
                [
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (Value.Integer 97)
                  |)
                ]
              |),
              Value.Integer 97
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
