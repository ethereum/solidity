(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.String "a"
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.String "b"
          ]
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 22
src: 152:56:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 188:9:0declaration: 2sSlot: isOffset: suffix: slotalueSize: src: 175:3:0declaration: 5isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 29
src: 269:54:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 299:9:0declaration: 2sSlot: isOffset: suffix: slotalueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.String "a"
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.String "b"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 35
            |)
          ]
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "size" ],
          Value.Integer 999
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 63
src: 496:133:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 533:9:0declaration: 2sSlot: isOffset: suffix: slotalueSize: src: 566:9:0declaration: 2sSlot: isOffset: suffix: slotalueSize: src: 589:3:0declaration: 27isSlot: isOffset: alueSize: src: 519:4:0declaration: 60isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "size" |),
              Value.Integer 0
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
