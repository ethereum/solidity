(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module BinarySearch.
  Definition find (α : list Value.t) : M :=
    match α with
    | [_data, _value] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "find" |),
            [
              M.get_name (| "_data" |),
              Value.Integer 0,
              M.member_access (|
                M.get_name (| "_data" |),
                "length"
              |),
              M.get_name (| "_value" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition find (α : list Value.t) : M :=
    match α with
    | [_data, _begin, _len, _value] =>
      let _ :=
        if M.bin_op (|
          "||",
          M.bin_op (|
            "==",
            M.get_name (| "_len" |),
            Value.Integer 0
          |),
          Value.Tuple [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.get_name (| "_len" |),
                Value.Integer 1
              |),
              M.bin_op (|
                "!=",
                M.index_access (|
                  M.get_name (| "_data" |),
                  Some (M.get_name (| "_begin" |))
                |),
                M.get_name (| "_value" |)
              |)
            |)
          ]
        |) then
          M.return_ (|
            M.member_access (|
              M.call (|
                M.get_name (| "type" |),
                [
                  Ty.path "uint256"
                ]
              |),
              "max"
            |)
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "halfLen" ],
          M.bin_op (|
            "/",
            M.get_name (| "_len" |),
            Value.Integer 2
          |)
        |) in
      let _ :=
        M.define (|
          [ "v" ],
          M.index_access (|
            M.get_name (| "_data" |),
            Some (M.bin_op (|
              "+",
              M.get_name (| "_begin" |),
              M.get_name (| "halfLen" |)
            |))
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.get_name (| "_value" |),
          M.get_name (| "v" |)
        |) then
          M.return_ (|
            M.call (|
              M.get_name (| "find" |),
              [
                M.get_name (| "_data" |),
                M.get_name (| "_begin" |),
                M.get_name (| "halfLen" |),
                M.get_name (| "_value" |)
              ]
            |)
          |)
        else
          if M.bin_op (|
            ">",
            M.get_name (| "_value" |),
            M.get_name (| "v" |)
          |) then
            M.return_ (|
              M.call (|
                M.get_name (| "find" |),
                [
                  M.get_name (| "_data" |),
                  M.bin_op (|
                    "+",
                    M.bin_op (|
                      "+",
                      M.get_name (| "_begin" |),
                      M.get_name (| "halfLen" |)
                    |),
                    Value.Integer 1
                  |),
                  M.bin_op (|
                    "-",
                    M.get_name (| "halfLen" |),
                    Value.Integer 1
                  |),
                  M.get_name (| "_value" |)
                ]
              |)
            |)
          else
            M.return_ (|
              M.bin_op (|
                "+",
                M.get_name (| "_begin" |),
                M.get_name (| "halfLen" |)
              |)
            |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End BinarySearch.


(* Contract *)
Module Store.
  Definition data : Value.t :=
    undefined.

  Definition add (α : list Value.t) : M :=
    match α with
    | [v] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 1
            |))
          |),
          M.get_name (| "v" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition find (α : list Value.t) : M :=
    match α with
    | [v] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "find" |),
            [
              M.get_name (| "data" |),
              M.get_name (| "v" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Store.
