(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  (* Struct s *)

  Definition data : Value.t :=
    undefined.

  Definition fill (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |),
            Value.Integer 3
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "data" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 2)
                |),
                "d"
              |),
              "length"
            |),
            Value.Integer 4
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 2)
                |),
                "d"
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (Value.Integer 2)
                  |),
                  "d"
                |),
                Some (Value.Integer 3)
              |),
              "length"
            |),
            Value.Integer 5
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (Value.Integer 2)
                  |),
                  "d"
                |),
                Some (Value.Integer 3)
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 2)
                |),
                "d"
              |),
              Some (Value.Integer 3)
            |),
            Some (Value.Integer 4)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 2)
                |),
                "d"
              |),
              Some (Value.Integer 3)
            |),
            Some (Value.Integer 4)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition clear (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
