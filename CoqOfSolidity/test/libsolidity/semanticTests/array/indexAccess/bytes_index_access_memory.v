(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Main.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_s1, i1, i2, i3] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c1" |),
          M.index_access (|
            M.get_name (| "_s1" |),
            Some (M.get_name (| "i1" |))
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c2" |),
          M.call (|
            M.get_name (| "intern" |),
            [
              M.get_name (| "_s1" |),
              M.get_name (| "i2" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c3" |),
          M.index_access (|
            M.call (|
              M.get_name (| "internIndirect" |),
              [
                M.get_name (| "_s1" |)
              ]
            |),
            Some (M.get_name (| "i3" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition intern (α : list Value.t) : M :=
    match α with
    | [_s1, i] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "_s1" |),
            Some (M.get_name (| "i" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition internIndirect (α : list Value.t) : M :=
    match α with
    | [_s1] =>
      let _ :=
        M.return_ (|
          M.get_name (| "_s1" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Main.
