(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition direct (α : list Value.t) : M :=
    match α with
    | [arg, index] =>
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint",
            [
              M.call (|
                Ty.path "uint8",
                [
                  M.index_access (|
                    M.get_name (| "arg" |),
                    Some (M.get_name (| "index" |))
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storageCopyRead (α : list Value.t) : M :=
    match α with
    | [arg, index] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.get_name (| "arg" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint",
            [
              M.call (|
                Ty.path "uint8",
                [
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (M.get_name (| "index" |))
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition storageWrite (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 35
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 31)
          |),
          Value.Integer 0x77
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 32)
          |),
          Value.Integer 0x14
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 31)
          |),
          Value.Integer 0x01
        |) in
      let _ :=
        M.assign (|
          "|=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 31)
          |),
          Value.Integer 0x08
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 30)
          |),
          Value.Integer 0x01
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 32)
          |),
          Value.Integer 0x03
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "|",
            M.bin_op (|
              "|",
              M.bin_op (|
                "*",
                M.call (|
                  Ty.path "uint",
                  [
                    M.call (|
                      Ty.path "uint8",
                      [
                        M.index_access (|
                          M.get_name (| "data" |),
                          Some (Value.Integer 30)
                        |)
                      ]
                    |)
                  ]
                |),
                Value.Integer 0x100
              |),
              M.bin_op (|
                "*",
                M.call (|
                  Ty.path "uint",
                  [
                    M.call (|
                      Ty.path "uint8",
                      [
                        M.index_access (|
                          M.get_name (| "data" |),
                          Some (Value.Integer 31)
                        |)
                      ]
                    |)
                  ]
                |),
                Value.Integer 0x10
              |)
            |),
            M.call (|
              Ty.path "uint",
              [
                M.call (|
                  Ty.path "uint8",
                  [
                    M.index_access (|
                      M.get_name (| "data" |),
                      Some (Value.Integer 32)
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
