(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 2)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          Value.Array [
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |),
          Value.String "12345"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            Ty.path "uint256",
            [
              M.call (|
                Ty.path "uint8",
                [
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "data" |),
                      Some (Value.Integer 0)
                    |),
                    Some (Value.Integer 4)
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
