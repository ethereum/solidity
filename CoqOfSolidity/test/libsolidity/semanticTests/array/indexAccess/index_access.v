(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition to_little_endian_64 (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret" |),
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 8
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "bytesValue" ],
          M.call (|
            Ty.path "bytes8",
            [
              M.get_name (| "value" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 0)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 7)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 1)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 6)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 2)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 5)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 3)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 4)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 4)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 3)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 5)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 2)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 6)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 1)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "ret" |),
            Some (Value.Integer 7)
          |),
          M.index_access (|
            M.get_name (| "bytesValue" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
