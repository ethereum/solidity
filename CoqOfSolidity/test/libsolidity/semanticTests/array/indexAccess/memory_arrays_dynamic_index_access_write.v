(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition data : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 2)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 3)
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<",
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 1)
              |),
              "length"
            |),
            Value.Integer 4
          |),
          M.call (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 1)
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.call (|
              M.get_name (| "set" |),
              [
                M.get_name (| "data" |)
              ]
            |),
            Some (Value.Integer 1)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
