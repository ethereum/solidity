(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [n, k] =>
      let _ :=
        M.define (|
          [ "rows" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") None) None
,
            [
              M.bin_op (|
                "+",
                M.get_name (| "n" |),
                Value.Integer 1
              |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 1
          |),
          M.bin_op (|
            "<=",
            M.get_name (| "i" |),
            M.get_name (| "n" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "rows" |),
                Some (M.get_name (| "i" |))
              |),
              M.call (|
                NewExpression Ty.array (Ty.path "uint256") None
,
                [
                  M.get_name (| "i" |)
                ]
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "rows" |),
                  Some (M.get_name (| "i" |))
                |),
                Some (Value.Integer 0)
              |),
              M.assign (|
                "=",
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "rows" |),
                    Some (M.get_name (| "i" |))
                  |),
                  Some (M.bin_op (|
                    "-",
                    M.member_access (|
                      M.index_access (|
                        M.get_name (| "rows" |),
                        Some (M.get_name (| "i" |))
                      |),
                      "length"
                    |),
                    Value.Integer 1
                  |))
                |),
                Value.Integer 1
              |)
            |) in
          let _ :=
            M.for_ (|
              M.define (|
                [ "j" ],
                Value.Integer 1
              |),
              M.bin_op (|
                "<",
                M.get_name (| "j" |),
                M.bin_op (|
                  "-",
                  M.get_name (| "i" |),
                  Value.Integer 1
                |)
              |),
              M.un_op (|
                false,
                "++",
                M.get_name (| "j" |)
              |),
              M.assign (|
                "=",
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "rows" |),
                    Some (M.get_name (| "i" |))
                  |),
                  Some (M.get_name (| "j" |))
                |),
                M.bin_op (|
                  "+",
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "rows" |),
                      Some (M.bin_op (|
                        "-",
                        M.get_name (| "i" |),
                        Value.Integer 1
                      |))
                    |),
                    Some (M.bin_op (|
                      "-",
                      M.get_name (| "j" |),
                      Value.Integer 1
                    |))
                  |),
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "rows" |),
                      Some (M.bin_op (|
                        "-",
                        M.get_name (| "i" |),
                        Value.Integer 1
                      |))
                    |),
                    Some (M.get_name (| "j" |))
                  |)
                |)
              |)
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "rows" |),
              Some (M.get_name (| "n" |))
            |),
            Some (M.bin_op (|
              "-",
              M.get_name (| "k" |),
              Value.Integer 1
            |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
