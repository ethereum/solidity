(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  (* Struct S *)

  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "s" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "b"
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "c"
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "d"
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint16") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "d"
            |),
            Some (Value.Integer 2)
          |),
          Value.Integer 5
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            M.get_name (| "s" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 0)
              |),
              "a"
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (Value.Integer 0)
              |),
              "b"
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 0)
                |),
                "c"
              |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "data" |),
                  Some (Value.Integer 0)
                |),
                "d"
              |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
