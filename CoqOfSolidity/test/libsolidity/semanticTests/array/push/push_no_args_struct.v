(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition array : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [y] =>
      let _ :=
        M.define (|
          [ "s" ],
          M.call (|
            M.member_access (|
              M.get_name (| "array" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "g" |),
          [
            M.get_name (| "s" |),
            M.get_name (| "y" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [s, y] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "x"
          |),
          M.get_name (| "y" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [y] =>
      let _ :=
        M.call (|
          M.get_name (| "g" |),
          [
            M.call (|
              M.member_access (|
                M.get_name (| "array" |),
                "push"
              |),
              []
            |),
            M.get_name (| "y" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition lv (α : list Value.t) : M :=
    match α with
    | [y] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.member_access (|
                M.get_name (| "array" |),
                "push"
              |),
              []
            |),
            "x"
          |),
          M.get_name (| "y" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a (α : list Value.t) : M :=
    match α with
    | [i] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "array" |),
              Some (M.get_name (| "i" |))
            |),
            "x"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition l (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "array" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
