(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 0x05
          ]
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |),
          Value.Integer 1
        |) then
          M.return_ (|
            Value.Bool true
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0x05
        |) then
          M.return_ (|
            Value.Bool true
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 0x04
          ]
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x04
        |) then
          M.return_ (|
            Value.Bool true
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            Value.Integer 0x03
          ]
        |) in
      let _ :=
        M.define (|
          [ "l" ],
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 0x03
        |) then
          M.return_ (|
            Value.Bool true
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "l" |),
          Value.Integer 0x03
        |) then
          M.return_ (|
            Value.Bool true
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
