(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition array2d : Value.t :=
    undefined.

  Definition l (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "array2d" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition ll (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "array2d" |),
              Some (M.get_name (| "index" |))
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition a (α : list Value.t) : M :=
    match α with
    | [i, j] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "array2d" |),
              Some (M.get_name (| "i" |))
            |),
            Some (M.get_name (| "j" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [index, value] =>
      let _ :=
        M.define (|
          [ "pointer" ],
          M.call (|
            M.member_access (|
              M.get_name (| "array2d" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<=",
            M.get_name (| "i" |),
            M.get_name (| "index" |)
          |),
          M.un_op (|
            true,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "pointer" |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "pointer" |),
            Some (M.get_name (| "index" |))
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition lv (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.assign (|
          "=",
          M.call (|
            M.member_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "array2d" |),
                  "push"
                |),
                []
              |),
              "push"
            |),
            []
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
