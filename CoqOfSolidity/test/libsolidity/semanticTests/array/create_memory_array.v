(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 200
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 199)
          |),
          Value.String "A"
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") (Some (Value.Integer 2))) None
,
            [
              Value.Integer 300
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 203)
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 8
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            NewExpression Ty.array (Ty.path "S") None
,
            [
              Value.Integer 180
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "z" |),
                Some (Value.Integer 170)
              |),
              "a"
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "z" |),
              Some (Value.Integer 170)
            |),
            "b"
          |),
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 102
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "z" |),
                Some (Value.Integer 170)
              |),
              "b"
            |),
            Some (Value.Integer 99)
          |),
          Value.String "B"
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 199)
            |),
            M.index_access (|
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 203)
              |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "z" |),
                  Some (Value.Integer 170)
                |),
                "a"
              |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "z" |),
                  Some (Value.Integer 170)
                |),
                "b"
              |),
              Some (Value.Integer 99)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
