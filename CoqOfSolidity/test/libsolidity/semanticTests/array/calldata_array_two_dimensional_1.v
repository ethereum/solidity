(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "a" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [a, i] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "a" |),
              Some (M.get_name (| "i" |))
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [a, i, j] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "a" |),
              Some (M.get_name (| "i" |))
            |),
            Some (M.get_name (| "j" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition reenc (α : list Value.t) : M :=
    match α with
    | [a, i, j] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "test"
            |),
            [
              M.get_name (| "a" |),
              M.get_name (| "i" |),
              M.get_name (| "j" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
