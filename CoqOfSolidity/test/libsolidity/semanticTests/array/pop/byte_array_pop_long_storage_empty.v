(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<=",
            M.get_name (| "i" |),
            Value.Integer 40
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "data" |),
              "push"
            |),
            [
              M.call (|
                Ty.path "bytes1",
                [
                  M.bin_op (|
                    "+",
                    M.get_name (| "i" |),
                    Value.Integer 1
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "j" ],
            Value.Integer 40
          |),
          M.bin_op (|
            ">=",
            M.get_name (| "j" |),
            Value.Integer 0
          |),
          M.un_op (|
            false,
            "--",
            M.get_name (| "j" |)
          |),
          let _ :=
            M.call (|
              M.get_name (| "require" |),
              [
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.get_name (| "data" |),
                    Some (M.call (|
                      Ty.path "uint8",
                      [
                        M.get_name (| "j" |)
                      ]
                    |))
                  |),
                  M.call (|
                    Ty.path "bytes1",
                    [
                      M.call (|
                        Ty.path "uint8",
                        [
                          M.bin_op (|
                            "+",
                            M.get_name (| "j" |),
                            Value.Integer 1
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              ]
            |) in
          let _ :=
            M.call (|
              M.get_name (| "require" |),
              [
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.get_name (| "data" |),
                    "length"
                  |),
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.bin_op (|
                        "+",
                        M.get_name (| "j" |),
                        Value.Integer 1
                      |)
                    ]
                  |)
                |)
              ]
            |) in
          let _ :=
            M.call (|
              M.member_access (|
                M.get_name (| "data" |),
                "pop"
              |),
              []
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
