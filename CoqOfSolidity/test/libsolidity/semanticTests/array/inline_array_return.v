(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition tester : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            Value.Array [
              Value.Integer 1,
              Value.Integer 2,
              Value.Integer 3,
              Value.Integer 4,
              Value.Integer 5
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "tester" |),
          M.call (|
            M.get_name (| "f" |),
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "tester" |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.get_name (| "tester" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "tester" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "tester" |),
              Some (Value.Integer 3)
            |),
            M.index_access (|
              M.get_name (| "tester" |),
              Some (Value.Integer 4)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
