(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") None) None
,
            [
              Value.Integer 42
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (Value.Integer 4)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 4)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 4)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "x" |),
                  Some (Value.Integer 10)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 10)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 10)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 44
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "uint256") None) None
,
            [
              Value.Integer 24
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "y" |),
                  Some (Value.Integer 0)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "y" |),
                  Some (Value.Integer 4)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 4)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 4)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.get_name (| "y" |),
                  Some (Value.Integer 10)
                |),
                "length"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 10)
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "y" |),
              Some (Value.Integer 10)
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 88
        |) in
      let _ :=
        if M.bin_op (|
          "&&",
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "x" |),
                      Some (Value.Integer 0)
                    |),
                    Some (Value.Integer 0)
                  |),
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "y" |),
                      Some (Value.Integer 0)
                    |),
                    Some (Value.Integer 0)
                  |)
                |)
              ],
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "x" |),
                      Some (Value.Integer 4)
                    |),
                    Some (Value.Integer 0)
                  |),
                  M.index_access (|
                    M.index_access (|
                      M.get_name (| "y" |),
                      Some (Value.Integer 4)
                    |),
                    Some (Value.Integer 0)
                  |)
                |)
              ]
            |),
            Value.Tuple [
              M.bin_op (|
                "==",
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "x" |),
                    Some (Value.Integer 10)
                  |),
                  Some (Value.Integer 0)
                |),
                Value.Integer 44
              |)
            ]
          |),
          Value.Tuple [
            M.bin_op (|
              "==",
              M.index_access (|
                M.index_access (|
                  M.get_name (| "y" |),
                  Some (Value.Integer 10)
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 88
            |)
          ]
        |) then
          M.return_ (|
            Value.Integer 7
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
