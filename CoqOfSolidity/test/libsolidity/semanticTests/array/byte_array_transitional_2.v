(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 33
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.call (|
              M.member_access (|
                M.get_name (| "data" |),
                "push"
              |),
              [
                M.call (|
                  Ty.path "bytes1",
                  [
                    M.get_name (| "i" |)
                  ]
                |)
              ]
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          if M.bin_op (|
            "!=",
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes1",
              [
                M.get_name (| "i" |)
              ]
            |)
          |) then
            M.return_ (|
              M.get_name (| "i" |)
            |)
          else
            Value.Tuple []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "pop"
          |),
          []
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          if M.bin_op (|
            "!=",
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "i" |))
            |),
            M.call (|
              Ty.path "bytes1",
              [
                M.get_name (| "i" |)
              ]
            |)
          |) then
            M.return_ (|
              M.get_name (| "i" |)
            |)
          else
            Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
