(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f1 (α : list Value.t) : M :=
    match α with
    | [c1, s, e, c2] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.call (|
              M.get_name (| "keccak256" |),
              [
                IndexRangeAccess M.get_name (| "c1" |) M.get_name (| "s" |) M.get_name (| "e" |)

              ]
            |),
            M.call (|
              M.get_name (| "keccak256" |),
              [
                M.get_name (| "c2" |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [c, s] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              IndexRangeAccess M.get_name (| "c" |) M.get_name (| "s" |) 
,
              Value.Tuple [
                Ty.path "uint256",
                Ty.path "bytes"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [c1, s, e, c2] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              IndexRangeAccess M.get_name (| "c1" |) M.get_name (| "s" |) M.get_name (| "e" |)

            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.get_name (| "c2" |)
            ]
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "a" |),
            "length"
          |),
          M.member_access (|
            M.get_name (| "b" |),
            "length"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool false
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "a" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            if M.bin_op (|
              "!=",
              M.index_access (|
                M.get_name (| "a" |),
                Some (M.get_name (| "i" |))
              |),
              M.index_access (|
                M.get_name (| "b" |),
                Some (M.get_name (| "i" |))
              |)
            |) then
              let _ :=
                M.return_ (|
                  Value.Bool false
                |) in
              Value.Tuple []
            else
              Value.Tuple [] in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [c1, s, e, c2] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              IndexRangeAccess M.get_name (| "c1" |) M.get_name (| "s" |) M.get_name (| "e" |)

            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodePacked"
            |),
            [
              M.get_name (| "c2" |)
            ]
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "a" |),
            "length"
          |),
          M.member_access (|
            M.get_name (| "b" |),
            "length"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool false
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "a" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            if M.bin_op (|
              "!=",
              M.index_access (|
                M.get_name (| "a" |),
                Some (M.get_name (| "i" |))
              |),
              M.index_access (|
                M.get_name (| "b" |),
                Some (M.get_name (| "i" |))
              |)
            |) then
              let _ :=
                M.return_ (|
                  Value.Bool false
                |) in
              Value.Tuple []
            else
              Value.Tuple [] in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
