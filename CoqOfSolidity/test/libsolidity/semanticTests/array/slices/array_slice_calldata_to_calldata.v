(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.return_ (|
          M.get_name (| "c" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [c, s, e] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "f" |),
            [
              IndexRangeAccess M.get_name (| "c" |) M.get_name (| "s" |) M.get_name (| "e" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [c] =>
      let _ :=
        M.return_ (|
          M.get_name (| "c" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g1 (α : list Value.t) : M :=
    match α with
    | [c, s, e] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "f1" |),
            [
              IndexRangeAccess M.get_name (| "c" |) M.get_name (| "s" |) M.get_name (| "e" |)

            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
