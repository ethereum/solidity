(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x, s, e] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.index_access (|
                Ty.path "uint256",
                None
              |),
              [
                IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) M.get_name (| "e" |)

              ]
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x, s, e, ss, ee] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.index_access (|
                Ty.path "uint256",
                None
              |),
              [
                IndexRangeAccess IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) M.get_name (| "e" |)
 M.get_name (| "ss" |) M.get_name (| "ee" |)

              ]
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f_s_only (α : list Value.t) : M :=
    match α with
    | [x, s] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.index_access (|
                Ty.path "uint256",
                None
              |),
              [
                IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) 

              ]
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f_e_only (α : list Value.t) : M :=
    match α with
    | [x, e] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.index_access (|
                Ty.path "uint256",
                None
              |),
              [
                IndexRangeAccess M.get_name (| "x" |)  M.get_name (| "e" |)

              ]
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [x, s, e, idx] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.call (|
              M.index_access (|
                Ty.path "uint256",
                None
              |),
              [
                IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) M.get_name (| "e" |)

              ]
            |),
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition gg (α : list Value.t) : M :=
    match α with
    | [x, s, e, idx] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) M.get_name (| "e" |)
,
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition gg_s_only (α : list Value.t) : M :=
    match α with
    | [x, s, idx] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            IndexRangeAccess M.get_name (| "x" |) M.get_name (| "s" |) 
,
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition gg_e_only (α : list Value.t) : M :=
    match α with
    | [x, e, idx] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            IndexRangeAccess M.get_name (| "x" |)  M.get_name (| "e" |)
,
            Some (M.get_name (| "idx" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
