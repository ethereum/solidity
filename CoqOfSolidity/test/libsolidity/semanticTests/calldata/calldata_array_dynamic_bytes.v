(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f1 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 0)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 0)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "b" |),
                Some (Value.Integer 0)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "b" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "b" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g1 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 0)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 1)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g2 (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
        M.return_ (|
          Value.Array [
            M.member_access (|
              M.get_name (| "a" |),
              "length"
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 0)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 0)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "a" |),
                Some (Value.Integer 1)
              |),
              "length"
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 1)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "a" |),
                    Some (Value.Integer 1)
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
