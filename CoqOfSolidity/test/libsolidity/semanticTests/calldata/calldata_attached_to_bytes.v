(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Library *)
Module L.
  Definition reverse (α : list Value.t) : M :=
    match α with
    | [_b] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "_b" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "_b" |),
              Some (Value.Integer 0)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingLibrary (|
      Some (Ty.path "bytes"),
      UsingKind.Local,
      "L"
    |).

  Definition test (α : list Value.t) : M :=
    match α with
    | [_, _b, _] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "_b" |),
              "reverse"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
