(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  Definition set (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition checkIfDataIsEmpty (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sendMessage (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "emptyData" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "call"
            |),
            [
              M.get_name (| "emptyData" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "data" |),
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition data : Value.t :=
    undefined.
End c.
