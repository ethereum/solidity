(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "x" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "l1" |),
          M.member_access (|
            M.get_name (| "x" |),
            "length"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "l1" |),
          Value.Integer 0
        |) then
          M.assign (|
            "=",
            M.get_name (| "l2" |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 0)
              |),
              "length"
            |)
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "l1" |),
          Value.Integer 1
        |) then
          M.assign (|
            "=",
            M.get_name (| "l3" |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "x" |),
                Some (Value.Integer 1)
              |),
              "length"
            |)
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "x" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
