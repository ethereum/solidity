(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_a, _b, _c] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "+",
              M.bin_op (|
                "+",
                M.member_access (|
                  M.get_name (| "_a" |),
                  "length"
                |),
                M.member_access (|
                  M.get_name (| "_b" |),
                  "length"
                |)
              |),
              M.member_access (|
                M.get_name (| "_c" |),
                "length"
              |)
            |),
            M.index_access (|
              M.get_name (| "_a" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "_b" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "_c" |),
              Some (Value.Integer 1)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              Value.Integer 7
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x08
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x09
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "z" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 0x0a
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "x" |),
              M.get_name (| "y" |),
              M.get_name (| "z" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
