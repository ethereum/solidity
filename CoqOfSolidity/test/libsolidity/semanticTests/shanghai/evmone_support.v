(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module ShortReturn.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 3
src: 51:150:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ShortReturn.


(* Interface *)
Module DoesItReturnZero.
  Definition foo (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End DoesItReturnZero.


(* Contract *)
Module Test.
  Definition shortReturn : Value.t :=
    M.call (|
      NewExpression Ty.path "ShortReturn"
,
      []
    |).

  Definition bytecode (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "shortReturn" |)
              ]
            |),
            "code"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition isPush0Supported (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.member_access (|
                  M.call (|
                    M.get_name (| "DoesItReturnZero" |),
                    [
                      M.call (|
                        Ty.path "address",
                        [
                          M.get_name (| "shortReturn" |)
                        ]
                      |)
                    ]
                  |),
                  "foo"
                |),
                []
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
