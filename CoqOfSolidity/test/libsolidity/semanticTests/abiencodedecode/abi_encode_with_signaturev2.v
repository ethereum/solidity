(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f0 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "f(uint256)"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "f(uint256)"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "x" |),
              Value.String "abc"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition xstor : Value.t :=
    undefined.

  Definition f1s (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "xstor" |),
          Value.String "f(uint256)"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "xstor" |),
              Value.String "abc"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 1)
          |),
          M.bin_op (|
            "-",
            M.member_access (|
              M.call (|
                M.get_name (| "type" |),
                [
                  Ty.path "uint"
                ]
              |),
              "max"
            |),
            Value.Integer 1
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 2)
          |),
          M.bin_op (|
            "-",
            M.member_access (|
              M.call (|
                M.get_name (| "type" |),
                [
                  Ty.path "uint"
                ]
              |),
              "max"
            |),
            Value.Integer 2
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 3)
          |),
          M.bin_op (|
            "-",
            M.member_access (|
              M.call (|
                M.get_name (| "type" |),
                [
                  Ty.path "uint"
                ]
              |),
              "max"
            |),
            Value.Integer 3
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ar" |),
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Struct S *)

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "s" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 0x1234567
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "b"
          |),
          Value.String "Lorem ipsum dolor sit ethereum........"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "c"
          |),
          Value.Integer 0x1234
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.member_access (|
                M.get_name (| "s" |),
                "b"
              |),
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    Ty.path "uint"
                  ]
                |),
                "max"
              |),
              M.get_name (| "s" |),
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 3
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
