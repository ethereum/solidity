(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f0 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSelector"
            |),
            [
              Value.Integer 0x12345678
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSelector"
            |),
            [
              Value.Integer 0x12345678,
              Value.String "abc"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 0x12345678
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSelector"
            |),
            [
              M.get_name (| "x" |),
              Value.String "abc"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 0x12345678
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSelector"
            |),
            [
              M.get_name (| "x" |),
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    Ty.path "uint"
                  ]
                |),
                "max"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Struct S *)

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 0x12345678
        |) in
      let _ :=
        M.define (|
          [ "s" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 0x1234567
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "b"
          |),
          Value.String "Lorem ipsum dolor sit ethereum........"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "c"
          |),
          Value.Integer 0x1234
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSelector"
            |),
            [
              M.get_name (| "x" |),
              M.member_access (|
                M.call (|
                  M.get_name (| "type" |),
                  [
                    Ty.path "uint"
                  ]
                |),
                "max"
              |),
              M.get_name (| "s" |),
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 3
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
