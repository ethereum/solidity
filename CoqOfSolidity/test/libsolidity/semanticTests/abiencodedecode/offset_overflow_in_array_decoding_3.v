(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module Test.
  (* Struct MemoryUint *)

  Definition test (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "before" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "corrupt" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 32
                ]
              |),
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80
                ]
              |),
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "afterCorrupt" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "afterCorrupt" |),
            "field"
          |),
          M.call (|
            Ty.path "uint",
            [
              Value.Integer 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "before" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 123456
        |) in
      let _ :=
        M.define (|
          [ "decoded" ],
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "corrupt" |),
              Value.Tuple [
                M.index_access (|
                  M.index_access (|
                    Ty.path "uint",
                    None
                  |),
                  Some (Value.Integer 2)
                |)
              ]
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "decoded" |),
              Some (Value.Integer 1)
            |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
