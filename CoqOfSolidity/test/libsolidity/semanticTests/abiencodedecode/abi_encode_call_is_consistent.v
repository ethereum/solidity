(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition sideEffectRan : Value.t :=
    Value.Bool false.

  Definition fPointer : Value.t :=
    undefined.

  Definition fExternal (α : list Value.t) : M :=
    match α with
    | [p, t] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition xstor : Value.t :=
    undefined.

  Definition getExternalFunctionPointer (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "sideEffectRan" |),
          Value.Bool true
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "this" |),
            "fExternal"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromLiteral (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "fExternal(uint256,string)",
              Value.Integer 1,
              Value.String "123"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromLiteralCall (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "fExternal"
              |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "123"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromMemory (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "fExternal(uint256,string)"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "x" |),
              Value.Integer 1,
              Value.String "123"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromMemoryCall (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "fExternal"
              |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "123"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromMemorys (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "xstor" |),
          Value.String "fExternal(uint256,string)"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              M.get_name (| "xstor" |),
              Value.Integer 1,
              Value.String "123"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fPointerCall (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "fPointer" |),
          M.member_access (|
            M.get_name (| "this" |),
            "fExternal"
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.get_name (| "fPointer" |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "123"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fLocalPointerCall (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "localFunctionPointer" ],
          M.member_access (|
            M.get_name (| "this" |),
            "fExternal"
          |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.get_name (| "localFunctionPointer" |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "123"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fReturnedFunctionPointer (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.call (|
                M.get_name (| "getExternalFunctionPointer" |),
                []
              |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "123"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition assertConsistentSelectors (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteral" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteralCall" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromMemory" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromMemoryCall" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromMemoryCall" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromMemorys" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fPointerCall" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteral" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fLocalPointerCall" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteral" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fReturnedFunctionPointer" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteral" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
