(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition sideEffectRan : Value.t :=
    Value.Bool false.

  Definition fNoArgs (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fArray (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fUint (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromLiteralNoArgs (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "fNoArgs()"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fPointerNoArgs (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "fNoArgs"
              |),
              Value.Tuple [
                
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromLiteralArray (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "fArray(uint256[])",
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fPointerArray (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "fArray"
              |),
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fSignatureFromLiteralUint (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeWithSignature"
            |),
            [
              Value.String "fUint(uint256,uint256)",
              Value.Integer 12,
              Value.Integer 13
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fPointerUint (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "fUint"
              |),
              Value.Tuple [
                Value.Integer 12,
                Value.Integer 13
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition assertConsistentSelectors (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteralNoArgs" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fPointerNoArgs" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteralArray" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fPointerArray" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fSignatureFromLiteralUint" |),
                    []
                  |)
                ]
              |),
              M.call (|
                M.get_name (| "keccak256" |),
                [
                  M.call (|
                    M.get_name (| "fPointerUint" |),
                    []
                  |)
                ]
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
