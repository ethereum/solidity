(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module X.
  Definition a (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End X.


(* Contract *)
Module Base.
  Definition a (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            Value.Integer 1
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "success" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "success" |),
            M.get_name (| "result" |)
          ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "X" |),
                    "a"
                  |),
                  Value.Integer 1
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "&&",
              M.get_name (| "success" |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "result" |),
                  "length"
                |),
                Value.Integer 32
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "result" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "r" |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "success" |),
            M.get_name (| "result" |)
          ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "X" |),
                    "b"
                  |),
                  Value.Integer 10
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "&&",
              M.get_name (| "success" |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "result" |),
                  "length"
                |),
                Value.Integer 32
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "result" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "r" |),
              Value.Integer 13
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "success" |),
            M.get_name (| "result" |)
          ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "Base" |),
                    "a"
                  |),
                  Value.Integer 100
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "&&",
              M.get_name (| "success" |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "result" |),
                  "length"
                |),
                Value.Integer 32
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "result" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "r" |),
              Value.Integer 114
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "success" |),
            M.get_name (| "result" |)
          ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "this" |),
                    "a"
                  |),
                  Value.Integer 1000
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "&&",
              M.get_name (| "success" |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "result" |),
                  "length"
                |),
                Value.Integer 32
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "result" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "r" |),
              Value.Integer 1115
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "success" |),
            M.get_name (| "result" |)
          ],
          M.call (|
            M.member_access (|
              M.call (|
                Ty.path "address",
                [
                  M.get_name (| "this" |)
                ]
              |),
              "staticcall"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "C" |),
                    "b"
                  |),
                  Value.Integer 10000
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "&&",
              M.get_name (| "success" |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "result" |),
                  "length"
                |),
                Value.Integer 32
              |)
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "decode"
            |),
            [
              M.get_name (| "result" |),
              Value.Tuple [
                Ty.path "uint"
              ]
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "r" |),
              Value.Integer 11116
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "r" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "a"
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
