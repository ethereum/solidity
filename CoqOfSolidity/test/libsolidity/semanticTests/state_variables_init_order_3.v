(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition a : Value.t :=
    Value.Integer 42.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.bin_op (|
            "*",
            M.get_name (| "x" |),
            Value.Integer 3
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 23
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.


(* Contract *)
Module B.
  Definition d : Value.t :=
    M.call (|
      M.get_name (| "f" |),
      [
        M.get_name (| "a" |)
      ]
    |).

  Definition e : Value.t :=
    M.get_name (| "b" |).

  Definition b_a : Value.t :=
    undefined.

  Definition b_b : Value.t :=
    undefined.

  Definition b_c : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b_a" |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b_b" |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b_c" |),
          M.get_name (| "c" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.
