(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct T *)

  Definition flags : Value.t :=
    undefined.

  Definition r (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            Value.Bool true,
            Value.Bool false,
            Value.Bool true
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            Value.Array [
              M.call (|
                Ty.path "uint",
                [
                  Value.Integer 123
                ]
              |),
              Value.Integer 456
            ],
            Value.Integer 789
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition u (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            M.call (|
              M.get_name (| "T" |),
              [
                Value.Integer 23,
                Value.Integer 42,
                Value.String "any"
              ]
            |),
            M.call (|
              M.get_name (| "T" |),
              [
                Value.Integer 555,
                Value.Integer 666,
                Value.String "any"
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition v (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "flags" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition w1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            Value.String "any"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition w2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            Value.String "any",
            Value.String "any"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition w3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Array [
            Value.String "any",
            Value.String "any",
            Value.String "any"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition x (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            Value.Array [
              Value.String "any",
              Value.String "any"
            ],
            Value.Array [
              Value.String "any",
              Value.String "any",
              Value.String "any"
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
