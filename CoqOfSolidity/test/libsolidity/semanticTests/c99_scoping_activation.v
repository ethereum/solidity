(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 7
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 3
          |) in
        let _ :=
          M.define (|
            [ "x" ],
            Value.Default
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 4
          |) in
        Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 7
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 3
          |) in
        let _ :=
          M.define (|
            [ "x" ],
            Value.Default
          |) in
        let _ :=
          M.return_ (|
            M.get_name (| "x" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 7
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 3
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "a" |),
            M.get_name (| "x" |)
          |) in
        let _ :=
          M.define (|
            [ "x" ],
            Value.Integer 4
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "b" |),
            M.get_name (| "x" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 7
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "x" |),
            Value.Integer 3
          |) in
        let _ :=
          M.define (|
            [ "x" ],
            M.get_name (| "x" |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "a" |),
            M.get_name (| "x" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
