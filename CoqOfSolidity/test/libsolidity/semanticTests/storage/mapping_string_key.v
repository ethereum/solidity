(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition m_nameToRecord : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [key, value] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m_nameToRecord" |),
            Some (M.get_name (| "key" |))
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get (α : list Value.t) : M :=
    match α with
    | [key] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m_nameToRecord" |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setFixed (α : list Value.t) : M :=
    match α with
    | [value] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m_nameToRecord" |),
            Some (Value.String "fixed")
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getFixed (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m_nameToRecord" |),
            Some (Value.String "fixed")
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
