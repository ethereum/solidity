(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition a : Value.t :=
    undefined.

  Definition n1 (α : list Value.t) : M :=
    match α with
    | [key, value] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.index_access (|
            M.get_name (| "a" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 1
            |))
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "b" |),
                  "length"
                |),
                Value.Integer 1
              |))
            |),
            Some (M.get_name (| "key" |))
          |),
          M.get_name (| "value" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition n2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "push"
          |),
          []
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.index_access (|
            M.get_name (| "a" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 1
            |))
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "b" |),
            "push"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition map (α : list Value.t) : M :=
    match α with
    | [key] =>
      let _ :=
        M.define (|
          [ "b" ],
          M.index_access (|
            M.get_name (| "a" |),
            Some (M.bin_op (|
              "-",
              M.member_access (|
                M.get_name (| "a" |),
                "length"
              |),
              Value.Integer 1
            |))
          |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.index_access (|
              M.get_name (| "b" |),
              Some (M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "b" |),
                  "length"
                |),
                Value.Integer 1
              |))
            |),
            Some (M.get_name (| "key" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition p (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "a" |),
            "pop"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition d (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "a" |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
