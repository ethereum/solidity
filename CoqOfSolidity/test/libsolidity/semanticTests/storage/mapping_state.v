(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Ballot.
  Definition canVote : Value.t :=
    undefined.

  Definition voteCount : Value.t :=
    undefined.

  Definition voted : Value.t :=
    undefined.

  Definition getVoteCount (α : list Value.t) : M :=
    match α with
    | [addr] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "voteCount" |),
            Some (M.get_name (| "addr" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition grantVoteRight (α : list Value.t) : M :=
    match α with
    | [addr] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "canVote" |),
            Some (M.get_name (| "addr" |))
          |),
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition vote (α : list Value.t) : M :=
    match α with
    | [voter, vote] =>
      let _ :=
        if M.bin_op (|
          "||",
          M.un_op (|
            true,
            "!",
            M.index_access (|
              M.get_name (| "canVote" |),
              Some (M.get_name (| "voter" |))
            |)
          |),
          M.index_access (|
            M.get_name (| "voted" |),
            Some (M.get_name (| "voter" |))
          |)
        |) then
          M.return_ (|
            Value.Bool false
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "voted" |),
            Some (M.get_name (| "voter" |))
          |),
          Value.Bool true
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "voteCount" |),
            Some (M.get_name (| "vote" |))
          |),
          M.bin_op (|
            "+",
            M.index_access (|
              M.get_name (| "voteCount" |),
              Some (M.get_name (| "vote" |))
            |),
            Value.Integer 1
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Ballot.
