(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition a : Value.t :=
    undefined.

  Definition b : Value.t :=
    undefined.

  Definition c : Value.t :=
    undefined.

  Definition d : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.un_op (|
            true,
            "-",
            Value.Integer 2
          |)
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "b" |),
            M.bin_op (|
              "*",
              Value.Tuple [
                M.bin_op (|
                  "-",
                  Value.Integer 0,
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.get_name (| "a" |)
                    ]
                  |)
                |)
              ],
              Value.Integer 2
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.bin_op (|
              "*",
              M.bin_op (|
                "*",
                M.get_name (| "a" |),
                M.call (|
                  Ty.path "int8",
                  [
                    Value.Integer 120
                  ]
                |)
              |),
              M.call (|
                Ty.path "int8",
                [
                  Value.Integer 121
                ]
              |)
            |)
          |) in
        Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x1" |),
          M.call (|
            Ty.path "uint256",
            [
              M.call (|
                Ty.path "int256",
                [
                  M.get_name (| "a" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x2" |),
          M.get_name (| "b" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x3" |),
          M.call (|
            Ty.path "uint256",
            [
              M.call (|
                Ty.path "int256",
                [
                  M.get_name (| "c" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x4" |),
          M.get_name (| "d" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
