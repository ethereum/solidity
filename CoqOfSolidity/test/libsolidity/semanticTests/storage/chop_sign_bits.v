(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition x : Value.t :=
    Value.Array [
      M.un_op (|
        true,
        "-",
        Value.Integer 1
      |),
      M.un_op (|
        true,
        "-",
        Value.Integer 2
      |)
    ].

  Definition y : Value.t :=
    Value.Array [
      M.un_op (|
        true,
        "-",
        Value.Integer 5
      |),
      M.un_op (|
        true,
        "-",
        Value.Integer 6
      |)
    ].

  Definition z : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "t" ],
          M.call (|
            NewExpression Ty.array (Ty.path "int8") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "t" |),
            Some (Value.Integer 0)
          |),
          M.un_op (|
            true,
            "-",
            Value.Integer 3
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "t" |),
            Some (Value.Integer 1)
          |),
          M.un_op (|
            true,
            "-",
            Value.Integer 4
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "t" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "t" ],
          Value.Array [
            M.un_op (|
              true,
              "-",
              Value.Integer 3
            |),
            M.un_op (|
              true,
              "-",
              Value.Integer 4
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.get_name (| "t" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "y" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [t] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "z" |),
          M.get_name (| "t" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "z" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
