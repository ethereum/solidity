(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition value1 : Value.t :=
    undefined.

  Definition value2 : Value.t :=
    undefined.

  Definition get (α : list Value.t) : M :=
    match α with
    | [which] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "which" |),
          Value.Integer 0
        |) then
          M.return_ (|
            M.get_name (| "value1" |)
          |)
        else
          M.return_ (|
            M.get_name (| "value2" |)
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set (α : list Value.t) : M :=
    match α with
    | [which, value] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "which" |),
          Value.Integer 0
        |) then
          M.assign (|
            "=",
            M.get_name (| "value1" |),
            M.get_name (| "value" |)
          |)
        else
          M.assign (|
            "=",
            M.get_name (| "value2" |),
            M.get_name (| "value" |)
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
