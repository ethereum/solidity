(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct s1 *)

  (* Struct s2 *)

  Definition x : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 0x01
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "a"
          |),
          Value.Integer 0x02
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "inner"
            |),
            "a"
          |),
          Value.Integer 0x03
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "inner"
            |),
            "b"
          |),
          Value.Integer 0x04
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "inner"
            |),
            "c"
          |),
          Value.String "1234567890"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "inner"
            |),
            "d"
          |),
          Value.String "123456789"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "inner"
            |),
            "e"
          |),
          Value.String "abcdefghij"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "b"
          |),
          Value.Integer 0x05
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "c"
          |),
          M.call (|
            Ty.path "bytes1",
            [
              Value.Integer 0x06
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          Value.Integer 0x07
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              M.bin_op (|
                "&&",
                M.bin_op (|
                  "&&",
                  M.bin_op (|
                    "&&",
                    M.bin_op (|
                      "&&",
                      M.bin_op (|
                        "&&",
                        M.bin_op (|
                          "&&",
                          M.bin_op (|
                            "&&",
                            M.bin_op (|
                              "==",
                              M.get_name (| "x" |),
                              Value.Integer 0x01
                            |),
                            M.bin_op (|
                              "==",
                              M.member_access (|
                                M.get_name (| "data" |),
                                "a"
                              |),
                              Value.Integer 0x02
                            |)
                          |),
                          M.bin_op (|
                            "==",
                            M.member_access (|
                              M.member_access (|
                                M.get_name (| "data" |),
                                "inner"
                              |),
                              "a"
                            |),
                            Value.Integer 0x03
                          |)
                        |),
                        M.bin_op (|
                          "==",
                          M.member_access (|
                            M.member_access (|
                              M.get_name (| "data" |),
                              "inner"
                            |),
                            "b"
                          |),
                          Value.Integer 0x04
                        |)
                      |),
                      M.bin_op (|
                        "==",
                        M.member_access (|
                          M.member_access (|
                            M.get_name (| "data" |),
                            "inner"
                          |),
                          "c"
                        |),
                        Value.String "1234567890"
                      |)
                    |),
                    M.bin_op (|
                      "==",
                      M.member_access (|
                        M.member_access (|
                          M.get_name (| "data" |),
                          "inner"
                        |),
                        "d"
                      |),
                      Value.String "123456789"
                    |)
                  |),
                  M.bin_op (|
                    "==",
                    M.member_access (|
                      M.member_access (|
                        M.get_name (| "data" |),
                        "inner"
                      |),
                      "e"
                    |),
                    Value.String "abcdefghij"
                  |)
                |),
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.get_name (| "data" |),
                    "b"
                  |),
                  Value.Integer 0x05
                |)
              |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "data" |),
                  "c"
                |),
                M.call (|
                  Ty.path "bytes1",
                  [
                    Value.Integer 0x06
                  ]
                |)
              |)
            |),
            M.bin_op (|
              "==",
              M.get_name (| "y" |),
              Value.Integer 0x07
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
