(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Array [
            Value.Integer 4,
            Value.Integer 11,
            Value.Integer 0x111,
            M.call (|
              Ty.path "uint",
              [
                Value.Integer 3355443
              ]
            |),
            Value.Integer 2222222222222222222
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Array [
            Value.Integer 16,
            Value.Integer 256,
            Value.Integer 257,
            M.call (|
              Ty.path "uint",
              [
                Value.Integer 0x333333
              ]
            |),
            Value.Integer 0x1ed6eb565788e38e
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
