(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition x : Value.t :=
    Value.Integer 0.

  (* Beginning of a node! *)
id: 28
src: 149:158:0
nodeType: ModifierDefinition
name: alwaysZeros
nameLocation: 158:11:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition a : Value.t :=
      undefined.;
Definition b : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    M.un_op (|
      false,
      "++",
      M.get_name (| "x" |)
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 12
src: 215:1:0
nodeType: PlaceholderStatement
 in
  let _ :=
    M.call (|
      M.get_name (| "require" |),
      [
        M.bin_op (|
          "==",
          M.get_name (| "a" |),
          Value.Integer 0
        |),
        Value.String "a is not zero"
      ]
    |) in
  let _ :=
    M.call (|
      M.get_name (| "require" |),
      [
        M.bin_op (|
          "==",
          M.get_name (| "b" |),
          Value.Integer 0
        |),
        Value.String "b is not zero"
      ]
    |) in
  Value.Tuple []


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r1" |),
          Value.Integer 16
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r2" |),
          Value.Integer 32
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r3" |),
          Value.Integer 64
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition shouldFail (α : list Value.t) : M :=
    match α with
    | [i1] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.
