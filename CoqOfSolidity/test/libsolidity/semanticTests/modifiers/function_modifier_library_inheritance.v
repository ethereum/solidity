(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Struct S *)

  (* Beginning of a node! *)
id: 15
src: 168:59:0
nodeType: ModifierDefinition
name: mod
nameLocation: 177:3:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition s : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    M.un_op (|
      false,
      "++",
      M.member_access (|
        M.get_name (| "s" |),
        "v"
      |)
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 13
src: 219:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  Definition libFun (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.assign (|
          "+=",
          M.member_access (|
            M.get_name (| "s" |),
            "v"
          |),
          Value.Integer 0x100
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module Test.
  Axiom using : M.usingLibrary (|
      None,
      UsingKind.Local,
      "L"
    |).

  Definition s : Value.t :=
    undefined.

  (* Beginning of a node! *)
id: 47
src: 362:62:0
nodeType: ModifierDefinition
name: mod
nameLocation: 371:3:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition  : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    M.call (|
      M.get_name (| "revert" |),
      []
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 45
src: 416:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "s" |),
            "libFun"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "libFun"
          |),
          [
            M.get_name (| "s" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "s" |),
            "v"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
