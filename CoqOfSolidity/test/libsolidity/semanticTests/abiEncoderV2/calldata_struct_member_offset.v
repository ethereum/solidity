(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct A *)

  (* Struct B *)

  Definition g (α : list Value.t) : M :=
    match α with
    | [b] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "b" |),
            "b"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "arr" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              Value.Integer 20
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 31
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "arr" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 84
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.get_name (| "B" |),
            [
              M.call (|
                M.get_name (| "A" |),
                [
                  Value.Integer 420,
                  M.get_name (| "arr" |)
                ]
              |),
              Value.Integer 11
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "b" |),
              "b"
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "this" |),
                "g"
              |),
              [
                M.get_name (| "b" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
