(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f0 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              Value.Integer 1,
              Value.Integer 2
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "abc"
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              Value.Integer 1,
              M.get_name (| "x" |),
              Value.Integer 2
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "abc"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              Value.Integer 1,
              M.get_name (| "x" |),
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.String "def"
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 0)
              |),
              Value.String "d"
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.String "e"
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 0)
              |),
              Value.String "e"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s : Value.t :=
    undefined.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.String "abc"
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "b"
            |),
            "push"
          |),
          [
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "b"
            |),
            "push"
          |),
          [
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              Value.Integer 1,
              M.get_name (| "x" |),
              M.get_name (| "s" |),
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.String "def"
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 0)
              |),
              Value.String "d"
            |)
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "y" |),
            Some (Value.Integer 0)
          |),
          Value.String "e"
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.get_name (| "y" |),
                Some (Value.Integer 0)
              |),
              Value.String "e"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
