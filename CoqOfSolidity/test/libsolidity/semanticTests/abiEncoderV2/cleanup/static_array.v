(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition gggggggg (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.index_access (|
          M.get_name (| "s" |),
          Some (Value.Integer 0)
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.get_name (| "msg" |),
            "data"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.define (|
          [ "m" ],
          Value.Array [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 37
src: 315:81:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 348:1:0declaration: 20isSlot: isOffset: alueSize: src: 384:1:0declaration: 22isSlot: isOffset: alueSize: src: 345:1:0declaration: 32isSlot: isOffset: alueSize: src: 374:1:0declaration: 32isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "gggggggg"
            |),
            [
              M.get_name (| "m" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
