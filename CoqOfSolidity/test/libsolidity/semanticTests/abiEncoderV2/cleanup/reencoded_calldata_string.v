(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.define (|
          [ "mptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 10
src: 110:224:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 161:4:0declaration: 8isSlot: isOffset: alueSize: src: 208:4:0declaration: 8isSlot: isOffset: alueSize: src: 225:4:0declaration: 8isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "r" |),
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 18
src: 370:169:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 475:4:0declaration: 8isSlot: isOffset: alueSize: src: 481:1:0declaration: 5isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              Value.String "abc"
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
