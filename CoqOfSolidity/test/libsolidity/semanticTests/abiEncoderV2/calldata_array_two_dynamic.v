(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [s1, s2, which] =>
      let _ :=
        if M.get_name (| "which" |) then
          M.return_ (|
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encode"
              |),
              [
                M.get_name (| "s1" |)
              ]
            |)
          |)
        else
          M.return_ (|
            M.call (|
              M.member_access (|
                M.get_name (| "abi" |),
                "encode"
              |),
              [
                M.get_name (| "s2" |)
              ]
            |)
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [s1, s2, which] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              M.get_name (| "s1" |),
              M.get_name (| "s2" |),
              M.get_name (| "which" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
