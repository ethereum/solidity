(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [s] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.member_access (|
            M.get_name (| "s" |),
            "a"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "b" |),
          M.member_access (|
            M.get_name (| "s" |),
            "b"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.member_access (|
            M.get_name (| "s" |),
            "c"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "d" |),
          M.call (|
            Ty.path "uint16",
            [
              M.member_access (|
                M.get_name (| "s" |),
                "d"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
