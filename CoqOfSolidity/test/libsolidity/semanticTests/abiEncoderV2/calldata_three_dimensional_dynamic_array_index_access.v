(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [s, i, j] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.index_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (M.get_name (| "i" |))
                |),
                Some (M.get_name (| "j" |))
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [s, i, j, k] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.index_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "s" |),
                    Some (M.get_name (| "i" |))
                  |),
                  Some (M.get_name (| "j" |))
                |),
                Some (M.get_name (| "k" |))
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [s, i] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.index_access (|
                M.index_access (|
                  M.get_name (| "s" |),
                  Some (Value.Integer 0)
                |),
                Some (M.get_name (| "i" |))
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k (α : list Value.t) : M :=
    match α with
    | [s, i, j] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "s" |),
                    Some (M.get_name (| "i" |))
                  |),
                  Some (M.get_name (| "j" |))
                |),
                "a"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition l (α : list Value.t) : M :=
    match α with
    | [s, i, j] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encode"
            |),
            [
              M.member_access (|
                M.index_access (|
                  M.index_access (|
                    M.get_name (| "s" |),
                    Some (M.get_name (| "i" |))
                  |),
                  Some (M.get_name (| "j" |))
                |),
                "a"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
