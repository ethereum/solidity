(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a, b, c] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "a" |),
              "length"
            |),
            M.index_access (|
              M.get_name (| "a" |),
              Some (Value.Integer 1)
            |),
            M.member_access (|
              M.get_name (| "b" |),
              "length"
            |),
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 2)
            |),
            M.member_access (|
              M.get_name (| "c" |),
              "length"
            |),
            M.index_access (|
              M.get_name (| "c" |),
              Some (Value.Integer 3)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "x" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 7
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "this" |),
              "f"
            |),
            [
              Value.String "abc",
              Value.String "def",
              M.get_name (| "x" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
