(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)

(* Struct S1 *)

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [m, p] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "p" |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "m" |),
                "s"
              |),
              "p1"
            |),
            M.index_access (|
              M.index_access (|
                M.member_access (|
                  M.member_access (|
                    M.get_name (| "m" |),
                    "s"
                  |),
                  "a"
                |),
                Some (Value.Integer 0)
              |),
              Some (Value.Integer 0)
            |),
            M.index_access (|
              M.index_access (|
                M.member_access (|
                  M.member_access (|
                    M.get_name (| "m" |),
                    "s"
                  |),
                  "a"
                |),
                Some (Value.Integer 1)
              |),
              Some (Value.Integer 1)
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "m" |),
                "s"
              |),
              "p2"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [c, p] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "L" |),
              "f"
            |),
            [
              M.get_name (| "c" |),
              M.get_name (| "p" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
