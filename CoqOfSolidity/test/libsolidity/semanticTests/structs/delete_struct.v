(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  (* Struct topStruct *)

  Definition toDelete : Value.t :=
    undefined.

  Definition str : Value.t :=
    undefined.

  (* Struct nestedStruct *)

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "toDelete" |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "str" |),
            "topValue"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "str" |),
              "topMapping"
            |),
            Some (Value.Integer 0)
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "str" |),
              "topMapping"
            |),
            Some (Value.Integer 1)
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "str" |),
              "nstr"
            |),
            "nestedValue"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "str" |),
                "nstr"
              |),
              "nestedMapping"
            |),
            Some (Value.Integer 0)
          |),
          Value.Bool true
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "str" |),
                "nstr"
              |),
              "nestedMapping"
            |),
            Some (Value.Integer 1)
          |),
          Value.Bool false
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "str" |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "toDelete" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getToDelete (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "res" |),
          M.get_name (| "toDelete" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getTopValue (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "topValue" |),
          M.member_access (|
            M.get_name (| "str" |),
            "topValue"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getNestedValue (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "nestedValue" |),
          M.member_access (|
            M.member_access (|
              M.get_name (| "str" |),
              "nstr"
            |),
            "nestedValue"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getTopMapping (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "ret" |),
          M.index_access (|
            M.member_access (|
              M.get_name (| "str" |),
              "topMapping"
            |),
            Some (M.get_name (| "index" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition getNestedMapping (α : list Value.t) : M :=
    match α with
    | [index] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "str" |),
                "nstr"
              |),
              "nestedMapping"
            |),
            Some (M.get_name (| "index" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
