(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  (* Struct s1 *)

  (* Struct s2 *)

  Definition data : Value.t :=
    undefined.

  Definition check (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              M.bin_op (|
                "&&",
                M.bin_op (|
                  "&&",
                  M.bin_op (|
                    "&&",
                    M.bin_op (|
                      "&&",
                      M.bin_op (|
                        "==",
                        M.member_access (|
                          M.get_name (| "data" |),
                          "z"
                        |),
                        Value.Integer 1
                      |),
                      M.bin_op (|
                        "==",
                        M.member_access (|
                          M.member_access (|
                            M.get_name (| "data" |),
                            "s1data"
                          |),
                          "x"
                        |),
                        Value.Integer 2
                      |)
                    |),
                    M.bin_op (|
                      "==",
                      M.member_access (|
                        M.member_access (|
                          M.get_name (| "data" |),
                          "s1data"
                        |),
                        "y"
                      |),
                      Value.Bool true
                    |)
                  |),
                  M.bin_op (|
                    "==",
                    M.member_access (|
                      M.index_access (|
                        M.member_access (|
                          M.index_access (|
                            M.member_access (|
                              M.get_name (| "data" |),
                              "recursive"
                            |),
                            Some (Value.Integer 3)
                          |),
                          "recursive"
                        |),
                        Some (Value.Integer 4)
                      |),
                      "z"
                    |),
                    Value.Integer 5
                  |)
                |),
                M.bin_op (|
                  "==",
                  M.member_access (|
                    M.index_access (|
                      M.member_access (|
                        M.index_access (|
                          M.member_access (|
                            M.get_name (| "data" |),
                            "recursive"
                          |),
                          Some (Value.Integer 4)
                        |),
                        "recursive"
                      |),
                      Some (Value.Integer 3)
                    |),
                    "z"
                  |),
                  Value.Integer 6
                |)
              |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.member_access (|
                    M.index_access (|
                      M.member_access (|
                        M.get_name (| "data" |),
                        "recursive"
                      |),
                      Some (Value.Integer 0)
                    |),
                    "s1data"
                  |),
                  "y"
                |),
                Value.Bool false
              |)
            |),
            M.bin_op (|
              "==",
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "data" |),
                    "recursive"
                  |),
                  Some (Value.Integer 4)
                |),
                "z"
              |),
              Value.Integer 9
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "z"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "s1data"
            |),
            "x"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "data" |),
              "s1data"
            |),
            "y"
          |),
          Value.Bool true
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "data" |),
                    "recursive"
                  |),
                  Some (Value.Integer 3)
                |),
                "recursive"
              |),
              Some (Value.Integer 4)
            |),
            "z"
          |),
          Value.Integer 5
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "data" |),
                    "recursive"
                  |),
                  Some (Value.Integer 4)
                |),
                "recursive"
              |),
              Some (Value.Integer 3)
            |),
            "z"
          |),
          Value.Integer 6
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.member_access (|
                  M.get_name (| "data" |),
                  "recursive"
                |),
                Some (Value.Integer 0)
              |),
              "s1data"
            |),
            "y"
          |),
          Value.Bool false
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.member_access (|
                M.get_name (| "data" |),
                "recursive"
              |),
              Some (Value.Integer 4)
            |),
            "z"
          |),
          Value.Integer 9
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
