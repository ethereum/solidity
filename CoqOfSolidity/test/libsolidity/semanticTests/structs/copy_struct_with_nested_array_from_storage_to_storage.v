(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition src : Value.t :=
    undefined.

  Definition dst : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "src" |),
            "x"
          |),
          Value.Array [
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "src" |),
              "y"
            |),
            "push"
          |),
          [
            Value.Integer 7
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "src" |),
              "y"
            |),
            "push"
          |),
          [
            Value.Integer 11
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "dst" |),
          M.get_name (| "src" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "dst" |),
                  "x"
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 3
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "dst" |),
                  "y"
                |),
                "length"
              |),
              Value.Integer 2
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "dst" |),
                  "y"
                |),
                Some (Value.Integer 0)
              |),
              Value.Integer 7
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.index_access (|
                M.member_access (|
                  M.get_name (| "dst" |),
                  "y"
                |),
                Some (Value.Integer 1)
              |),
              Value.Integer 11
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
