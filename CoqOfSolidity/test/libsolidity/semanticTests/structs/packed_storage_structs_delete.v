(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct str *)

  Definition x : Value.t :=
    undefined.

  Definition y : Value.t :=
    undefined.

  Definition data : Value.t :=
    undefined.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "a"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "b"
          |),
          Value.Integer 0xabcd
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "data" |),
            "c"
          |),
          Value.Integer 0xfa
        |) in
      let _ :=
        if M.bin_op (|
          "||",
          M.bin_op (|
            "||",
            M.bin_op (|
              "||",
              M.bin_op (|
                "||",
                M.bin_op (|
                  "!=",
                  M.get_name (| "x" |),
                  Value.Integer 1
                |),
                M.bin_op (|
                  "!=",
                  M.get_name (| "y" |),
                  Value.Integer 2
                |)
              |),
              M.bin_op (|
                "!=",
                M.member_access (|
                  M.get_name (| "data" |),
                  "a"
                |),
                Value.Integer 2
              |)
            |),
            M.bin_op (|
              "!=",
              M.member_access (|
                M.get_name (| "data" |),
                "b"
              |),
              Value.Integer 0xabcd
            |)
          |),
          M.bin_op (|
            "!=",
            M.member_access (|
              M.get_name (| "data" |),
              "c"
            |),
            Value.Integer 0xfa
          |)
        |) then
          M.return_ (|
            Value.Integer 2
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "y" |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.member_access (|
            M.get_name (| "data" |),
            "b"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "||",
          M.bin_op (|
            "||",
            M.bin_op (|
              "||",
              M.bin_op (|
                "||",
                M.bin_op (|
                  "!=",
                  M.get_name (| "x" |),
                  Value.Integer 1
                |),
                M.bin_op (|
                  "!=",
                  M.get_name (| "y" |),
                  Value.Integer 0
                |)
              |),
              M.bin_op (|
                "!=",
                M.member_access (|
                  M.get_name (| "data" |),
                  "a"
                |),
                Value.Integer 2
              |)
            |),
            M.bin_op (|
              "!=",
              M.member_access (|
                M.get_name (| "data" |),
                "b"
              |),
              Value.Integer 0
            |)
          |),
          M.bin_op (|
            "!=",
            M.member_access (|
              M.get_name (| "data" |),
              "c"
            |),
            Value.Integer 0xfa
          |)
        |) then
          M.return_ (|
            Value.Integer 3
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.get_name (| "data" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
