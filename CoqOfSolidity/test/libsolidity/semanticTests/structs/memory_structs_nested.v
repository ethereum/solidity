(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  (* Struct S *)

  (* Struct X *)

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "d" ],
          M.call (|
            M.get_name (| "combine" |),
            [
              Value.Integer 1,
              Value.Integer 2,
              Value.Integer 3,
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.call (|
            M.get_name (| "extract" |),
            [
              M.get_name (| "d" |),
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.call (|
            M.get_name (| "extract" |),
            [
              M.get_name (| "d" |),
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.call (|
            M.get_name (| "extract" |),
            [
              M.get_name (| "d" |),
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "z" |),
          M.call (|
            M.get_name (| "extract" |),
            [
              M.get_name (| "d" |),
              Value.Integer 3
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition extract (α : list Value.t) : M :=
    match α with
    | [s, which] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "which" |),
          Value.Integer 0
        |) then
          M.return_ (|
            M.member_access (|
              M.get_name (| "s" |),
              "x"
            |)
          |)
        else
          if M.bin_op (|
            "==",
            M.get_name (| "which" |),
            Value.Integer 1
          |) then
            M.return_ (|
              M.member_access (|
                M.member_access (|
                  M.get_name (| "s" |),
                  "s"
                |),
                "x"
              |)
            |)
          else
            if M.bin_op (|
              "==",
              M.get_name (| "which" |),
              Value.Integer 2
            |) then
              M.return_ (|
                M.member_access (|
                  M.member_access (|
                    M.get_name (| "s" |),
                    "s"
                  |),
                  "y"
                |)
              |)
            else
              M.return_ (|
                M.member_access (|
                  M.member_access (|
                    M.get_name (| "s" |),
                    "s"
                  |),
                  "z"
                |)
              |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition combine (α : list Value.t) : M :=
    match α with
    | [a, x, y, z] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "s" |),
            "x"
          |),
          M.get_name (| "a" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "s"
            |),
            "x"
          |),
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "s"
            |),
            "y"
          |),
          M.get_name (| "y" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.get_name (| "s" |),
              "s"
            |),
            "z"
          |),
          M.get_name (| "z" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
