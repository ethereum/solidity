(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module CopyTest.
  (* Struct Tree *)

  Definition storageTree : Value.t :=
    undefined.

  Definition childStorageTree : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "storageTree" |),
            "data"
          |),
          Value.Integer 0x42
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 2
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "storageTree" |),
                "children"
              |),
              "push"
            |),
            [
              M.get_name (| "childStorageTree" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.member_access (|
                M.get_name (| "storageTree" |),
                "children"
              |),
              Some (Value.Integer 0)
            |),
            "data"
          |),
          Value.Integer 0x4200
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.member_access (|
                M.get_name (| "storageTree" |),
                "children"
              |),
              Some (Value.Integer 1)
            |),
            "data"
          |),
          Value.Integer 0x4201
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 3
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "storageTree" |),
                    "children"
                  |),
                  Some (Value.Integer 0)
                |),
                "children"
              |),
              "push"
            |),
            [
              M.get_name (| "childStorageTree" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 3
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.member_access (|
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.member_access (|
                      M.get_name (| "storageTree" |),
                      "children"
                    |),
                    Some (Value.Integer 0)
                  |),
                  "children"
                |),
                Some (M.get_name (| "i" |))
              |),
              "data"
            |),
            M.bin_op (|
              "+",
              Value.Integer 0x420000,
              M.get_name (| "i" |)
            |)
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 4
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "storageTree" |),
                    "children"
                  |),
                  Some (Value.Integer 1)
                |),
                "children"
              |),
              "push"
            |),
            [
              M.get_name (| "childStorageTree" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 4
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.member_access (|
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.member_access (|
                      M.get_name (| "storageTree" |),
                      "children"
                    |),
                    Some (Value.Integer 1)
                  |),
                  "children"
                |),
                Some (M.get_name (| "i" |))
              |),
              "data"
            |),
            M.bin_op (|
              "+",
              Value.Integer 0x420100,
              M.get_name (| "i" |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition countData (α : list Value.t) : M :=
    match α with
    | [tree] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          Value.Integer 1
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "tree" |),
                "children"
              |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "c" |),
              M.call (|
                M.get_name (| "countData" |),
                [
                  M.index_access (|
                    M.member_access (|
                      M.get_name (| "tree" |),
                      "children"
                    |),
                    Some (M.get_name (| "i" |))
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copyFromTree (α : list Value.t) : M :=
    match α with
    | [tree, data, offset] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.un_op (|
              false,
              "++",
              M.get_name (| "offset" |)
            |))
          |),
          M.member_access (|
            M.get_name (| "tree" |),
            "data"
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "tree" |),
                "children"
              |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "offset" |),
              M.call (|
                M.get_name (| "copyFromTree" |),
                [
                  M.index_access (|
                    M.member_access (|
                      M.get_name (| "tree" |),
                      "children"
                    |),
                    Some (M.get_name (| "i" |))
                  |),
                  M.get_name (| "data" |),
                  M.get_name (| "offset" |)
                ]
              |)
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "offset" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition run (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "memoryTree" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "memoryTree" |),
          M.get_name (| "storageTree" |)
        |) in
      let _ :=
        M.define (|
          [ "length" ],
          M.call (|
            M.get_name (| "countData" |),
            [
              M.get_name (| "memoryTree" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint256") None
,
            [
              M.get_name (| "length" |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "copyFromTree" |),
          [
            M.get_name (| "memoryTree" |),
            M.get_name (| "result" |),
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "result" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End CopyTest.
