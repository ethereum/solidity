(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module CopyTest.
  (* Struct Tree *)

  Definition storageTree : Value.t :=
    undefined.

  Definition children : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 2
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.get_name (| "storageTree" |),
                "children"
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 23
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "storageTree" |),
                    "children"
                  |),
                  Some (Value.Integer 0)
                |),
                "children"
              |),
              "push"
            |),
            []
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            Value.Integer 42
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.call (|
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "storageTree" |),
                    "children"
                  |),
                  Some (Value.Integer 1)
                |),
                "children"
              |),
              "push"
            |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition run (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "memoryTree" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "memoryTree" |),
          M.get_name (| "storageTree" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.member_access (|
                M.get_name (| "memoryTree" |),
                "children"
              |),
              "length"
            |),
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "memoryTree" |),
                    "children"
                  |),
                  Some (Value.Integer 0)
                |),
                "children"
              |),
              "length"
            |),
            M.member_access (|
              M.member_access (|
                M.index_access (|
                  M.member_access (|
                    M.get_name (| "memoryTree" |),
                    "children"
                  |),
                  Some (Value.Integer 1)
                |),
                "children"
              |),
              "length"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End CopyTest.
