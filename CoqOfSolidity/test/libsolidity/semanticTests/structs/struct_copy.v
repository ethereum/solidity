(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module c.
  (* Struct Nested *)

  (* Struct Struct *)

  Definition data : Value.t :=
    undefined.

  Definition set (α : list Value.t) : M :=
    match α with
    | [k] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "k" |))
            |),
            "a"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (M.get_name (| "k" |))
              |),
              "nested"
            |),
            "x"
          |),
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (M.get_name (| "k" |))
              |),
              "nested"
            |),
            "y"
          |),
          Value.Integer 4
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "k" |))
            |),
            "c"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copy (α : list Value.t) : M :=
    match α with
    | [from, to] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "to" |))
          |),
          M.index_access (|
            M.get_name (| "data" |),
            Some (M.get_name (| "from" |))
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition retrieve (α : list Value.t) : M :=
    match α with
    | [k] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "a" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "k" |))
            |),
            "a"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (M.get_name (| "k" |))
              |),
              "nested"
            |),
            "x"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.member_access (|
            M.member_access (|
              M.index_access (|
                M.get_name (| "data" |),
                Some (M.get_name (| "k" |))
              |),
              "nested"
            |),
            "y"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "c" |),
          M.member_access (|
            M.index_access (|
              M.get_name (| "data" |),
              Some (M.get_name (| "k" |))
            |),
            "c"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End c.
