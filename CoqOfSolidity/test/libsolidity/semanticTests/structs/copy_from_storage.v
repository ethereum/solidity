(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Struct S *)

(* Contract *)
Module C.
  Definition sStorage : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "sStorage" |),
            "x"
          |),
          Value.Integer 13
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sMemory" ],
          M.call (|
            NewExpression Ty.array (Ty.path "S") None
,
            [
              Value.Integer 1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "sMemory" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "sStorage" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "sMemory" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
