(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  (* Struct X *)

  Definition r : Value.t :=
    undefined.

  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.call (|
            M.get_name (| "X" |),
            [
              Value.Integer 12,
              M.call (|
                M.get_name (| "S" |),
                [
                  Value.Integer 42,
                  Value.Integer 23,
                  Value.Integer 34,
                  M.get_name (| "g" |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          M.get_name (| "m" |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.member_access (|
                M.get_name (| "x" |),
                "s"
              |),
              "a"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "x" |),
                "s"
              |),
              "b"
            |),
            M.member_access (|
              M.member_access (|
                M.get_name (| "x" |),
                "s"
              |),
              "c"
            |),
            M.call (|
              M.member_access (|
                M.member_access (|
                  M.get_name (| "x" |),
                  "s"
                |),
                "f"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.member_access (|
                  M.get_name (| "m" |),
                  "s"
                |),
                "f"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "x" |),
              "s"
            |),
            "a"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
