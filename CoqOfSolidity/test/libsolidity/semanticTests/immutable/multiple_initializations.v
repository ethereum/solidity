(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition x : Value.t :=
    M.bin_op (|
      "+",
      M.get_name (| "x" |),
      Value.Integer 1
    |).

  Definition y : Value.t :=
    M.assign (|
      "+=",
      M.get_name (| "x" |),
      Value.Integer 2
    |).

  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "x" |),
          Value.Integer 64
        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "x" |),
          Value.Integer 128
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Beginning of a node! *)
id: 40
src: 167:35:0
nodeType: ModifierDefinition
name: m
nameLocation: 176:1:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition  : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    (* Beginning of a node! *)
id: 38
src: 194:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  Definition get (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.


(* Contract *)
Module B.
  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.


(* Contract *)
Module C.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
