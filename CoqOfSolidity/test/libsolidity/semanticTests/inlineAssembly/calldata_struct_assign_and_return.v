(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 12
src: 121:32:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 138:1:0declaration: 10isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "s" ],
          M.call (|
            M.get_name (| "f" |),
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.member_access (|
              M.get_name (| "s" |),
              "x"
            |),
            M.member_access (|
              M.get_name (| "s" |),
              "y"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 0x42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            IndexRangeAccess M.member_access (|
              M.get_name (| "msg" |),
              "data"
            |) Value.Integer 4 
,
            Value.Tuple [
              M.get_name (| "S" |)
            ]
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 0x42
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
