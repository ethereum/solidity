(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition get (α : list Value.t) : M :=
    match α with
    | [addr] =>
      let _ :=
        (* Beginning of a node! *)
id: 7
src: 88:49:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 122:4:0declaration: 2isSlot: isOffset: alueSize: src: 111:1:0declaration: 5isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set (α : list Value.t) : M :=
    match α with
    | [addr, x] =>
      let _ :=
        (* Beginning of a node! *)
id: 16
src: 205:48:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 235:4:0declaration: 11isSlot: isOffset: alueSize: src: 241:1:0declaration: 13isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 0
                  ]
                |),
                Value.Integer 0
              |),
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 42
                  ]
                |),
                Value.Integer 0
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "set"
          |),
          [
            Value.Integer 0,
            Value.Integer 21
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 0
                  ]
                |),
                Value.Integer 21
              |),
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 42
                  ]
                |),
                Value.Integer 0
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "set"
          |),
          [
            Value.Integer 42,
            Value.Integer 131
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 0
                  ]
                |),
                Value.Integer 21
              |),
              M.bin_op (|
                "==",
                M.call (|
                  M.member_access (|
                    M.get_name (| "this" |),
                    "get"
                  |),
                  [
                    Value.Integer 42
                  ]
                |),
                Value.Integer 131
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
