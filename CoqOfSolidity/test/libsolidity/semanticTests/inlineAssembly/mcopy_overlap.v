(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Definition copy (α : list Value.t) : M :=
  match α with
  | [dstOffset, srcOffset, length] =>
    let _ :=
      M.assign (|
        "=",
        M.get_name (| "out" |),
        hexString
      |) in
    let _ :=
      (* Beginning of a node! *)
id: 15
src: 342:102:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 387:9:0declaration: 2isSlot: isOffset: alueSize: src: 431:6:0declaration: 6isSlot: isOffset: alueSize: src: 375:3:0declaration: 9isSlot: isOffset: alueSize: src: 407:3:0declaration: 9isSlot: isOffset: alueSize: src: 419:9:0declaration: 4isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition mcopy_to_right_overlap (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "copy" |),
            [
              Value.Integer 0x20,
              Value.Integer 0x10,
              Value.Integer 0x30
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mcopy_to_left_overlap (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "copy" |),
            [
              Value.Integer 0x10,
              Value.Integer 0x20,
              Value.Integer 0x30
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mcopy_in_place (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "copy" |),
            [
              Value.Integer 0x10,
              Value.Integer 0x10,
              Value.Integer 0x40
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mcopy_to_right_no_overlap (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "copy" |),
            [
              Value.Integer 0x30,
              Value.Integer 0x10,
              Value.Integer 0x20
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mcopy_to_left_no_overlap (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "copy" |),
            [
              Value.Integer 0x10,
              Value.Integer 0x30,
              Value.Integer 0x20
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
