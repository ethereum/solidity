(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition mappingAccess : Value.t :=
    undefined.

  Definition data (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_data" |),
          M.index_access (|
            M.get_name (| "mappingAccess" |),
            Some (Value.Integer 20)
          |)
        |) in
      let _ :=
        M.define (|
          [ "slot" ],
          M.call (|
            M.get_name (| "keccak256" |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encode"
                |),
                [
                  M.call (|
                    Ty.path "uint",
                    [
                      Value.Integer 1
                    ]
                  |),
                  M.call (|
                    Ty.path "uint",
                    [
                      Value.Integer 0
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 38
src: 398:51:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 421:10:0declaration: 14sSlot: isOffset: suffix: slotalueSize: src: 435:4:0declaration: 23isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition set (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.get_name (| "data" |),
              []
            |),
            "a"
          |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition get (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "data" |),
              []
            |),
            "a"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
