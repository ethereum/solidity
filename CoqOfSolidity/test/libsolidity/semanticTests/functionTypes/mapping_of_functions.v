(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Flow.
  Definition success : Value.t :=
    undefined.

  Definition stages : Value.t :=
    undefined.

  Definition stage0 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "stages" |),
            Some (M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |))
          |),
          M.get_name (| "stage1" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition stage1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "stages" |),
            Some (M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |))
          |),
          M.get_name (| "stage2" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition stage2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "success" |),
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "stages" |),
            Some (M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |))
          |),
          M.get_name (| "stage0" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.index_access (|
            M.get_name (| "stages" |),
            Some (M.member_access (|
              M.get_name (| "msg" |),
              "sender"
            |))
          |),
          []
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 7
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Flow.
