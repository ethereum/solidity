(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              ">",
              M.member_access (|
                M.get_name (| "msg" |),
                "value"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              ">",
              M.member_access (|
                M.get_name (| "msg" |),
                "value"
              |),
              Value.Integer 0
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            FunctionCallOptions M.index_access (|
              Value.Array [
                M.member_access (|
                  M.get_name (| "this" |),
                  "f"
                |),
                M.member_access (|
                  M.get_name (| "this" |),
                  "g"
                |)
              ],
              Some (Value.Integer 0)
            |) [value, ] Value.Integer 1
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
