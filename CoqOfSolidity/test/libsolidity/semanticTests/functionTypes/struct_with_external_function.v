(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Struct S *)

(* Contract *)
Module Flow.
  Definition t : Value.t :=
    undefined.

  Definition X (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition Y (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 2
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 0)
            |),
            "a"
          |),
          Value.Integer 0xff07
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 0)
            |),
            "b"
          |),
          Value.Integer 0xff07
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 1)
            |),
            "x"
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "Y"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 1)
            |),
            "a"
          |),
          Value.Integer 0xff07
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 1)
            |),
            "b"
          |),
          Value.Integer 0xff07
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "t" |),
              Some (Value.Integer 0)
            |),
            "x"
          |),
          M.member_access (|
            M.get_name (| "this" |),
            "X"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "t" |),
                  Some (Value.Integer 0)
                |),
                "x"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.index_access (|
                  M.get_name (| "t" |),
                  Some (Value.Integer 1)
                |),
                "x"
              |),
              []
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Flow.
