(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "a" |),
            Value.Tuple [
              M.get_name (| "b" |),
              M.get_name (| "c" |)
            ]
          ],
          Value.Tuple [
            Value.String "0",
            Value.Tuple [
              Value.String "1",
              Value.String "2"
            ]
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.get_name (| "a" |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.get_name (| "b" |),
                  Some (Value.Integer 0)
                |)
              ]
            |),
            M.call (|
              Ty.path "uint8",
              [
                M.index_access (|
                  M.get_name (| "c" |),
                  Some (Value.Integer 0)
                |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
