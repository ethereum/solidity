(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_A : Ty.path "A" = Ty.path "uint".

Axiom user_type_B : Ty.path "B" = Ty.path "uint".

(* Library *)
Module L.
  Definition f (α : list Value.t) : M :=
    match α with
    | [_m, _v] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_m" |),
            Some (M.call (|
              M.member_access (|
                M.get_name (| "A" |),
                "wrap"
              |),
              [
                M.call (|
                  Ty.path "uint",
                  [
                    Value.Integer 2
                  ]
                |)
              ]
            |))
          |),
          M.get_name (| "_v" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [_m, _v] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "_m" |),
            Some (M.call (|
              Ty.path "uint",
              [
                Value.Integer 3
              ]
            |))
          |),
          M.get_name (| "_v" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition uintMap : Value.t :=
    undefined.

  Definition abMap : Value.t :=
    undefined.

  Definition testAB (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "f"
          |),
          [
            M.get_name (| "abMap" |),
            M.call (|
              M.member_access (|
                M.get_name (| "B" |),
                "wrap"
              |),
              [
                Value.Integer 3
              ]
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.call (|
              M.member_access (|
                M.get_name (| "B" |),
                "unwrap"
              |),
              [
                M.index_access (|
                  M.get_name (| "abMap" |),
                  Some (M.call (|
                    M.member_access (|
                      M.get_name (| "A" |),
                      "wrap"
                    |),
                    [
                      M.call (|
                        Ty.path "uint",
                        [
                          Value.Integer 2
                        ]
                      |)
                    ]
                  |))
                |)
              ]
            |),
            Value.Integer 3
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testUint (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "f"
          |),
          [
            M.get_name (| "uintMap" |),
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.index_access (|
              M.get_name (| "uintMap" |),
              Some (Value.Integer 3)
            |),
            Value.Integer 4
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
