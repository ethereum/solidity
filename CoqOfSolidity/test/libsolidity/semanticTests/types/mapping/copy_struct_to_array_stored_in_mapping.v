(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module C.
  (* Struct S *)

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "s" |),
          M.call (|
            M.get_name (| "S" |),
            [
              Value.Integer 7
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 0)
            |),
            "push"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s : Value.t :=
    undefined.

  Definition m1 : Value.t :=
    undefined.

  Definition m2 : Value.t :=
    undefined.

  Definition from_storage_to_static_array (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m1" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_storage_to_dynamic_array (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_memory_to_static_array (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sLocal" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "sLocal" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m1" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_memory_to_dynamic_array (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "sLocal" ],
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "sLocal" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_calldata_to_static_array (α : list Value.t) : M :=
    match α with
    | [sCalldata] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "sCalldata" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m1" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition from_calldata_to_dynamic_array (α : list Value.t) : M :=
    match α with
    | [sCalldata] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 0)
            |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "sCalldata" |)
        |) in
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m2" |),
            Some (Value.Integer 0)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
