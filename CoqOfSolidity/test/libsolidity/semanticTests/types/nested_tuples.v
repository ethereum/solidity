(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition f0 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            ]
          ],
          Value.Tuple [
            Value.Integer 2,
            Value.Bool true
          ]
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                M.get_name (| "a" |)
              ]
            ]
          ],
          Value.Tuple [
            Value.Tuple [
              Value.Integer 1,
              Value.Integer 2
            ],
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                M.get_name (| "a" |)
              ]
            ]
          ],
          Value.Tuple [
            Value.Tuple [
              Value.Integer 1,
              Value.Integer 2
            ],
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Integer 3
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              
            ]
          ],
          Value.Tuple [
            Value.Tuple [
              Value.Integer 7,
              Value.Integer 8
            ],
            Value.Integer 9
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "a" |)
          ],
          Value.Tuple [
            Value.Integer 4,
            Value.Tuple [
              Value.Integer 8,
              Value.Integer 16,
              Value.Integer 32
            ]
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "a" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
