(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv1 *)

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a, x] =>
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "a" |),
          Value.String "ab"
        |) then
          M.return_ (|
            Value.Integer 1
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "x" |),
          Value.Integer 0x0102
        |) then
          M.return_ (|
            Value.Integer 2
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "!=",
          M.call (|
            Ty.path "bytes3",
            [
              M.call (|
                Ty.path "uint24",
                [
                  M.get_name (| "x" |)
                ]
              |)
            ]
          |),
          Value.Integer 0x000102
        |) then
          M.return_ (|
            Value.Integer 3
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
