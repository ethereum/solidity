(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            Ty.path "uint8",
            [
              M.call (|
                Ty.path "uint256",
                [
                  Value.Integer 0x31313131313131313131313131313131
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 15
src: 141:19:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 157:1:0declaration: 6isSlot: isOffset: alueSize: src: 152:1:0declaration: 3isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            Ty.path "bytes1",
            [
              M.call (|
                Ty.path "bytes16",
                [
                  Value.Integer 0x31313131313131313131313131313131
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 32
src: 299:19:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 315:1:0declaration: 23isSlot: isOffset: alueSize: src: 310:1:0declaration: 20isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 42
src: 400:26:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 411:1:0declaration: 40isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "y" |),
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
