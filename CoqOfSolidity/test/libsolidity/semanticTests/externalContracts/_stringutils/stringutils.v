(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.0 *)

(* Library *)
Module strings.
  (* Struct slice *)

  Definition memcpy (α : list Value.t) : M :=
    match α with
    | [dest, src, len] =>
      let _ :=
        M.for_ (|
          Value.Tuple [],
          M.bin_op (|
            ">=",
            M.get_name (| "len" |),
            Value.Integer 32
          |),
          M.assign (|
            "-=",
            M.get_name (| "len" |),
            Value.Integer 32
          |),
          let _ :=
            (* Beginning of a node! *)
id: 22
src: 2249:65:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 2283:4:0declaration: 8isSlot: isOffset: alueSize: src: 2295:3:0declaration: 10isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "dest" |),
              Value.Integer 32
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "src" |),
              Value.Integer 32
            |) in
          Value.Tuple []
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "len" |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.Tuple []
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "mask" ],
          Value.Default
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "mask" |),
            M.bin_op (|
              "-",
              M.bin_op (|
                "**",
                Value.Integer 256,
                Value.Tuple [
                  M.bin_op (|
                    "-",
                    Value.Integer 32,
                    M.get_name (| "len" |)
                  |)
                ]
              |),
              Value.Integer 1
            |)
          |) in
        Value.Tuple [] in
      let _ :=
        (* Beginning of a node! *)
id: 53
src: 2716:173:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 2819:4:0declaration: 8isSlot: isOffset: alueSize: src: 2851:4:0declaration: 8isSlot: isOffset: alueSize: src: 2774:4:0declaration: 39isSlot: isOffset: alueSize: src: 2826:4:0declaration: 39isSlot: isOffset: alueSize: src: 2764:3:0declaration: 10isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toSlice (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 66
src: 3197:55:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 3220:3:0declaration: 64isSlot: isOffset: alueSize: src: 3231:4:0declaration: 57isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "slice" |),
            [
              M.member_access (|
                M.call (|
                  Ty.path "bytes",
                  [
                    M.get_name (| "self" |)
                  ]
                |),
                "length"
              |),
              M.get_name (| "ptr" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition len (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.define (|
          [ "ret" ],
          Value.Default
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "self" |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.Integer 0
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "&",
            M.call (|
              Ty.path "uint256",
              [
                M.get_name (| "self" |)
              ]
            |),
            Value.Integer 0xffffffffffffffffffffffffffffffff
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "ret" |),
              Value.Integer 16
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "self" |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.bin_op (|
                    "/",
                    M.call (|
                      Ty.path "uint",
                      [
                        M.get_name (| "self" |)
                      ]
                    |),
                    Value.Integer 0x100000000000000000000000000000000
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "&",
            M.call (|
              Ty.path "uint256",
              [
                M.get_name (| "self" |)
              ]
            |),
            Value.Integer 0xffffffffffffffff
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "ret" |),
              Value.Integer 8
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "self" |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.bin_op (|
                    "/",
                    M.call (|
                      Ty.path "uint",
                      [
                        M.get_name (| "self" |)
                      ]
                    |),
                    Value.Integer 0x10000000000000000
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "&",
            M.call (|
              Ty.path "uint256",
              [
                M.get_name (| "self" |)
              ]
            |),
            Value.Integer 0xffffffff
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "ret" |),
              Value.Integer 4
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "self" |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.bin_op (|
                    "/",
                    M.call (|
                      Ty.path "uint",
                      [
                        M.get_name (| "self" |)
                      ]
                    |),
                    Value.Integer 0x100000000
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "&",
            M.call (|
              Ty.path "uint256",
              [
                M.get_name (| "self" |)
              ]
            |),
            Value.Integer 0xffff
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "ret" |),
              Value.Integer 2
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "self" |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.bin_op (|
                    "/",
                    M.call (|
                      Ty.path "uint",
                      [
                        M.get_name (| "self" |)
                      ]
                    |),
                    Value.Integer 0x10000
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "&",
            M.call (|
              Ty.path "uint256",
              [
                M.get_name (| "self" |)
              ]
            |),
            Value.Integer 0xff
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "ret" |),
              Value.Integer 1
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "-",
            Value.Integer 32,
            M.get_name (| "ret" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toSliceB32 (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        (* Beginning of a node! *)
id: 224
src: 4788:166:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 4928:3:0declaration: 222isSlot: isOffset: alueSize: src: 4899:4:0declaration: 218isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "ret" |),
            "_len"
          |),
          M.call (|
            M.get_name (| "len" |),
            [
              M.get_name (| "self" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition copy (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "slice" |),
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition toString (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.define (|
          [ "ret" ],
          M.call (|
            NewExpression Ty.path "string"
,
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "retptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 270
src: 5641:35:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 5666:3:0declaration: 260isSlot: isOffset: alueSize: src: 5652:6:0declaration: 268isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "memcpy" |),
          [
            M.get_name (| "retptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |),
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "ret" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition len (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.bin_op (|
            "-",
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |),
            Value.Integer 31
          |)
        |) in
      let _ :=
        M.define (|
          [ "end" ],
          M.bin_op (|
            "+",
            M.get_name (| "ptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |)
          |)
        |) in
      let _ :=
        M.for_ (|
          M.assign (|
            "=",
            M.get_name (| "l" |),
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "ptr" |),
            M.get_name (| "end" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "l" |)
          |),
          let _ :=
            M.define (|
              [ "b" ],
              Value.Default
            |) in
          let _ :=
            (* Beginning of a node! *)
id: 317
src: 6422:39:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 6433:1:0declaration: 315isSlot: isOffset: alueSize: src: 6448:3:0declaration: 291isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          let _ :=
            if M.bin_op (|
              "<",
              M.get_name (| "b" |),
              Value.Integer 0x80
            |) then
              let _ :=
                M.assign (|
                  "+=",
                  M.get_name (| "ptr" |),
                  Value.Integer 1
                |) in
              Value.Tuple []
            else
              if M.bin_op (|
                "<",
                M.get_name (| "b" |),
                Value.Integer 0xE0
              |) then
                let _ :=
                  M.assign (|
                    "+=",
                    M.get_name (| "ptr" |),
                    Value.Integer 2
                  |) in
                Value.Tuple []
              else
                if M.bin_op (|
                  "<",
                  M.get_name (| "b" |),
                  Value.Integer 0xF0
                |) then
                  let _ :=
                    M.assign (|
                      "+=",
                      M.get_name (| "ptr" |),
                      Value.Integer 3
                    |) in
                  Value.Tuple []
                else
                  if M.bin_op (|
                    "<",
                    M.get_name (| "b" |),
                    Value.Integer 0xF8
                  |) then
                    let _ :=
                      M.assign (|
                        "+=",
                        M.get_name (| "ptr" |),
                        Value.Integer 4
                      |) in
                    Value.Tuple []
                  else
                    if M.bin_op (|
                      "<",
                      M.get_name (| "b" |),
                      Value.Integer 0xFC
                    |) then
                      let _ :=
                        M.assign (|
                          "+=",
                          M.get_name (| "ptr" |),
                          Value.Integer 5
                        |) in
                      Value.Tuple []
                    else
                      let _ :=
                        M.assign (|
                          "+=",
                          M.get_name (| "ptr" |),
                          Value.Integer 6
                        |) in
                      Value.Tuple [] in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition empty (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition compare (α : list Value.t) : M :=
    match α with
    | [self, other] =>
      let _ :=
        M.define (|
          [ "shortest" ],
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.member_access (|
            M.get_name (| "other" |),
            "_len"
          |),
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |)
        |) then
          M.assign (|
            "=",
            M.get_name (| "shortest" |),
            M.member_access (|
              M.get_name (| "other" |),
              "_len"
            |)
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "selfptr" ],
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |)
        |) in
      let _ :=
        M.define (|
          [ "otherptr" ],
          M.member_access (|
            M.get_name (| "other" |),
            "_ptr"
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "idx" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "idx" |),
            M.get_name (| "shortest" |)
          |),
          M.assign (|
            "+=",
            M.get_name (| "idx" |),
            Value.Integer 32
          |),
          let _ :=
            M.define (|
              [ "a" ],
              Value.Default
            |) in
          let _ :=
            M.define (|
              [ "b" ],
              Value.Default
            |) in
          let _ :=
            (* Beginning of a node! *)
id: 439
src: 7925:97:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 7952:1:0declaration: 434isSlot: isOffset: alueSize: src: 7988:1:0declaration: 437isSlot: isOffset: alueSize: src: 7999:8:0declaration: 418isSlot: isOffset: alueSize: src: 7963:7:0declaration: 413isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          let _ :=
            if M.bin_op (|
              "!=",
              M.get_name (| "a" |),
              M.get_name (| "b" |)
            |) then
              let _ :=
                M.define (|
                  [ "mask" ],
                  M.member_access (|
                    M.call (|
                      M.get_name (| "type" |),
                      [
                        Ty.path "uint256"
                      ]
                    |),
                    "max"
                  |)
                |) in
              let _ :=
                if M.bin_op (|
                  "<",
                  M.get_name (| "shortest" |),
                  Value.Integer 32
                |) then
                  let _ :=
                    M.assign (|
                      "=",
                      M.get_name (| "mask" |),
                      M.un_op (|
                        true,
                        "~",
                        Value.Tuple [
                          M.bin_op (|
                            "-",
                            M.bin_op (|
                              "**",
                              Value.Integer 2,
                              Value.Tuple [
                                M.bin_op (|
                                  "*",
                                  Value.Integer 8,
                                  Value.Tuple [
                                    M.bin_op (|
                                      "+",
                                      M.bin_op (|
                                        "-",
                                        Value.Integer 32,
                                        M.get_name (| "shortest" |)
                                      |),
                                      M.get_name (| "idx" |)
                                    |)
                                  ]
                                |)
                              ]
                            |),
                            Value.Integer 1
                          |)
                        ]
                      |)
                    |) in
                  Value.Tuple []
                else
                  Value.Tuple [] in
              let _ :=
                M.define (|
                  [ "diff" ],
                  Value.Default
                |) in
              let _ :=
                let _ :=
                  M.assign (|
                    "=",
                    M.get_name (| "diff" |),
                    M.bin_op (|
                      "-",
                      Value.Tuple [
                        M.bin_op (|
                          "&",
                          M.get_name (| "a" |),
                          M.get_name (| "mask" |)
                        |)
                      ],
                      Value.Tuple [
                        M.bin_op (|
                          "&",
                          M.get_name (| "b" |),
                          M.get_name (| "mask" |)
                        |)
                      ]
                    |)
                  |) in
                Value.Tuple [] in
              let _ :=
                if M.bin_op (|
                  "!=",
                  M.get_name (| "diff" |),
                  Value.Integer 0
                |) then
                  M.return_ (|
                    M.call (|
                      Ty.path "int",
                      [
                        M.get_name (| "diff" |)
                      ]
                    |)
                  |)
                else
                  Value.Tuple [] in
              Value.Tuple []
            else
              Value.Tuple [] in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "selfptr" |),
              Value.Integer 32
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "otherptr" |),
              Value.Integer 32
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "-",
            M.call (|
              Ty.path "int",
              [
                M.member_access (|
                  M.get_name (| "self" |),
                  "_len"
                |)
              ]
            |),
            M.call (|
              Ty.path "int",
              [
                M.member_access (|
                  M.get_name (| "other" |),
                  "_len"
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition equals (α : list Value.t) : M :=
    match α with
    | [self, other] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.call (|
              M.get_name (| "compare" |),
              [
                M.get_name (| "self" |),
                M.get_name (| "other" |)
              ]
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition nextRune (α : list Value.t) : M :=
    match α with
    | [self, rune] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rune" |),
            "_ptr"
          |),
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "rune" |),
                "_len"
              |),
              Value.Integer 0
            |) in
          let _ :=
            M.return_ (|
              M.get_name (| "rune" |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "l" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 582
src: 9635:65:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 9646:1:0declaration: 580isSlot: isOffset: alueSize: src: 9675:4:0declaration: 546isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        if M.bin_op (|
          "<",
          M.get_name (| "b" |),
          Value.Integer 0x80
        |) then
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "l" |),
              Value.Integer 1
            |) in
          Value.Tuple []
        else
          if M.bin_op (|
            "<",
            M.get_name (| "b" |),
            Value.Integer 0xE0
          |) then
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "l" |),
                Value.Integer 2
              |) in
            Value.Tuple []
          else
            if M.bin_op (|
              "<",
              M.get_name (| "b" |),
              Value.Integer 0xF0
            |) then
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "l" |),
                  Value.Integer 3
                |) in
              Value.Tuple []
            else
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "l" |),
                  Value.Integer 4
                |) in
              Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "l" |),
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |)
        |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "rune" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              Value.Integer 0
            |) in
          let _ :=
            M.return_ (|
              M.get_name (| "rune" |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "+=",
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |),
          M.get_name (| "l" |)
        |) in
      let _ :=
        M.assign (|
          "-=",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.get_name (| "l" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "rune" |),
            "_len"
          |),
          M.get_name (| "l" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "rune" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition nextRune (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        M.call (|
          M.get_name (| "nextRune" |),
          [
            M.get_name (| "self" |),
            M.get_name (| "ret" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition ord (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          Value.Integer 0
        |) then
          let _ :=
            M.return_ (|
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "word" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "length" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "divisor" ],
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 248
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 707
src: 10997:47:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 11031:4:0declaration: 682isSlot: isOffset: alueSize: src: 11008:4:0declaration: 696isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.define (|
          [ "b" ],
          M.bin_op (|
            "/",
            M.get_name (| "word" |),
            M.get_name (| "divisor" |)
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "<",
          M.get_name (| "b" |),
          Value.Integer 0x80
        |) then
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "ret" |),
              M.get_name (| "b" |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "length" |),
              Value.Integer 1
            |) in
          Value.Tuple []
        else
          if M.bin_op (|
            "<",
            M.get_name (| "b" |),
            Value.Integer 0xE0
          |) then
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "ret" |),
                M.bin_op (|
                  "&",
                  M.get_name (| "b" |),
                  Value.Integer 0x1F
                |)
              |) in
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "length" |),
                Value.Integer 2
              |) in
            Value.Tuple []
          else
            if M.bin_op (|
              "<",
              M.get_name (| "b" |),
              Value.Integer 0xF0
            |) then
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "ret" |),
                  M.bin_op (|
                    "&",
                    M.get_name (| "b" |),
                    Value.Integer 0x0F
                  |)
                |) in
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "length" |),
                  Value.Integer 3
                |) in
              Value.Tuple []
            else
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "ret" |),
                  M.bin_op (|
                    "&",
                    M.get_name (| "b" |),
                    Value.Integer 0x07
                  |)
                |) in
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "length" |),
                  Value.Integer 4
                |) in
              Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">",
          M.get_name (| "length" |),
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 1
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.get_name (| "length" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "divisor" |),
              M.bin_op (|
                "/",
                M.get_name (| "divisor" |),
                Value.Integer 256
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "b" |),
              M.bin_op (|
                "&",
                Value.Tuple [
                  M.bin_op (|
                    "/",
                    M.get_name (| "word" |),
                    M.get_name (| "divisor" |)
                  |)
                ],
                Value.Integer 0xFF
              |)
            |) in
          let _ :=
            if M.bin_op (|
              "!=",
              M.bin_op (|
                "&",
                M.get_name (| "b" |),
                Value.Integer 0xC0
              |),
              Value.Integer 0x80
            |) then
              let _ :=
                M.return_ (|
                  Value.Integer 0
                |) in
              Value.Tuple []
            else
              Value.Tuple [] in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "ret" |),
              M.bin_op (|
                "|",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "ret" |),
                    Value.Integer 64
                  |)
                ],
                Value.Tuple [
                  M.bin_op (|
                    "&",
                    M.get_name (| "b" |),
                    Value.Integer 0x3F
                  |)
                ]
              |)
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "ret" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition keccak (α : list Value.t) : M :=
    match α with
    | [self] =>
      let _ :=
        (* Beginning of a node! *)
id: 835
src: 12051:84:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 12074:3:0declaration: 833isSlot: isOffset: alueSize: src: 12101:4:0declaration: 830isSlot: isOffset: alueSize: src: 12119:4:0declaration: 830isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition startsWith (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        if M.bin_op (|
          "<",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_len"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool false
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_ptr"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool true
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "equal" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 869
src: 12661:246:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 12828:5:0declaration: 867isSlot: isOffset: alueSize: src: 12704:6:0declaration: 843isSlot: isOffset: alueSize: src: 12801:6:0declaration: 843isSlot: isOffset: alueSize: src: 12749:4:0declaration: 840isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.get_name (| "equal" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition beyond (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        if M.bin_op (|
          "<",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_len"
          |)
        |) then
          let _ :=
            M.return_ (|
              M.get_name (| "self" |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "equal" ],
          Value.Bool true
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_ptr"
          |)
        |) then
          let _ :=
            (* Beginning of a node! *)
id: 903
src: 13456:266:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 13639:5:0declaration: 895isSlot: isOffset: alueSize: src: 13503:6:0declaration: 879isSlot: isOffset: alueSize: src: 13608:6:0declaration: 879isSlot: isOffset: alueSize: src: 13552:4:0declaration: 876isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.get_name (| "equal" |) then
          let _ :=
            M.assign (|
              "-=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |)
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "self" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition endsWith (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        if M.bin_op (|
          "<",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_len"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool false
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "selfptr" ],
          M.bin_op (|
            "-",
            M.bin_op (|
              "+",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |),
            M.member_access (|
              M.get_name (| "needle" |),
              "_len"
            |)
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "selfptr" |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_ptr"
          |)
        |) then
          let _ :=
            M.return_ (|
              Value.Bool true
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "equal" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 968
src: 14446:196:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 14563:5:0declaration: 966isSlot: isOffset: alueSize: src: 14489:6:0declaration: 932isSlot: isOffset: alueSize: src: 14536:6:0declaration: 932isSlot: isOffset: alueSize: src: 14585:7:0declaration: 947isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.get_name (| "equal" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition until (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        if M.bin_op (|
          "<",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_len"
          |)
        |) then
          let _ :=
            M.return_ (|
              M.get_name (| "self" |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "selfptr" ],
          M.bin_op (|
            "-",
            M.bin_op (|
              "+",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |),
            M.member_access (|
              M.get_name (| "needle" |),
              "_len"
            |)
          |)
        |) in
      let _ :=
        M.define (|
          [ "equal" ],
          Value.Bool true
        |) in
      let _ :=
        if M.bin_op (|
          "!=",
          M.get_name (| "selfptr" |),
          M.member_access (|
            M.get_name (| "needle" |),
            "_ptr"
          |)
        |) then
          let _ :=
            (* Beginning of a node! *)
id: 1012
src: 15241:212:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 15370:5:0declaration: 1005isSlot: isOffset: alueSize: src: 15288:6:0declaration: 978isSlot: isOffset: alueSize: src: 15339:6:0declaration: 978isSlot: isOffset: alueSize: src: 15392:7:0declaration: 994isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.get_name (| "equal" |) then
          let _ :=
            M.assign (|
              "-=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "self" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition findPtr (α : list Value.t) : M :=
    match α with
    | [selflen, selfptr, needlelen, needleptr] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.get_name (| "selfptr" |)
        |) in
      let _ :=
        M.define (|
          [ "idx" ],
          Value.Default
        |) in
      let _ :=
        if M.bin_op (|
          "<=",
          M.get_name (| "needlelen" |),
          M.get_name (| "selflen" |)
        |) then
          let _ :=
            if M.bin_op (|
              "<=",
              M.get_name (| "needlelen" |),
              Value.Integer 32
            |) then
              let _ :=
                M.define (|
                  [ "mask" ],
                  M.call (|
                    Ty.path "bytes32",
                    [
                      M.un_op (|
                        true,
                        "~",
                        Value.Tuple [
                          M.bin_op (|
                            "-",
                            M.bin_op (|
                              "**",
                              Value.Integer 2,
                              Value.Tuple [
                                M.bin_op (|
                                  "*",
                                  Value.Integer 8,
                                  Value.Tuple [
                                    M.bin_op (|
                                      "-",
                                      Value.Integer 32,
                                      M.get_name (| "needlelen" |)
                                    |)
                                  ]
                                |)
                              ]
                            |),
                            Value.Integer 1
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.define (|
                  [ "needledata" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1076
src: 16072:54:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16119:4:0declaration: 1055isSlot: isOffset: alueSize: src: 16083:10:0declaration: 1074isSlot: isOffset: alueSize: src: 16107:9:0declaration: 1036isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.define (|
                  [ "end" ],
                  M.bin_op (|
                    "-",
                    M.bin_op (|
                      "+",
                      M.get_name (| "selfptr" |),
                      M.get_name (| "selflen" |)
                    |),
                    M.get_name (| "needlelen" |)
                  |)
                |) in
              let _ :=
                M.define (|
                  [ "ptrdata" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1088
src: 16235:45:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16273:4:0declaration: 1055isSlot: isOffset: alueSize: src: 16267:3:0declaration: 1042isSlot: isOffset: alueSize: src: 16246:7:0declaration: 1086isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.while (|
                  WhileKind.While,
                  M.bin_op (|
                    "!=",
                    M.get_name (| "ptrdata" |),
                    M.get_name (| "needledata" |)
                  |),
                  let _ :=
                    if M.bin_op (|
                      ">=",
                      M.get_name (| "ptr" |),
                      M.get_name (| "end" |)
                    |) then
                      M.return_ (|
                        M.bin_op (|
                          "+",
                          M.get_name (| "selfptr" |),
                          M.get_name (| "selflen" |)
                        |)
                      |)
                    else
                      Value.Tuple [] in
                  let _ :=
                    M.un_op (|
                      false,
                      "++",
                      M.get_name (| "ptr" |)
                    |) in
                  let _ :=
                    (* Beginning of a node! *)
id: 1103
src: 16463:45:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16501:4:0declaration: 1055isSlot: isOffset: alueSize: src: 16495:3:0declaration: 1042isSlot: isOffset: alueSize: src: 16474:7:0declaration: 1086isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
                  Value.Tuple []
                |) in
              let _ :=
                M.return_ (|
                  M.get_name (| "ptr" |)
                |) in
              Value.Tuple []
            else
              let _ :=
                M.define (|
                  [ "hash" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1112
src: 16671:52:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16682:4:0declaration: 1110isSlot: isOffset: alueSize: src: 16711:9:0declaration: 1034isSlot: isOffset: alueSize: src: 16700:9:0declaration: 1036isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.for_ (|
                  M.assign (|
                    "=",
                    M.get_name (| "idx" |),
                    Value.Integer 0
                  |),
                  M.bin_op (|
                    "<=",
                    M.get_name (| "idx" |),
                    M.bin_op (|
                      "-",
                      M.get_name (| "selflen" |),
                      M.get_name (| "needlelen" |)
                    |)
                  |),
                  M.un_op (|
                    false,
                    "++",
                    M.get_name (| "idx" |)
                  |),
                  let _ :=
                    M.define (|
                      [ "testHash" ],
                      Value.Default
                    |) in
                  let _ :=
                    (* Beginning of a node! *)
id: 1128
src: 16850:50:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16888:9:0declaration: 1034isSlot: isOffset: alueSize: src: 16883:3:0declaration: 1042isSlot: isOffset: alueSize: src: 16861:8:0declaration: 1126isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
                  let _ :=
                    if M.bin_op (|
                      "==",
                      M.get_name (| "hash" |),
                      M.get_name (| "testHash" |)
                    |) then
                      M.return_ (|
                        M.get_name (| "ptr" |)
                      |)
                    else
                      Value.Tuple [] in
                  let _ :=
                    M.assign (|
                      "+=",
                      M.get_name (| "ptr" |),
                      Value.Integer 1
                    |) in
                  Value.Tuple []
                |) in
              Value.Tuple [] in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "selfptr" |),
            M.get_name (| "selflen" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition rfindPtr (α : list Value.t) : M :=
    match α with
    | [selflen, selfptr, needlelen, needleptr] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          Value.Default
        |) in
      let _ :=
        if M.bin_op (|
          "<=",
          M.get_name (| "needlelen" |),
          M.get_name (| "selflen" |)
        |) then
          let _ :=
            if M.bin_op (|
              "<=",
              M.get_name (| "needlelen" |),
              Value.Integer 32
            |) then
              let _ :=
                M.define (|
                  [ "mask" ],
                  M.call (|
                    Ty.path "bytes32",
                    [
                      M.un_op (|
                        true,
                        "~",
                        Value.Tuple [
                          M.bin_op (|
                            "-",
                            M.bin_op (|
                              "**",
                              Value.Integer 2,
                              Value.Tuple [
                                M.bin_op (|
                                  "*",
                                  Value.Integer 8,
                                  Value.Tuple [
                                    M.bin_op (|
                                      "-",
                                      Value.Integer 32,
                                      M.get_name (| "needlelen" |)
                                    |)
                                  ]
                                |)
                              ]
                            |),
                            Value.Integer 1
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.define (|
                  [ "needledata" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1194
src: 17570:54:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17617:4:0declaration: 1173isSlot: isOffset: alueSize: src: 17581:10:0declaration: 1192isSlot: isOffset: alueSize: src: 17605:9:0declaration: 1158isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "ptr" |),
                  M.bin_op (|
                    "-",
                    M.bin_op (|
                      "+",
                      M.get_name (| "selfptr" |),
                      M.get_name (| "selflen" |)
                    |),
                    M.get_name (| "needlelen" |)
                  |)
                |) in
              let _ :=
                M.define (|
                  [ "ptrdata" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1206
src: 17728:45:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17766:4:0declaration: 1173isSlot: isOffset: alueSize: src: 17760:3:0declaration: 1164isSlot: isOffset: alueSize: src: 17739:7:0declaration: 1204isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.while (|
                  WhileKind.While,
                  M.bin_op (|
                    "!=",
                    M.get_name (| "ptrdata" |),
                    M.get_name (| "needledata" |)
                  |),
                  let _ :=
                    if M.bin_op (|
                      "<=",
                      M.get_name (| "ptr" |),
                      M.get_name (| "selfptr" |)
                    |) then
                      M.return_ (|
                        M.get_name (| "selfptr" |)
                      |)
                    else
                      Value.Tuple [] in
                  let _ :=
                    M.un_op (|
                      false,
                      "--",
                      M.get_name (| "ptr" |)
                    |) in
                  let _ :=
                    (* Beginning of a node! *)
id: 1219
src: 17950:45:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17988:4:0declaration: 1173isSlot: isOffset: alueSize: src: 17982:3:0declaration: 1164isSlot: isOffset: alueSize: src: 17961:7:0declaration: 1204isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
                  Value.Tuple []
                |) in
              let _ :=
                M.return_ (|
                  M.bin_op (|
                    "+",
                    M.get_name (| "ptr" |),
                    M.get_name (| "needlelen" |)
                  |)
                |) in
              Value.Tuple []
            else
              let _ :=
                M.define (|
                  [ "hash" ],
                  Value.Default
                |) in
              let _ :=
                (* Beginning of a node! *)
id: 1230
src: 18170:52:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 18181:4:0declaration: 1228isSlot: isOffset: alueSize: src: 18210:9:0declaration: 1156isSlot: isOffset: alueSize: src: 18199:9:0declaration: 1158isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "ptr" |),
                  M.bin_op (|
                    "+",
                    M.get_name (| "selfptr" |),
                    Value.Tuple [
                      M.bin_op (|
                        "-",
                        M.get_name (| "selflen" |),
                        M.get_name (| "needlelen" |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.while (|
                  WhileKind.While,
                  M.bin_op (|
                    ">=",
                    M.get_name (| "ptr" |),
                    M.get_name (| "selfptr" |)
                  |),
                  let _ :=
                    M.define (|
                      [ "testHash" ],
                      Value.Default
                    |) in
                  let _ :=
                    (* Beginning of a node! *)
id: 1246
src: 18377:50:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 18415:9:0declaration: 1156isSlot: isOffset: alueSize: src: 18410:3:0declaration: 1164isSlot: isOffset: alueSize: src: 18388:8:0declaration: 1244isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
                  let _ :=
                    if M.bin_op (|
                      "==",
                      M.get_name (| "hash" |),
                      M.get_name (| "testHash" |)
                    |) then
                      M.return_ (|
                        M.bin_op (|
                          "+",
                          M.get_name (| "ptr" |),
                          M.get_name (| "needlelen" |)
                        |)
                      |)
                    else
                      Value.Tuple [] in
                  let _ :=
                    M.assign (|
                      "-=",
                      M.get_name (| "ptr" |),
                      Value.Integer 1
                    |) in
                  Value.Tuple []
                |) in
              Value.Tuple [] in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "selfptr" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition find (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.call (|
            M.get_name (| "findPtr" |),
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_ptr"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "-=",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.bin_op (|
            "-",
            M.get_name (| "ptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |),
          M.get_name (| "ptr" |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "self" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition rfind (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.call (|
            M.get_name (| "rfindPtr" |),
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_ptr"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "self" |),
            "_len"
          |),
          M.bin_op (|
            "-",
            M.get_name (| "ptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |)
          |)
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "self" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition split (α : list Value.t) : M :=
    match α with
    | [self, needle, token] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.call (|
            M.get_name (| "findPtr" |),
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_ptr"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "token" |),
            "_ptr"
          |),
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "token" |),
            "_len"
          |),
          M.bin_op (|
            "-",
            M.get_name (| "ptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |)
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "ptr" |),
          M.bin_op (|
            "+",
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |),
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |)
          |)
        |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          let _ :=
            M.assign (|
              "-=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.bin_op (|
                "+",
                M.member_access (|
                  M.get_name (| "token" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |)
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.bin_op (|
                "+",
                M.get_name (| "ptr" |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |)
              |)
            |) in
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "token" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition split (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.call (|
          M.get_name (| "split" |),
          [
            M.get_name (| "self" |),
            M.get_name (| "needle" |),
            M.get_name (| "token" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition rsplit (α : list Value.t) : M :=
    match α with
    | [self, needle, token] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.call (|
            M.get_name (| "rfindPtr" |),
            [
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_len"
              |),
              M.member_access (|
                M.get_name (| "needle" |),
                "_ptr"
              |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "token" |),
            "_ptr"
          |),
          M.get_name (| "ptr" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "token" |),
            "_len"
          |),
          M.bin_op (|
            "-",
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |),
            Value.Tuple [
              M.bin_op (|
                "-",
                M.get_name (| "ptr" |),
                M.member_access (|
                  M.get_name (| "self" |),
                  "_ptr"
                |)
              |)
            ]
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "ptr" |),
          M.member_access (|
            M.get_name (| "self" |),
            "_ptr"
          |)
        |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          let _ :=
            M.assign (|
              "-=",
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |),
              M.bin_op (|
                "+",
                M.member_access (|
                  M.get_name (| "token" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |)
              |)
            |) in
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.get_name (| "token" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition rsplit (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.call (|
          M.get_name (| "rsplit" |),
          [
            M.get_name (| "self" |),
            M.get_name (| "needle" |),
            M.get_name (| "token" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition count (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.define (|
          [ "ptr" ],
          M.bin_op (|
            "+",
            M.call (|
              M.get_name (| "findPtr" |),
              [
                M.member_access (|
                  M.get_name (| "self" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "self" |),
                  "_ptr"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_ptr"
                |)
              ]
            |),
            M.member_access (|
              M.get_name (| "needle" |),
              "_len"
            |)
          |)
        |) in
      let _ :=
        M.while (|
          WhileKind.While,
          M.bin_op (|
            "<=",
            M.get_name (| "ptr" |),
            M.bin_op (|
              "+",
              M.member_access (|
                M.get_name (| "self" |),
                "_ptr"
              |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |)
          |),
          let _ :=
            M.un_op (|
              false,
              "++",
              M.get_name (| "cnt" |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "ptr" |),
              M.bin_op (|
                "+",
                M.call (|
                  M.get_name (| "findPtr" |),
                  [
                    M.bin_op (|
                      "-",
                      M.member_access (|
                        M.get_name (| "self" |),
                        "_len"
                      |),
                      Value.Tuple [
                        M.bin_op (|
                          "-",
                          M.get_name (| "ptr" |),
                          M.member_access (|
                            M.get_name (| "self" |),
                            "_ptr"
                          |)
                        |)
                      ]
                    |),
                    M.get_name (| "ptr" |),
                    M.member_access (|
                      M.get_name (| "needle" |),
                      "_len"
                    |),
                    M.member_access (|
                      M.get_name (| "needle" |),
                      "_ptr"
                    |)
                  ]
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |)
              |)
            |) in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition contains (α : list Value.t) : M :=
    match α with
    | [self, needle] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.call (|
              M.get_name (| "rfindPtr" |),
              [
                M.member_access (|
                  M.get_name (| "self" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "self" |),
                  "_ptr"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "needle" |),
                  "_ptr"
                |)
              ]
            |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition concat (α : list Value.t) : M :=
    match α with
    | [self, other] =>
      let _ :=
        M.define (|
          [ "ret" ],
          M.call (|
            NewExpression Ty.path "string"
,
            [
              M.bin_op (|
                "+",
                M.member_access (|
                  M.get_name (| "self" |),
                  "_len"
                |),
                M.member_access (|
                  M.get_name (| "other" |),
                  "_len"
                |)
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "retptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 1653
src: 24531:35:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 24556:3:0declaration: 1640isSlot: isOffset: alueSize: src: 24542:6:0declaration: 1651isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "memcpy" |),
          [
            M.get_name (| "retptr" |),
            M.member_access (|
              M.get_name (| "self" |),
              "_ptr"
            |),
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "memcpy" |),
          [
            M.bin_op (|
              "+",
              M.get_name (| "retptr" |),
              M.member_access (|
                M.get_name (| "self" |),
                "_len"
              |)
            |),
            M.member_access (|
              M.get_name (| "other" |),
              "_ptr"
            |),
            M.member_access (|
              M.get_name (| "other" |),
              "_len"
            |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "ret" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition join (α : list Value.t) : M :=
    match α with
    | [self, parts] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "parts" |),
            "length"
          |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.String ""
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "length" ],
          M.bin_op (|
            "*",
            M.member_access (|
              M.get_name (| "self" |),
              "_len"
            |),
            Value.Tuple [
              M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "parts" |),
                  "length"
                |),
                Value.Integer 1
              |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "parts" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "+=",
            M.get_name (| "length" |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "parts" |),
                Some (M.get_name (| "i" |))
              |),
              "_len"
            |)
          |)
        |) in
      let _ :=
        M.define (|
          [ "ret" ],
          M.call (|
            NewExpression Ty.path "string"
,
            [
              M.get_name (| "length" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "retptr" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 1735
src: 25400:35:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 25425:3:0declaration: 1726isSlot: isOffset: alueSize: src: 25411:6:0declaration: 1733isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "parts" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.call (|
              M.get_name (| "memcpy" |),
              [
                M.get_name (| "retptr" |),
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "parts" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "_ptr"
                |),
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "parts" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "_len"
                |)
              ]
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "retptr" |),
              M.member_access (|
                M.index_access (|
                  M.get_name (| "parts" |),
                  Some (M.get_name (| "i" |))
                |),
                "_len"
              |)
            |) in
          let _ :=
            if M.bin_op (|
              "<",
              M.get_name (| "i" |),
              M.bin_op (|
                "-",
                M.member_access (|
                  M.get_name (| "parts" |),
                  "length"
                |),
                Value.Integer 1
              |)
            |) then
              let _ :=
                M.call (|
                  M.get_name (| "memcpy" |),
                  [
                    M.get_name (| "retptr" |),
                    M.member_access (|
                      M.get_name (| "self" |),
                      "_ptr"
                    |),
                    M.member_access (|
                      M.get_name (| "self" |),
                      "_len"
                    |)
                  ]
                |) in
              let _ :=
                M.assign (|
                  "+=",
                  M.get_name (| "retptr" |),
                  M.member_access (|
                    M.get_name (| "self" |),
                    "_len"
                  |)
                |) in
              Value.Tuple []
            else
              Value.Tuple [] in
          Value.Tuple []
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "ret" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End strings.
