(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* License: MIT *)

(* Pragma solidity^0.8.0 *)

(* Library *)
Module InlineAsmBase64.
  Definition _TABLE : Value.t :=
    Value.String "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".

  Definition encode (α : list Value.t) : M :=
    match α with
    | [data] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.String ""
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "table" ],
          M.get_name (| "_TABLE" |)
        |) in
      let _ :=
        M.define (|
          [ "encodedLen" ],
          M.bin_op (|
            "*",
            Value.Integer 4,
            Value.Tuple [
              M.bin_op (|
                "/",
                Value.Tuple [
                  M.bin_op (|
                    "+",
                    M.member_access (|
                      M.get_name (| "data" |),
                      "length"
                    |),
                    Value.Integer 2
                  |)
                ],
                Value.Integer 3
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          M.call (|
            NewExpression Ty.path "string"
,
            [
              M.get_name (| "encodedLen" |)
            ]
          |)
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 45
src: 1402:2071:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1656:4:0declaration: 9isSlot: isOffset: alueSize: src: 1706:4:0declaration: 9isSlot: isOffset: alueSize: src: 3237:4:0declaration: 9isSlot: isOffset: alueSize: src: 1496:10:0declaration: 26isSlot: isOffset: alueSize: src: 1488:6:0declaration: 39isSlot: isOffset: alueSize: src: 1803:6:0declaration: 39isSlot: isOffset: alueSize: src: 1581:5:0declaration: 22isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.get_name (| "result" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End InlineAsmBase64.
