(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* License: MIT *)

(* Pragma solidity^0.8.0 *)

(* Library *)
Module NoAsmBase64.
  Definition TABLE : Value.t :=
    Value.String "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".

  Definition encode (α : list Value.t) : M :=
    match α with
    | [data] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "data" |),
            "length"
          |),
          Value.Integer 0
        |) then
          M.return_ (|
            Value.String ""
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "table" ],
          M.get_name (| "TABLE" |)
        |) in
      let _ :=
        M.define (|
          [ "result" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              M.bin_op (|
                "*",
                Value.Integer 4,
                Value.Tuple [
                  M.bin_op (|
                    "/",
                    Value.Tuple [
                      M.bin_op (|
                        "+",
                        M.member_access (|
                          M.get_name (| "data" |),
                          "length"
                        |),
                        Value.Integer 2
                      |)
                    ],
                    Value.Integer 3
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "resultPtr" ],
          Value.Integer 0
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "dataPtr" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "dataPtr" |),
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |)
          |),
          M.assign (|
            "+=",
            M.get_name (| "dataPtr" |),
            Value.Integer 3
          |),
          let _ :=
            M.define (|
              [ "chunk" ],
              M.bin_op (|
                "+",
                M.bin_op (|
                  "+",
                  Value.Tuple [
                    Value.Tuple [
                      M.bin_op (|
                        "<<",
                        M.call (|
                          Ty.path "uint24",
                          [
                            M.call (|
                              Ty.path "uint8",
                              [
                                M.index_access (|
                                  M.get_name (| "data" |),
                                  Some (M.bin_op (|
                                    "+",
                                    M.get_name (| "dataPtr" |),
                                    Value.Integer 0
                                  |))
                                |)
                              ]
                            |)
                          ]
                        |),
                        Value.Integer 16
                      |)
                    ]
                  ],
                  Value.Tuple [
                    Conditional M.bin_op (|
                      "<",
                      M.bin_op (|
                        "+",
                        M.get_name (| "dataPtr" |),
                        Value.Integer 1
                      |),
                      M.member_access (|
                        M.get_name (| "data" |),
                        "length"
                      |)
                    |) Value.Tuple [
                      M.bin_op (|
                        "<<",
                        M.call (|
                          Ty.path "uint24",
                          [
                            M.call (|
                              Ty.path "uint8",
                              [
                                M.index_access (|
                                  M.get_name (| "data" |),
                                  Some (M.bin_op (|
                                    "+",
                                    M.get_name (| "dataPtr" |),
                                    Value.Integer 1
                                  |))
                                |)
                              ]
                            |)
                          ]
                        |),
                        Value.Integer 8
                      |)
                    ] Value.Integer 0

                  ]
                |),
                Value.Tuple [
                  Conditional M.bin_op (|
                    "<",
                    M.bin_op (|
                      "+",
                      M.get_name (| "dataPtr" |),
                      Value.Integer 2
                    |),
                    M.member_access (|
                      M.get_name (| "data" |),
                      "length"
                    |)
                  |) Value.Tuple [
                    M.call (|
                      Ty.path "uint24",
                      [
                        M.call (|
                          Ty.path "uint8",
                          [
                            M.index_access (|
                              M.get_name (| "data" |),
                              Some (M.bin_op (|
                                "+",
                                M.get_name (| "dataPtr" |),
                                Value.Integer 2
                              |))
                            |)
                          ]
                        |)
                      ]
                    |)
                  ] Value.Integer 0

                ]
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  false,
                  "++",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              M.index_access (|
                M.get_name (| "table" |),
                Some (M.bin_op (|
                  "&",
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.bin_op (|
                        ">>",
                        M.get_name (| "chunk" |),
                        Value.Integer 18
                      |)
                    ]
                  |),
                  Value.Integer 0x3f
                |))
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  false,
                  "++",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              M.index_access (|
                M.get_name (| "table" |),
                Some (M.bin_op (|
                  "&",
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.bin_op (|
                        ">>",
                        M.get_name (| "chunk" |),
                        Value.Integer 12
                      |)
                    ]
                  |),
                  Value.Integer 0x3f
                |))
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  false,
                  "++",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              M.index_access (|
                M.get_name (| "table" |),
                Some (M.bin_op (|
                  "&",
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.bin_op (|
                        ">>",
                        M.get_name (| "chunk" |),
                        Value.Integer 6
                      |)
                    ]
                  |),
                  Value.Integer 0x3f
                |))
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  false,
                  "++",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              M.index_access (|
                M.get_name (| "table" |),
                Some (M.bin_op (|
                  "&",
                  M.call (|
                    Ty.path "uint8",
                    [
                      M.get_name (| "chunk" |)
                    ]
                  |),
                  Value.Integer 0x3f
                |))
              |)
            |) in
          Value.Tuple []
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.bin_op (|
            "%",
            M.member_access (|
              M.get_name (| "data" |),
              "length"
            |),
            Value.Integer 3
          |),
          Value.Integer 1
        |) then
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  true,
                  "--",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              Value.Integer 0x3d
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "result" |),
                Some (M.un_op (|
                  true,
                  "--",
                  M.get_name (| "resultPtr" |)
                |))
              |),
              Value.Integer 0x3d
            |) in
          Value.Tuple []
        else
          if M.bin_op (|
            "==",
            M.bin_op (|
              "%",
              M.member_access (|
                M.get_name (| "data" |),
                "length"
              |),
              Value.Integer 3
            |),
            Value.Integer 2
          |) then
            let _ :=
              M.assign (|
                "=",
                M.index_access (|
                  M.get_name (| "result" |),
                  Some (M.un_op (|
                    true,
                    "--",
                    M.get_name (| "resultPtr" |)
                  |))
                |),
                Value.Integer 0x3d
              |) in
            Value.Tuple []
          else
            Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.call (|
              Ty.path "string",
              [
                M.get_name (| "result" |)
              ]
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End NoAsmBase64.
