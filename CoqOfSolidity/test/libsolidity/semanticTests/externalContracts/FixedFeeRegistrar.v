(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma solidity>=0.4.0<0.9.0 *)

(* Contract *)
Module Registrar.
  (* Event Changed *)

  Definition owner (α : list Value.t) : M :=
    match α with
    | [_name] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition addr (α : list Value.t) : M :=
    match α with
    | [_name] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition subRegistrar (α : list Value.t) : M :=
    match α with
    | [_name] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition content (α : list Value.t) : M :=
    match α with
    | [_name] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End Registrar.


(* Contract *)
Module FixedFeeRegistrar.
  (* Struct Record *)

  (* Beginning of a node! *)
id: 59
src: 722:93:0
nodeType: ModifierDefinition
name: onlyrecordowner
nameLocation: 731:15:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition _name : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    if M.bin_op (|
      "==",
      M.member_access (|
        M.call (|
          M.get_name (| "m_record" |),
          [
            M.get_name (| "_name" |)
          ]
        |),
        "owner"
      |),
      M.member_access (|
        M.get_name (| "msg" |),
        "sender"
      |)
    |) then
      (* Beginning of a node! *)
id: 56
src: 811:1:0
nodeType: PlaceholderStatement

    else
      Value.Tuple [] in
  Value.Tuple []


  Definition reserve (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.define (|
          [ "rec" ],
          M.call (|
            M.get_name (| "m_record" |),
            [
              M.get_name (| "_name" |)
            ]
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "&&",
          M.bin_op (|
            "==",
            M.member_access (|
              M.get_name (| "rec" |),
              "owner"
            |),
            Value.Integer 0x0000000000000000000000000000000000000000
          |),
          M.bin_op (|
            ">=",
            M.member_access (|
              M.get_name (| "msg" |),
              "value"
            |),
            M.get_name (| "c_fee" |)
          |)
        |) then
          let _ :=
            M.assign (|
              "=",
              M.member_access (|
                M.get_name (| "rec" |),
                "owner"
              |),
              M.member_access (|
                M.get_name (| "msg" |),
                "sender"
              |)
            |) in
          let _ :=
            EmitStatement M.call (|
              M.get_name (| "Changed" |),
              [
                M.get_name (| "_name" |)
              ]
            |)
 in
          Value.Tuple []
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition disown (α : list Value.t) : M :=
    match α with
    | [_name, _refund] =>
      let _ :=
        M.un_op (|
          true,
          "delete",
          M.index_access (|
            M.get_name (| "m_recordData" |),
            Some (M.bin_op (|
              "/",
              M.call (|
                Ty.path "uint",
                [
                  M.call (|
                    M.get_name (| "keccak256" |),
                    [
                      M.call (|
                        Ty.path "bytes",
                        [
                          M.get_name (| "_name" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              Value.Integer 8
            |))
          |)
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "_refund" |),
              "send"
            |),
            [
              M.get_name (| "c_fee" |)
            ]
          |)
        |) then
          M.call (|
            M.get_name (| "revert" |),
            []
          |)
        else
          Value.Tuple [] in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Changed" |),
          [
            M.get_name (| "_name" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transfer (α : list Value.t) : M :=
    match α with
    | [_name, _newOwner] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "owner"
          |),
          M.get_name (| "_newOwner" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Changed" |),
          [
            M.get_name (| "_name" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setAddr (α : list Value.t) : M :=
    match α with
    | [_name, _a] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "addr"
          |),
          M.get_name (| "_a" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Changed" |),
          [
            M.get_name (| "_name" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setSubRegistrar (α : list Value.t) : M :=
    match α with
    | [_name, _registrar] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "subRegistrar"
          |),
          M.get_name (| "_registrar" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Changed" |),
          [
            M.get_name (| "_name" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition setContent (α : list Value.t) : M :=
    match α with
    | [_name, _content] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "content"
          |),
          M.get_name (| "_content" |)
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "Changed" |),
          [
            M.get_name (| "_name" |)
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition record (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.define (|
          [ "rec" ],
          M.call (|
            M.get_name (| "m_record" |),
            [
              M.get_name (| "_name" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "o_addr" |),
          M.member_access (|
            M.get_name (| "rec" |),
            "addr"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "o_subRegistrar" |),
          M.member_access (|
            M.get_name (| "rec" |),
            "subRegistrar"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "o_content" |),
          M.member_access (|
            M.get_name (| "rec" |),
            "content"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "o_owner" |),
          M.member_access (|
            M.get_name (| "rec" |),
            "owner"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition addr (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "addr"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition subRegistrar (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "subRegistrar"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition content (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "content"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition owner (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "m_record" |),
              [
                M.get_name (| "_name" |)
              ]
            |),
            "owner"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition m_recordData : Value.t :=
    undefined.

  Definition m_record (α : list Value.t) : M :=
    match α with
    | [_name] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "m_recordData" |),
            Some (M.bin_op (|
              "/",
              M.call (|
                Ty.path "uint",
                [
                  M.call (|
                    M.get_name (| "keccak256" |),
                    [
                      M.call (|
                        Ty.path "bytes",
                        [
                          M.get_name (| "_name" |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              Value.Integer 8
            |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition c_fee : Value.t :=
    Value.Integer 69.
End FixedFeeRegistrar.
