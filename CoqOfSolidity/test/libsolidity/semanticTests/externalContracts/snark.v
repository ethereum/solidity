(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module Pairing.
  (* Struct G1Point *)

  (* Struct G2Point *)

  Definition P1 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "G1Point" |),
            [
              Value.Integer 1,
              Value.Integer 2
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition P2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "G2Point" |),
            [
              Value.Array [
                Value.Integer 11559732032986387107991004021392285783925812861821192530917403151452391805634,
                Value.Integer 10857046999023057135944570762232829481370756359578518086990519993285655852781
              ],
              Value.Array [
                Value.Integer 4082367875863433681332203403145435568316851327593401208105741076214120093531,
                Value.Integer 8495653923123431417604973247489272438418190587263600148770280649306958101930
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition negate (α : list Value.t) : M :=
    match α with
    | [p] =>
      let _ :=
        M.define (|
          [ "q" ],
          Value.Integer 21888242871839275222246405745257275088696311157297823662689037894645226208583
        |) in
      let _ :=
        if M.bin_op (|
          "&&",
          M.bin_op (|
            "==",
            M.member_access (|
              M.get_name (| "p" |),
              "X"
            |),
            Value.Integer 0
          |),
          M.bin_op (|
            "==",
            M.member_access (|
              M.get_name (| "p" |),
              "Y"
            |),
            Value.Integer 0
          |)
        |) then
          M.return_ (|
            M.call (|
              M.get_name (| "G1Point" |),
              [
                Value.Integer 0,
                Value.Integer 0
              ]
            |)
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "G1Point" |),
            [
              M.member_access (|
                M.get_name (| "p" |),
                "X"
              |),
              M.bin_op (|
                "-",
                M.get_name (| "q" |),
                Value.Tuple [
                  M.bin_op (|
                    "%",
                    M.member_access (|
                      M.get_name (| "p" |),
                      "Y"
                    |),
                    M.get_name (| "q" |)
                  |)
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition add (α : list Value.t) : M :=
    match α with
    | [p1, p2] =>
      let _ :=
        M.define (|
          [ "input" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "p1" |),
            "X"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "p1" |),
            "Y"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 2)
          |),
          M.member_access (|
            M.get_name (| "p2" |),
            "X"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 3)
          |),
          M.member_access (|
            M.get_name (| "p2" |),
            "Y"
          |)
        |) in
      let _ :=
        M.define (|
          [ "success" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 137
src: 1336:166:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1390:5:0declaration: 104isSlot: isOffset: alueSize: src: 1403:1:0declaration: 97isSlot: isOffset: alueSize: src: 1350:7:0declaration: 135isSlot: isOffset: alueSize: src: 1470:7:0declaration: 135isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "success" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [p, s] =>
      let _ :=
        M.define (|
          [ "input" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 0)
          |),
          M.member_access (|
            M.get_name (| "p" |),
            "X"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 1)
          |),
          M.member_access (|
            M.get_name (| "p" |),
            "Y"
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "s" |)
        |) in
      let _ :=
        M.define (|
          [ "success" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 185
src: 1824:166:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 1878:5:0declaration: 160isSlot: isOffset: alueSize: src: 1891:1:0declaration: 153isSlot: isOffset: alueSize: src: 1838:7:0declaration: 183isSlot: isOffset: alueSize: src: 1958:7:0declaration: 183isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "success" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pairing (α : list Value.t) : M :=
    match α with
    | [p1, p2] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "p1" |),
                "length"
              |),
              M.member_access (|
                M.get_name (| "p2" |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "elements" ],
          M.member_access (|
            M.get_name (| "p1" |),
            "length"
          |)
        |) in
      let _ :=
        M.define (|
          [ "inputSize" ],
          M.bin_op (|
            "*",
            M.member_access (|
              M.get_name (| "p1" |),
              "length"
            |),
            Value.Integer 6
          |)
        |) in
      let _ :=
        M.define (|
          [ "input" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              M.get_name (| "inputSize" |)
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.get_name (| "elements" |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 0
                |))
              |),
              M.member_access (|
                M.index_access (|
                  M.get_name (| "p1" |),
                  Some (M.get_name (| "i" |))
                |),
                "X"
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 1
                |))
              |),
              M.member_access (|
                M.index_access (|
                  M.get_name (| "p1" |),
                  Some (M.get_name (| "i" |))
                |),
                "Y"
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 2
                |))
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "p2" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "X"
                |),
                Some (Value.Integer 0)
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 3
                |))
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "p2" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "X"
                |),
                Some (Value.Integer 1)
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 4
                |))
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "p2" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "Y"
                |),
                Some (Value.Integer 0)
              |)
            |) in
          let _ :=
            M.assign (|
              "=",
              M.index_access (|
                M.get_name (| "input" |),
                Some (M.bin_op (|
                  "+",
                  M.bin_op (|
                    "*",
                    M.get_name (| "i" |),
                    Value.Integer 6
                  |),
                  Value.Integer 5
                |))
              |),
              M.index_access (|
                M.member_access (|
                  M.index_access (|
                    M.get_name (| "p2" |),
                    Some (M.get_name (| "i" |))
                  |),
                  "Y"
                |),
                Some (Value.Integer 1)
              |)
            |) in
          Value.Tuple []
        |) in
      let _ :=
        M.define (|
          [ "out" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "success" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 344
src: 2724:195:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 2782:5:0declaration: 229isSlot: isOffset: alueSize: src: 2800:9:0declaration: 219isSlot: isOffset: alueSize: src: 2818:3:0declaration: 339isSlot: isOffset: alueSize: src: 2738:7:0declaration: 342isSlot: isOffset: alueSize: src: 2887:7:0declaration: 342isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.get_name (| "success" |)
          ]
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "!=",
            M.index_access (|
              M.get_name (| "out" |),
              Some (Value.Integer 0)
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pairingProd2 (α : list Value.t) : M :=
    match α with
    | [a1, a2, b1, b2] =>
      let _ :=
        M.define (|
          [ "p1" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G1Point") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "p2" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G2Point") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b2" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "pairing" |),
            [
              M.get_name (| "p1" |),
              M.get_name (| "p2" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pairingProd3 (α : list Value.t) : M :=
    match α with
    | [a1, a2, b1, b2, c1, c2] =>
      let _ :=
        M.define (|
          [ "p1" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G1Point") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "p2" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G2Point") None
,
            [
              Value.Integer 3
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "c1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "c2" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "pairing" |),
            [
              M.get_name (| "p1" |),
              M.get_name (| "p2" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pairingProd4 (α : list Value.t) : M :=
    match α with
    | [a1, a2, b1, b2, c1, c2, d1, d2] =>
      let _ :=
        M.define (|
          [ "p1" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G1Point") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "p2" ],
          M.call (|
            NewExpression Ty.array (Ty.path "G2Point") None
,
            [
              Value.Integer 4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "c1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p1" |),
            Some (Value.Integer 3)
          |),
          M.get_name (| "d1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "a2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "b2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 2)
          |),
          M.get_name (| "c2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p2" |),
            Some (Value.Integer 3)
          |),
          M.get_name (| "d2" |)
        |) in
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "pairing" |),
            [
              M.get_name (| "p1" |),
              M.get_name (| "p2" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Pairing.


(* Contract *)
Module Test.
  Axiom using : M.usingLibrary (|
      None,
      UsingKind.Local,
      "Pairing"
    |).

  (* Struct VerifyingKey *)

  (* Struct Proof *)

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "p1" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "p2" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p1" |),
            "X"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p1" |),
            "Y"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p2" |),
            "X"
          |),
          Value.Integer 1
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p2" |),
            "Y"
          |),
          Value.Integer 2
        |) in
      let _ :=
        M.define (|
          [ "explicit_sum" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "add"
            |),
            [
              M.get_name (| "p1" |),
              M.get_name (| "p2" |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "scalar_prod" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "mul"
            |),
            [
              M.get_name (| "p1" |),
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "explicit_sum" |),
                  "X"
                |),
                M.member_access (|
                  M.get_name (| "scalar_prod" |),
                  "X"
                |)
              |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "explicit_sum" |),
                  "Y"
                |),
                M.member_access (|
                  M.get_name (| "scalar_prod" |),
                  "Y"
                |)
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "add"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P1"
                |),
                []
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "Pairing" |),
                      "P1"
                    |),
                    []
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "&&",
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "x" |),
                  "X"
                |),
                Value.Integer 0
              |),
              M.bin_op (|
                "==",
                M.member_access (|
                  M.get_name (| "x" |),
                  "Y"
                |),
                Value.Integer 0
              |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testMul (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "p" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p" |),
            "X"
          |),
          Value.Integer 14125296762497065001182820090155008161146766663259912659363835465243039841726
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "p" |),
            "Y"
          |),
          Value.Integer 16229134936871442251132173501211935676986397196799085184804749187146857848057
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "p" |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "mul"
            |),
            [
              M.get_name (| "p" |),
              Value.Integer 13986731495506593864492662381614386532349950841221768152838255933892789078521
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "p" |),
                "X"
              |),
              Value.Integer 18256332256630856740336504687838346961237861778318632856900758565550522381207
            |),
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "p" |),
                "Y"
              |),
              Value.Integer 6976682127058094634733239494758371323697222088503263230319702770853579280803
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pair (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "fiveTimesP2" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 4540444681147253467785307942530223364530218361853237193970751657229138047649,
                Value.Integer 20954117799226682825035885491234530437475518021362091509513177301640194298072
              ],
              Value.Array [
                Value.Integer 11631839690097995216017572651900167465857396346217730511548857041925508482915,
                Value.Integer 21508930868448350162258892668132814424284302804699005394342512102884055673846
              ]
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "p" ],
          Value.Integer 21888242871839275222246405745257275088696311157297823662689037894645226208583
        |) in
      let _ :=
        M.define (|
          [ "g1points" ],
          M.call (|
            NewExpression Ty.array (Ty.path "Pairing.G1Point") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "g2points" ],
          M.call (|
            NewExpression Ty.array (Ty.path "Pairing.G2Point") None
,
            [
              Value.Integer 2
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g1points" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P1"
                |),
                []
              |),
              "mul"
            |),
            [
              Value.Integer 5
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g1points" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P1"
                |),
                []
              |),
              "negate"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g2points" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "P2"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g2points" |),
            Some (Value.Integer 1)
          |),
          M.get_name (| "fiveTimesP2" |)
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairing"
            |),
            [
              M.get_name (| "g1points" |),
              M.get_name (| "g2points" |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Bool false
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g1points" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "P1"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g1points" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "P1"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.index_access (|
              M.get_name (| "g1points" |),
              Some (Value.Integer 1)
            |),
            "Y"
          |),
          M.bin_op (|
            "-",
            M.get_name (| "p" |),
            M.member_access (|
              M.index_access (|
                M.get_name (| "g1points" |),
                Some (Value.Integer 1)
              |),
              "Y"
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g2points" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "P2"
            |),
            []
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "g2points" |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "P2"
            |),
            []
          |)
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairing"
            |),
            [
              M.get_name (| "g1points" |),
              M.get_name (| "g2points" |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Bool false
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition verifyingKey (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "A"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 0x209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf7,
                Value.Integer 0x04bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a41678
              ],
              Value.Array [
                Value.Integer 0x2bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d,
                Value.Integer 0x120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "B"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x2eca0c7238bf16e83e7a1e6c5d49540685ff51380f309842a98561558019fc02,
              Value.Integer 0x03d3260361bb8451de5ff5ecd17f010ff22f5c31cdf184e9020b06fa5997db84
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "C"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 0x2e89718ad33c8bed92e210e81d1853435399a271913a6520736a4729cf0d51eb,
                Value.Integer 0x01a9e2ffa2e92599b68e44de5bcf354fa2642bd4f26b259daa6f7ce3ed57aeb3
              ],
              Value.Array [
                Value.Integer 0x14a9a87b789a58af499b314e13c3d65bede56c07ea2d418d6874857b70763713,
                Value.Integer 0x178fb49a2d6cd347dc58973ff49613a20757d0fcc22079f9abd10c3baee24590
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "gamma"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 0x25f83c8b6ab9de74e7da488ef02645c5a16a6652c3c71a15dc37fe3a5dcb7cb1,
                Value.Integer 0x22acdedd6308e3bb230d226d16a105295f523a8a02bfc5e8bd2da135ac4c245d
              ],
              Value.Array [
                Value.Integer 0x065bbad92e7c4e31bf3757f1fe7362a63fbfee50e7dc68da116e67d600d9bf68,
                Value.Integer 0x06d302580dc0661002994e7cd3a7f224e7ddc27802777486bf80f40e4ca3cfdb
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "gammaBeta1"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x15794ab061441e51d01e94640b7e3084a07e02c78cf3103c542bc5b298669f21,
              Value.Integer 0x14db745c6780e9df549864cec19c2daf4531f6ec0c89cc1c7436cc4d8d300c6d
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "gammaBeta2"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 0x1f39e4e4afc4bc74790a4a028aff2c3d2538731fb755edefd8cb48d6ea589b5e,
                Value.Integer 0x283f150794b6736f670d6a1033f9b46c6f5204f50813eb85c8dc4b59db1c5d39
              ],
              Value.Array [
                Value.Integer 0x140d97ee4d2b36d99bc49974d18ecca3e7ad51011956051b464d9e27d46cc25e,
                Value.Integer 0x0764bb98575bd466d32db7b15f582b2d5c452b36aa394b789366e5e3ca5aabd4
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "Z"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 0x217cee0a9ad79a4493b5253e2e4e3a39fc2df38419f230d341f60cb064a0ac29,
                Value.Integer 0x0a3d76f140db8418ba512272381446eb73958670f00cf46f1d9e64cba057b53c
              ],
              Value.Array [
                Value.Integer 0x26f64a8ec70387a13e41430ed3ee4a7db2059cc5fc13c067194bcc0cb49a9855,
                Value.Integer 0x2fd72bd9edb657346127da132e5b82ab908f5816c826acb499e22f2412d1a2d7
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "vk" |),
            "IC"
          |),
          M.call (|
            NewExpression Ty.array (Ty.path "Pairing.G1Point") None
,
            [
              Value.Integer 10
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 0)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x0aee46a7ea6e80a3675026dfa84019deee2a2dedb1bbe11d7fe124cb3efb4b5a,
              Value.Integer 0x044747b6e9176e13ede3a4dfd0d33ccca6321b9acd23bf3683a60adc0366ebaf
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 1)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x1e39e9f0f91fa7ff8047ffd90de08785777fe61c0e3434e728fce4cf35047ddc,
              Value.Integer 0x2e0b64d75ebfa86d7f8f8e08abbe2e7ae6e0a1c0b34d028f19fa56e9450527cb
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 2)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x1c36e713d4d54e3a9644dffca1fc524be4868f66572516025a61ca542539d43f,
              Value.Integer 0x042dcc4525b82dfb242b09cb21909d5c22643dcdbe98c4d082cc2877e96b24db
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 3)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x17d5d09b4146424bff7e6fb01487c477bbfcd0cdbbc92d5d6457aae0b6717cc5,
              Value.Integer 0x02b5636903efbf46db9235bbe74045d21c138897fda32e079040db1a16c1a7a1
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 4)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x0f103f14a584d4203c27c26155b2c955f8dfa816980b24ba824e1972d6486a5d,
              Value.Integer 0x0c4165133b9f5be17c804203af781bcf168da7386620479f9b885ecbcd27b17b
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 5)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x232063b584fb76c8d07995bee3a38fa7565405f3549c6a918ddaa90ab971e7f8,
              Value.Integer 0x2ac9b135a81d96425c92d02296322ad56ffb16299633233e4880f95aafa7fda7
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 6)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x09b54f111d3b2d1b2fe1ae9669b3db3d7bf93b70f00647e65c849275de6dc7fe,
              Value.Integer 0x18b2e77c63a3e400d6d1f1fbc6e1a1167bbca603d34d03edea231eb0ab7b14b4
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 7)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x0c54b42137b67cc268cbb53ac62b00ecead23984092b494a88befe58445a244a,
              Value.Integer 0x18e3723d37fae9262d58b548a0575f59d9c3266db7afb4d5739555837f6b8b3e
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 8)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x0a6de0e2240aa253f46ce0da883b61976e3588146e01c9d8976548c145fe6e4a,
              Value.Integer 0x04fbaa3a4aed4bb77f30ebb07a3ec1c7d77a7f2edd75636babfeff97b1ea686e
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.member_access (|
              M.get_name (| "vk" |),
              "IC"
            |),
            Some (Value.Integer 9)
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0x111e2e2a5f8828f80ddad08f9f74db56dac1cc16c1cb278036f79a84cf7a116f,
              Value.Integer 0x1d7d62e192b219b9808faa906c5ced871788f6339e8d91b83ac1343e20a16b30
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition verify (α : list Value.t) : M :=
    match α with
    | [input, proof] =>
      let _ :=
        M.define (|
          [ "vk" ],
          M.call (|
            M.get_name (| "verifyingKey" |),
            []
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "==",
              M.bin_op (|
                "+",
                M.member_access (|
                  M.get_name (| "input" |),
                  "length"
                |),
                Value.Integer 1
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "vk" |),
                  "IC"
                |),
                "length"
              |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "vk_x" ],
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 0,
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.for_ (|
          M.define (|
            [ "i" ],
            Value.Integer 0
          |),
          M.bin_op (|
            "<",
            M.get_name (| "i" |),
            M.member_access (|
              M.get_name (| "input" |),
              "length"
            |)
          |),
          M.un_op (|
            false,
            "++",
            M.get_name (| "i" |)
          |),
          M.assign (|
            "=",
            M.get_name (| "vk_x" |),
            M.call (|
              M.member_access (|
                M.get_name (| "Pairing" |),
                "add"
              |),
              [
                M.get_name (| "vk_x" |),
                M.call (|
                  M.member_access (|
                    M.get_name (| "Pairing" |),
                    "mul"
                  |),
                  [
                    M.index_access (|
                      M.member_access (|
                        M.get_name (| "vk" |),
                        "IC"
                      |),
                      Some (M.bin_op (|
                        "+",
                        M.get_name (| "i" |),
                        Value.Integer 1
                      |))
                    |),
                    M.index_access (|
                      M.get_name (| "input" |),
                      Some (M.get_name (| "i" |))
                    |)
                  ]
                |)
              ]
            |)
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "vk_x" |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "add"
            |),
            [
              M.get_name (| "vk_x" |),
              M.index_access (|
                M.member_access (|
                  M.get_name (| "vk" |),
                  "IC"
                |),
                Some (Value.Integer 0)
              |)
            ]
          |)
        |) in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairingProd2"
            |),
            [
              M.member_access (|
                M.get_name (| "proof" |),
                "A"
              |),
              M.member_access (|
                M.get_name (| "vk" |),
                "A"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "A_p"
                  |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P2"
                |),
                []
              |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Integer 1
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairingProd2"
            |),
            [
              M.member_access (|
                M.get_name (| "vk" |),
                "B"
              |),
              M.member_access (|
                M.get_name (| "proof" |),
                "B"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "B_p"
                  |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P2"
                |),
                []
              |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Integer 2
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairingProd2"
            |),
            [
              M.member_access (|
                M.get_name (| "proof" |),
                "C"
              |),
              M.member_access (|
                M.get_name (| "vk" |),
                "C"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "C_p"
                  |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P2"
                |),
                []
              |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Integer 3
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairingProd3"
            |),
            [
              M.member_access (|
                M.get_name (| "proof" |),
                "K"
              |),
              M.member_access (|
                M.get_name (| "vk" |),
                "gamma"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.call (|
                    M.member_access (|
                      M.get_name (| "Pairing" |),
                      "add"
                    |),
                    [
                      M.get_name (| "vk_x" |),
                      M.call (|
                        M.member_access (|
                          M.get_name (| "Pairing" |),
                          "add"
                        |),
                        [
                          M.member_access (|
                            M.get_name (| "proof" |),
                            "A"
                          |),
                          M.member_access (|
                            M.get_name (| "proof" |),
                            "C"
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |),
              M.member_access (|
                M.get_name (| "vk" |),
                "gammaBeta2"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "vk" |),
                    "gammaBeta1"
                  |)
                ]
              |),
              M.member_access (|
                M.get_name (| "proof" |),
                "B"
              |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Integer 4
          |)
        else
          Value.Tuple [] in
      let _ :=
        if M.un_op (|
          true,
          "!",
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "pairingProd3"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "add"
                |),
                [
                  M.get_name (| "vk_x" |),
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "A"
                  |)
                ]
              |),
              M.member_access (|
                M.get_name (| "proof" |),
                "B"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "H"
                  |)
                ]
              |),
              M.member_access (|
                M.get_name (| "vk" |),
                "Z"
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "negate"
                |),
                [
                  M.member_access (|
                    M.get_name (| "proof" |),
                    "C"
                  |)
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "Pairing" |),
                  "P2"
                |),
                []
              |)
            ]
          |)
        |) then
          M.return_ (|
            Value.Integer 5
          |)
        else
          Value.Tuple [] in
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Event Verified *)

  Definition verifyTx (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "input" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 9
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "proof" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "A"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 12873740738727497448187997291915224677121726020054032516825496230827252793177,
              Value.Integer 21804419174137094775122804775419507726154084057848719988004616848382402162497
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "A_p"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 7742452358972543465462254569134860944739929848367563713587808717088650354556,
              Value.Integer 7324522103398787664095385319014038380128814213034709026832529060148225837366
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "B"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G2Point"
            |),
            [
              Value.Array [
                Value.Integer 8176651290984905087450403379100573157708110416512446269839297438960217797614,
                Value.Integer 15588556568726919713003060429893850972163943674590384915350025440408631945055
              ],
              Value.Array [
                Value.Integer 15347511022514187557142999444367533883366476794364262773195059233657571533367,
                Value.Integer 4265071979090628150845437155927259896060451682253086069461962693761322642015
              ]
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "B_p"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 2979746655438963305714517285593753729335852012083057917022078236006592638393,
              Value.Integer 6470627481646078059765266161088786576504622012540639992486470834383274712950
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "C"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 6851077925310461602867742977619883934042581405263014789956638244065803308498,
              Value.Integer 10336382210592135525880811046708757754106524561907815205241508542912494488506
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "C_p"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 12491625890066296859584468664467427202390981822868257437245835716136010795448,
              Value.Integer 13818492518017455361318553880921248537817650587494176379915981090396574171686
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "H"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 12091046215835229523641173286701717671667447745509192321596954139357866668225,
              Value.Integer 14446807589950902476683545679847436767890904443411534435294953056557941441758
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.member_access (|
            M.get_name (| "proof" |),
            "K"
          |),
          M.call (|
            M.member_access (|
              M.get_name (| "Pairing" |),
              "G1Point"
            |),
            [
              Value.Integer 21341087976609916409401737322664290631992568431163400450267978471171152600502,
              Value.Integer 2942165230690572858696920423896381470344658299915828986338281196715687693170
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 13986731495506593864492662381614386532349950841221768152838255933892789078521
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 622860516154313070522697309645122400675542217310916019527100517240519630053
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 11094488463398718754251685950409355128550342438297986977413505294941943071569
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 3)
          |),
          Value.Integer 6627643779954497813586310325594578844876646808666478625705401786271515864467
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 4)
          |),
          Value.Integer 2957286918163151606545409668133310005545945782087581890025685458369200827463
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 5)
          |),
          Value.Integer 1384290496819542862903939282897996566903332587607290986044945365745128311081
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 6)
          |),
          Value.Integer 5613571677741714971687805233468747950848449704454346829971683826953541367271
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 7)
          |),
          Value.Integer 9643208548031422463313148630985736896287522941726746581856185889848792022807
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "input" |),
            Some (Value.Integer 8)
          |),
          Value.Integer 18066496933330839731877828156604
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.call (|
            M.get_name (| "verify" |),
            [
              M.get_name (| "input" |),
              M.get_name (| "proof" |)
            ]
          |),
          Value.Integer 0
        |) then
          let _ :=
            EmitStatement M.call (|
              M.get_name (| "Verified" |),
              [
                Value.String "Successfully verified."
              ]
            |)
 in
          let _ :=
            M.return_ (|
              Value.Bool true
            |) in
          Value.Tuple []
        else
          let _ :=
            M.return_ (|
              Value.Bool false
            |) in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
