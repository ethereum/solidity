(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* License: WTFPL *)

(* Pragma solidity>=0.8.0 *)

(* Library *)
Module PRBMathCommon.
  Definition SCALE : Value.t :=
    Value.Integer 1e18.

  Definition SCALE_LPOTD : Value.t :=
    Value.Integer 262144.

  Definition SCALE_INVERSE : Value.t :=
    Value.Integer 78156646155174841979727994598816262306175212592076161876661508869554232690281.

  Definition exp2 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            Value.Integer 0x80000000000000000000000000000000
          |) in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x16A09E667F3BCC908B2FB1366EA957D3E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1306FE0A31B7152DE8D5A46305C85EDED
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1172B83C7D517ADCDF7C8C50EB14A7920
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10B5586CF9890F6298B92B71842A98364
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x8000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1059B0D31585743AE7C548EB68CA417FE
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x4000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x102C9A3E778060EE6F7CACA4F7A29BDE9
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x2000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10163DA9FB33356D84A66AE336DCDFA40
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x1000000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100B1AFA5ABCBED6129AB13EC11DC9544
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x800000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10058C86DA1C09EA1FF19D294CF2F679C
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x400000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1002C605E2E8CEC506D21BFC89A23A011
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x200000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100162F3904051FA128BCA9C55C31E5E0
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x100000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000B175EFFDC76BA38E31671CA939726
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100058BA01FB9F96D6CACD4B180917C3E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10002C5CC37DA9491D0985C348C68E7B4
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000162E525EE054754457D5995292027
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000B17255775C040618BF4A4ADE83FD
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x8000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000058B91B5BC9AE2EED81E9B7D4CFAC
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x4000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100002C5C89D5EC6CA4D7C8ACC017B7CA
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x2000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000162E43F4F831060E02D839A9D16D
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x1000000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000B1721BCFC99D9F890EA06911763
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x800000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000058B90CF1E6D97F9CA14DBCC1629
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x400000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000002C5C863B73F016468F6BAC5CA2C
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x200000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000162E430E5A18F6119E3C02282A6
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x100000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000B1721835514B86E6D96EFD1BFF
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000058B90C0B48C6BE5DF846C5B2F0
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000002C5C8601CC6B9E94213C72737B
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000162E42FFF037DF38AA2B219F07
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000B17217FBA9C739AA5819F44FA
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x8000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000058B90BFCDEE5ACD3C1CEDC824
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x4000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000002C5C85FE31F35A6A30DA1BE51
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x2000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000162E42FF0999CE3541B9FFFD0
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x1000000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000B17217F80F4EF5AADDA45554
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x800000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000058B90BFBF8479BD5A81B51AE
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x400000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000002C5C85FDF84BD62AE30A74CD
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x200000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000162E42FEFB2FED257559BDAA
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x100000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000B17217F7D5A7716BBA4A9AF
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000058B90BFBE9DDBAC5E109CCF
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000002C5C85FDF4B15DE6F17EB0E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000162E42FEFA494F1478FDE05
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000B17217F7D20CF927C8E94D
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x8000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000058B90BFBE8F71CB4E4B33E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x4000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000002C5C85FDF477B662B26946
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x2000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000162E42FEFA3AE53369388D
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x1000000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000B17217F7D1D351A389D41
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x800000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000058B90BFBE8E8B2D3D4EDF
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x400000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000002C5C85FDF4741BEA6E77F
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x200000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000162E42FEFA39FE95583C3
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x100000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000B17217F7D1CFB72B45E3
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000058B90BFBE8E7CC35C3F2
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000002C5C85FDF473E242EA39
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000162E42FEFA39F02B772C
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000000B17217F7D1CF7D83C1A
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x8000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000058B90BFBE8E7BDCBE2E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x4000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000002C5C85FDF473DEA871F
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x2000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000000162E42FEFA39EF44D92
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x1000000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000000B17217F7D1CF79E949
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x800000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000000058B90BFBE8E7BCE545
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x400000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000002C5C85FDF473DE6ECA
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x200000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000000162E42FEFA39EF366F
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x100000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000000B17217F7D1CF79AFA
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x80000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x100000000000000058B90BFBE8E7BCD6E
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x40000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000000002C5C85FDF473DE6B3
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x20000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x1000000000000000162E42FEFA39EF359
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          if M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "x" |),
              Value.Integer 0x10000000000000000
            |),
            Value.Integer 0
          |) then
            M.assign (|
              "=",
              M.get_name (| "result" |),
              M.bin_op (|
                ">>",
                Value.Tuple [
                  M.bin_op (|
                    "*",
                    M.get_name (| "result" |),
                    Value.Integer 0x10000000000000000B17217F7D1CF79AC
                  |)
                ],
                Value.Integer 128
              |)
            |)
          else
            Value.Tuple [] in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "result" |),
            M.get_name (| "SCALE" |)
          |) in
        let _ :=
          M.assign (|
            ">>=",
            M.get_name (| "result" |),
            Value.Tuple [
              M.bin_op (|
                "-",
                Value.Integer 127,
                Value.Tuple [
                  M.bin_op (|
                    ">>",
                    M.get_name (| "x" |),
                    Value.Integer 128
                  |)
                ]
              |)
            ]
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mostSignificantBit (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 128
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 128
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 128
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 64
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 64
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 64
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 32
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 32
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 32
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 16
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 16
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 16
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 8
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 8
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 8
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 4
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 4
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 4
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 2
          |)
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "x" |),
              Value.Integer 2
            |) in
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 2
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "x" |),
          M.bin_op (|
            "**",
            Value.Integer 2,
            Value.Integer 1
          |)
        |) then
          let _ :=
            M.assign (|
              "+=",
              M.get_name (| "msb" |),
              Value.Integer 1
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mulDiv (α : list Value.t) : M :=
    match α with
    | [x, y, denominator] =>
      let _ :=
        M.define (|
          [ "prod0" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "prod1" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 2089
src: 12103:150:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 12169:5:0declaration: 2084isSlot: isOffset: alueSize: src: 12221:5:0declaration: 2084isSlot: isOffset: alueSize: src: 12236:5:0declaration: 2084isSlot: isOffset: alueSize: src: 12200:5:0declaration: 2087isSlot: isOffset: alueSize: src: 12143:1:0declaration: 2074isSlot: isOffset: alueSize: src: 12182:1:0declaration: 2074isSlot: isOffset: alueSize: src: 12146:1:0declaration: 2076isSlot: isOffset: alueSize: src: 12185:1:0declaration: 2076isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "prod1" |),
          Value.Integer 0
        |) then
          let _ :=
            M.call (|
              M.get_name (| "require" |),
              [
                M.bin_op (|
                  ">",
                  M.get_name (| "denominator" |),
                  Value.Integer 0
                |)
              ]
            |) in
          let _ :=
            (* Beginning of a node! *)
id: 2099
src: 12389:74:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 12437:11:0declaration: 2078isSlot: isOffset: alueSize: src: 12430:5:0declaration: 2084isSlot: isOffset: alueSize: src: 12416:6:0declaration: 2081isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
          let _ :=
            M.return_ (|
              M.get_name (| "result" |)
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">",
              M.get_name (| "denominator" |),
              M.get_name (| "prod1" |)
            |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "remainder" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 2113
src: 12886:275:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 12982:11:0declaration: 2078isSlot: isOffset: alueSize: src: 13101:5:0declaration: 2084isSlot: isOffset: alueSize: src: 13121:5:0declaration: 2084isSlot: isOffset: alueSize: src: 13134:5:0declaration: 2084isSlot: isOffset: alueSize: src: 13067:5:0declaration: 2087isSlot: isOffset: alueSize: src: 13080:5:0declaration: 2087isSlot: isOffset: alueSize: src: 12956:9:0declaration: 2111isSlot: isOffset: alueSize: src: 13090:9:0declaration: 2111isSlot: isOffset: alueSize: src: 13141:9:0declaration: 2111isSlot: isOffset: alueSize: src: 12976:1:0declaration: 2074isSlot: isOffset: alueSize: src: 12979:1:0declaration: 2076isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        let _ :=
          M.define (|
            [ "lpotdod" ],
            M.bin_op (|
              "&",
              M.get_name (| "denominator" |),
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.un_op (|
                    true,
                    "~",
                    M.get_name (| "denominator" |)
                  |),
                  Value.Integer 1
                |)
              ]
            |)
          |) in
        let _ :=
          (* Beginning of a node! *)
id: 2124
src: 13543:402:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 13620:11:0declaration: 2078isSlot: isOffset: alueSize: src: 13639:11:0declaration: 2078isSlot: isOffset: alueSize: src: 13652:7:0declaration: 2115isSlot: isOffset: alueSize: src: 13750:7:0declaration: 2115isSlot: isOffset: alueSize: src: 13883:7:0declaration: 2115isSlot: isOffset: alueSize: src: 13909:7:0declaration: 2115isSlot: isOffset: alueSize: src: 13919:7:0declaration: 2115isSlot: isOffset: alueSize: src: 13730:5:0declaration: 2084isSlot: isOffset: alueSize: src: 13743:5:0declaration: 2084isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
        let _ :=
          M.assign (|
            "|=",
            M.get_name (| "prod0" |),
            M.bin_op (|
              "*",
              M.get_name (| "prod1" |),
              M.get_name (| "lpotdod" |)
            |)
          |) in
        let _ :=
          M.define (|
            [ "inverse" ],
            M.bin_op (|
              "^",
              Value.Tuple [
                M.bin_op (|
                  "*",
                  Value.Integer 3,
                  M.get_name (| "denominator" |)
                |)
              ],
              Value.Integer 2
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "*=",
            M.get_name (| "inverse" |),
            M.bin_op (|
              "-",
              Value.Integer 2,
              M.bin_op (|
                "*",
                M.get_name (| "denominator" |),
                M.get_name (| "inverse" |)
              |)
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              "*",
              M.get_name (| "prod0" |),
              M.get_name (| "inverse" |)
            |)
          |) in
        let _ :=
          M.return_ (|
            M.get_name (| "result" |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mulDivFixedPoint (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.define (|
          [ "prod0" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "prod1" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 2214
src: 16785:150:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 16851:5:0declaration: 2209isSlot: isOffset: alueSize: src: 16903:5:0declaration: 2209isSlot: isOffset: alueSize: src: 16918:5:0declaration: 2209isSlot: isOffset: alueSize: src: 16882:5:0declaration: 2212isSlot: isOffset: alueSize: src: 16825:1:0declaration: 2201isSlot: isOffset: alueSize: src: 16864:1:0declaration: 2201isSlot: isOffset: alueSize: src: 16828:1:0declaration: 2203isSlot: isOffset: alueSize: src: 16867:1:0declaration: 2203isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.define (|
          [ "remainder" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "roundUpUnit" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 2221
src: 17001:126:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17050:5:0declaration: 950isSlot: isOffset: alueSize: src: 17024:9:0declaration: 2216isSlot: isOffset: alueSize: src: 17087:9:0declaration: 2216isSlot: isOffset: alueSize: src: 17069:11:0declaration: 2219isSlot: isOffset: alueSize: src: 17044:1:0declaration: 2201isSlot: isOffset: alueSize: src: 17047:1:0declaration: 2203isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "prod1" |),
          Value.Integer 0
        |) then
          let _ :=
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "result" |),
                M.bin_op (|
                  "+",
                  Value.Tuple [
                    M.bin_op (|
                      "/",
                      M.get_name (| "prod0" |),
                      M.get_name (| "SCALE" |)
                    |)
                  ],
                  M.get_name (| "roundUpUnit" |)
                |)
              |) in
            let _ :=
              M.return_ (|
                M.get_name (| "result" |)
              |) in
            Value.Tuple [] in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">",
              M.get_name (| "SCALE" |),
              M.get_name (| "prod1" |)
            |)
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 2245
src: 17332:384:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17632:13:0declaration: 958isSlot: isOffset: alueSize: src: 17466:11:0declaration: 954isSlot: isOffset: alueSize: src: 17557:11:0declaration: 954isSlot: isOffset: alueSize: src: 17571:11:0declaration: 954isSlot: isOffset: alueSize: src: 17447:5:0declaration: 2209isSlot: isOffset: alueSize: src: 17533:5:0declaration: 2209isSlot: isOffset: alueSize: src: 17512:5:0declaration: 2212isSlot: isOffset: alueSize: src: 17454:9:0declaration: 2216isSlot: isOffset: alueSize: src: 17522:9:0declaration: 2216isSlot: isOffset: alueSize: src: 17355:6:0declaration: 2206isSlot: isOffset: alueSize: src: 17681:11:0declaration: 2219isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sqrt (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "x" |),
          Value.Integer 0
        |) then
          let _ :=
            M.return_ (|
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        M.define (|
          [ "xAux" ],
          M.call (|
            Ty.path "uint256",
            [
              M.get_name (| "x" |)
            ]
          |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          Value.Integer 1
        |) in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x100000000000000000000000000000000
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 128
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 64
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x10000000000000000
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 64
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 32
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x100000000
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 32
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 16
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x10000
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 16
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 8
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x100
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 8
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 4
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x10
        |) then
          let _ :=
            M.assign (|
              ">>=",
              M.get_name (| "xAux" |),
              Value.Integer 4
            |) in
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 2
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        if M.bin_op (|
          ">=",
          M.get_name (| "xAux" |),
          Value.Integer 0x8
        |) then
          let _ :=
            M.assign (|
              "<<=",
              M.get_name (| "result" |),
              Value.Integer 1
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              ">>",
              Value.Tuple [
                M.bin_op (|
                  "+",
                  M.get_name (| "result" |),
                  M.bin_op (|
                    "/",
                    M.get_name (| "x" |),
                    M.get_name (| "result" |)
                  |)
                |)
              ],
              Value.Integer 1
            |)
          |) in
        let _ :=
          M.define (|
            [ "roundedDownResult" ],
            M.bin_op (|
              "/",
              M.get_name (| "x" |),
              M.get_name (| "result" |)
            |)
          |) in
        let _ :=
          M.return_ (|
            Conditional M.bin_op (|
              ">=",
              M.get_name (| "result" |),
              M.get_name (| "roundedDownResult" |)
            |) M.get_name (| "roundedDownResult" |) M.get_name (| "result" |)

          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End PRBMathCommon.
