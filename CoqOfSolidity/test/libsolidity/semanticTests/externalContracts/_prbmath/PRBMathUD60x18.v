(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* License: WTFPL *)

(* Pragma solidity>=0.8.0 *)

Require test.libsolidity.semanticTests.externalContracts._prbmath.PRBMathCommon.


(* Library *)
Module PRBMathUD60x18.
  Definition HALF_SCALE : Value.t :=
    Value.Integer 5e17.

  Definition LOG2_E : Value.t :=
    Value.Integer 1442695040888963407.

  Definition MAX_UD60x18 : Value.t :=
    Value.Integer 115792089237316195423570985008687907853269984665640564039457584007913129639935.

  Definition MAX_WHOLE_UD60x18 : Value.t :=
    Value.Integer 115792089237316195423570985008687907853269984665640564039457000000000000000000.

  Definition SCALE : Value.t :=
    Value.Integer 1e18.

  Definition avg (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              "+",
              M.bin_op (|
                "+",
                Value.Tuple [
                  M.bin_op (|
                    ">>",
                    M.get_name (| "x" |),
                    Value.Integer 1
                  |)
                ],
                Value.Tuple [
                  M.bin_op (|
                    ">>",
                    M.get_name (| "y" |),
                    Value.Integer 1
                  |)
                ]
              |),
              Value.Tuple [
                M.bin_op (|
                  "&",
                  M.bin_op (|
                    "&",
                    M.get_name (| "x" |),
                    M.get_name (| "y" |)
                  |),
                  Value.Integer 1
                |)
              ]
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition ceil (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "<=",
              M.get_name (| "x" |),
              M.get_name (| "MAX_WHOLE_UD60x18" |)
            |)
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 68
src: 2840:364:1
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 2940:5:1declaration: 23isSlot: isOffset: alueSize: src: 3038:5:1declaration: 23isSlot: isOffset: alueSize: src: 3148:6:1declaration: 60isSlot: isOffset: alueSize: src: 2937:1:1declaration: 57isSlot: isOffset: alueSize: src: 3162:1:1declaration: 57isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition div (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          M.call (|
            M.member_access (|
              M.get_name (| "PRBMathCommon" |),
              "mulDiv"
            |),
            [
              M.get_name (| "x" |),
              M.get_name (| "SCALE" |),
              M.get_name (| "y" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition e (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          Value.Integer 2718281828459045235
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition exp (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "<",
              M.get_name (| "x" |),
              Value.Integer 88722839111672999628
            |)
          ]
        |) in
      let _ :=
        let _ :=
          M.define (|
            [ "doubleScaleProduct" ],
            M.bin_op (|
              "*",
              M.get_name (| "x" |),
              M.get_name (| "LOG2_E" |)
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.call (|
              M.get_name (| "exp2" |),
              [
                M.bin_op (|
                  "/",
                  Value.Tuple [
                    M.bin_op (|
                      "+",
                      M.get_name (| "doubleScaleProduct" |),
                      M.get_name (| "HALF_SCALE" |)
                    |)
                  ],
                  M.get_name (| "SCALE" |)
                |)
              ]
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition exp2 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "<",
              M.get_name (| "x" |),
              Value.Integer 128e18
            |)
          ]
        |) in
      let _ :=
        let _ :=
          M.define (|
            [ "x128x128" ],
            M.bin_op (|
              "/",
              Value.Tuple [
                M.bin_op (|
                  "<<",
                  M.get_name (| "x" |),
                  Value.Integer 128
                |)
              ],
              M.get_name (| "SCALE" |)
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.call (|
              M.member_access (|
                M.get_name (| "PRBMathCommon" |),
                "exp2"
              |),
              [
                M.get_name (| "x128x128" |)
              ]
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition floor (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        (* Beginning of a node! *)
id: 174
src: 6510:263:1
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 6610:5:1declaration: 23isSlot: isOffset: alueSize: src: 6713:6:1declaration: 172isSlot: isOffset: alueSize: src: 6607:1:1declaration: 169isSlot: isOffset: alueSize: src: 6727:1:1declaration: 169isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition frac (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        (* Beginning of a node! *)
id: 184
src: 7203:56:1
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 7243:5:1declaration: 23isSlot: isOffset: alueSize: src: 7226:6:1declaration: 182isSlot: isOffset: alueSize: src: 7240:1:1declaration: 179isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition gm (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "x" |),
          Value.Integer 0
        |) then
          let _ :=
            M.return_ (|
              Value.Integer 0
            |) in
          Value.Tuple []
        else
          Value.Tuple [] in
      let _ :=
        let _ :=
          M.define (|
            [ "xy" ],
            M.bin_op (|
              "*",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          |) in
        let _ :=
          M.call (|
            M.get_name (| "require" |),
            [
              M.bin_op (|
                "==",
                M.bin_op (|
                  "/",
                  M.get_name (| "xy" |),
                  M.get_name (| "x" |)
                |),
                M.get_name (| "y" |)
              |)
            ]
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.call (|
              M.member_access (|
                M.get_name (| "PRBMathCommon" |),
                "sqrt"
              |),
              [
                M.get_name (| "xy" |)
              ]
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inv (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              "/",
              Value.Integer 1e36,
              M.get_name (| "x" |)
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition ln (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              "/",
              Value.Tuple [
                M.bin_op (|
                  "*",
                  M.call (|
                    M.get_name (| "log2" |),
                    [
                      M.get_name (| "x" |)
                    ]
                  |),
                  M.get_name (| "SCALE" |)
                |)
              ],
              M.get_name (| "LOG2_E" |)
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition log10 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">=",
              M.get_name (| "x" |),
              M.get_name (| "SCALE" |)
            |)
          ]
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 277
src: 10475:6984:1
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 17424:11:1declaration: 15isSlot: isOffset: alueSize: src: 10542:5:1declaration: 23isSlot: isOffset: alueSize: src: 10599:5:1declaration: 23isSlot: isOffset: alueSize: src: 10657:5:1declaration: 23isSlot: isOffset: alueSize: src: 10716:5:1declaration: 23isSlot: isOffset: alueSize: src: 10776:5:1declaration: 23isSlot: isOffset: alueSize: src: 10837:5:1declaration: 23isSlot: isOffset: alueSize: src: 10899:5:1declaration: 23isSlot: isOffset: alueSize: src: 10962:5:1declaration: 23isSlot: isOffset: alueSize: src: 11026:5:1declaration: 23isSlot: isOffset: alueSize: src: 11091:5:1declaration: 23isSlot: isOffset: alueSize: src: 11157:5:1declaration: 23isSlot: isOffset: alueSize: src: 11225:5:1declaration: 23isSlot: isOffset: alueSize: src: 11294:5:1declaration: 23isSlot: isOffset: alueSize: src: 11364:5:1declaration: 23isSlot: isOffset: alueSize: src: 11435:5:1declaration: 23isSlot: isOffset: alueSize: src: 11507:5:1declaration: 23isSlot: isOffset: alueSize: src: 11580:5:1declaration: 23isSlot: isOffset: alueSize: src: 11654:5:1declaration: 23isSlot: isOffset: alueSize: src: 11779:5:1declaration: 23isSlot: isOffset: alueSize: src: 11842:5:1declaration: 23isSlot: isOffset: alueSize: src: 11910:5:1declaration: 23isSlot: isOffset: alueSize: src: 11979:5:1declaration: 23isSlot: isOffset: alueSize: src: 12049:5:1declaration: 23isSlot: isOffset: alueSize: src: 12120:5:1declaration: 23isSlot: isOffset: alueSize: src: 12192:5:1declaration: 23isSlot: isOffset: alueSize: src: 12265:5:1declaration: 23isSlot: isOffset: alueSize: src: 12339:5:1declaration: 23isSlot: isOffset: alueSize: src: 12414:5:1declaration: 23isSlot: isOffset: alueSize: src: 12491:5:1declaration: 23isSlot: isOffset: alueSize: src: 12569:5:1declaration: 23isSlot: isOffset: alueSize: src: 12648:5:1declaration: 23isSlot: isOffset: alueSize: src: 12728:5:1declaration: 23isSlot: isOffset: alueSize: src: 12809:5:1declaration: 23isSlot: isOffset: alueSize: src: 12891:5:1declaration: 23isSlot: isOffset: alueSize: src: 12974:5:1declaration: 23isSlot: isOffset: alueSize: src: 13058:5:1declaration: 23isSlot: isOffset: alueSize: src: 13143:5:1declaration: 23isSlot: isOffset: alueSize: src: 13229:5:1declaration: 23isSlot: isOffset: alueSize: src: 13316:5:1declaration: 23isSlot: isOffset: alueSize: src: 13404:5:1declaration: 23isSlot: isOffset: alueSize: src: 13493:5:1declaration: 23isSlot: isOffset: alueSize: src: 13583:5:1declaration: 23isSlot: isOffset: alueSize: src: 13674:5:1declaration: 23isSlot: isOffset: alueSize: src: 13766:5:1declaration: 23isSlot: isOffset: alueSize: src: 13859:5:1declaration: 23isSlot: isOffset: alueSize: src: 13953:5:1declaration: 23isSlot: isOffset: alueSize: src: 14048:5:1declaration: 23isSlot: isOffset: alueSize: src: 14144:5:1declaration: 23isSlot: isOffset: alueSize: src: 14241:5:1declaration: 23isSlot: isOffset: alueSize: src: 14339:5:1declaration: 23isSlot: isOffset: alueSize: src: 14438:5:1declaration: 23isSlot: isOffset: alueSize: src: 14538:5:1declaration: 23isSlot: isOffset: alueSize: src: 14639:5:1declaration: 23isSlot: isOffset: alueSize: src: 14741:5:1declaration: 23isSlot: isOffset: alueSize: src: 14844:5:1declaration: 23isSlot: isOffset: alueSize: src: 14948:5:1declaration: 23isSlot: isOffset: alueSize: src: 15053:5:1declaration: 23isSlot: isOffset: alueSize: src: 15159:5:1declaration: 23isSlot: isOffset: alueSize: src: 15266:5:1declaration: 23isSlot: isOffset: alueSize: src: 15374:5:1declaration: 23isSlot: isOffset: alueSize: src: 15483:5:1declaration: 23isSlot: isOffset: alueSize: src: 15593:5:1declaration: 23isSlot: isOffset: alueSize: src: 15704:5:1declaration: 23isSlot: isOffset: alueSize: src: 15816:5:1declaration: 23isSlot: isOffset: alueSize: src: 15929:5:1declaration: 23isSlot: isOffset: alueSize: src: 16043:5:1declaration: 23isSlot: isOffset: alueSize: src: 16158:5:1declaration: 23isSlot: isOffset: alueSize: src: 16274:5:1declaration: 23isSlot: isOffset: alueSize: src: 16391:5:1declaration: 23isSlot: isOffset: alueSize: src: 16509:5:1declaration: 23isSlot: isOffset: alueSize: src: 16628:5:1declaration: 23isSlot: isOffset: alueSize: src: 16748:5:1declaration: 23isSlot: isOffset: alueSize: src: 16869:5:1declaration: 23isSlot: isOffset: alueSize: src: 16991:5:1declaration: 23isSlot: isOffset: alueSize: src: 17114:5:1declaration: 23isSlot: isOffset: alueSize: src: 17238:5:1declaration: 23isSlot: isOffset: alueSize: src: 17363:5:1declaration: 23isSlot: isOffset: alueSize: src: 10528:6:1declaration: 269isSlot: isOffset: alueSize: src: 10585:6:1declaration: 269isSlot: isOffset: alueSize: src: 10643:6:1declaration: 269isSlot: isOffset: alueSize: src: 10702:6:1declaration: 269isSlot: isOffset: alueSize: src: 10762:6:1declaration: 269isSlot: isOffset: alueSize: src: 10823:6:1declaration: 269isSlot: isOffset: alueSize: src: 10885:6:1declaration: 269isSlot: isOffset: alueSize: src: 10948:6:1declaration: 269isSlot: isOffset: alueSize: src: 11012:6:1declaration: 269isSlot: isOffset: alueSize: src: 11077:6:1declaration: 269isSlot: isOffset: alueSize: src: 11143:6:1declaration: 269isSlot: isOffset: alueSize: src: 11211:6:1declaration: 269isSlot: isOffset: alueSize: src: 11280:6:1declaration: 269isSlot: isOffset: alueSize: src: 11350:6:1declaration: 269isSlot: isOffset: alueSize: src: 11421:6:1declaration: 269isSlot: isOffset: alueSize: src: 11493:6:1declaration: 269isSlot: isOffset: alueSize: src: 11566:6:1declaration: 269isSlot: isOffset: alueSize: src: 11640:6:1declaration: 269isSlot: isOffset: alueSize: src: 11715:6:1declaration: 269isSlot: isOffset: alueSize: src: 11769:6:1declaration: 269isSlot: isOffset: alueSize: src: 11828:6:1declaration: 269isSlot: isOffset: alueSize: src: 11896:6:1declaration: 269isSlot: isOffset: alueSize: src: 11965:6:1declaration: 269isSlot: isOffset: alueSize: src: 12035:6:1declaration: 269isSlot: isOffset: alueSize: src: 12106:6:1declaration: 269isSlot: isOffset: alueSize: src: 12178:6:1declaration: 269isSlot: isOffset: alueSize: src: 12251:6:1declaration: 269isSlot: isOffset: alueSize: src: 12325:6:1declaration: 269isSlot: isOffset: alueSize: src: 12400:6:1declaration: 269isSlot: isOffset: alueSize: src: 12477:6:1declaration: 269isSlot: isOffset: alueSize: src: 12555:6:1declaration: 269isSlot: isOffset: alueSize: src: 12634:6:1declaration: 269isSlot: isOffset: alueSize: src: 12714:6:1declaration: 269isSlot: isOffset: alueSize: src: 12795:6:1declaration: 269isSlot: isOffset: alueSize: src: 12877:6:1declaration: 269isSlot: isOffset: alueSize: src: 12960:6:1declaration: 269isSlot: isOffset: alueSize: src: 13044:6:1declaration: 269isSlot: isOffset: alueSize: src: 13129:6:1declaration: 269isSlot: isOffset: alueSize: src: 13215:6:1declaration: 269isSlot: isOffset: alueSize: src: 13302:6:1declaration: 269isSlot: isOffset: alueSize: src: 13390:6:1declaration: 269isSlot: isOffset: alueSize: src: 13479:6:1declaration: 269isSlot: isOffset: alueSize: src: 13569:6:1declaration: 269isSlot: isOffset: alueSize: src: 13660:6:1declaration: 269isSlot: isOffset: alueSize: src: 13752:6:1declaration: 269isSlot: isOffset: alueSize: src: 13845:6:1declaration: 269isSlot: isOffset: alueSize: src: 13939:6:1declaration: 269isSlot: isOffset: alueSize: src: 14034:6:1declaration: 269isSlot: isOffset: alueSize: src: 14130:6:1declaration: 269isSlot: isOffset: alueSize: src: 14227:6:1declaration: 269isSlot: isOffset: alueSize: src: 14325:6:1declaration: 269isSlot: isOffset: alueSize: src: 14424:6:1declaration: 269isSlot: isOffset: alueSize: src: 14524:6:1declaration: 269isSlot: isOffset: alueSize: src: 14625:6:1declaration: 269isSlot: isOffset: alueSize: src: 14727:6:1declaration: 269isSlot: isOffset: alueSize: src: 14830:6:1declaration: 269isSlot: isOffset: alueSize: src: 14934:6:1declaration: 269isSlot: isOffset: alueSize: src: 15039:6:1declaration: 269isSlot: isOffset: alueSize: src: 15145:6:1declaration: 269isSlot: isOffset: alueSize: src: 15252:6:1declaration: 269isSlot: isOffset: alueSize: src: 15360:6:1declaration: 269isSlot: isOffset: alueSize: src: 15469:6:1declaration: 269isSlot: isOffset: alueSize: src: 15579:6:1declaration: 269isSlot: isOffset: alueSize: src: 15690:6:1declaration: 269isSlot: isOffset: alueSize: src: 15802:6:1declaration: 269isSlot: isOffset: alueSize: src: 15915:6:1declaration: 269isSlot: isOffset: alueSize: src: 16029:6:1declaration: 269isSlot: isOffset: alueSize: src: 16144:6:1declaration: 269isSlot: isOffset: alueSize: src: 16260:6:1declaration: 269isSlot: isOffset: alueSize: src: 16377:6:1declaration: 269isSlot: isOffset: alueSize: src: 16495:6:1declaration: 269isSlot: isOffset: alueSize: src: 16614:6:1declaration: 269isSlot: isOffset: alueSize: src: 16734:6:1declaration: 269isSlot: isOffset: alueSize: src: 16855:6:1declaration: 269isSlot: isOffset: alueSize: src: 16977:6:1declaration: 269isSlot: isOffset: alueSize: src: 17100:6:1declaration: 269isSlot: isOffset: alueSize: src: 17224:6:1declaration: 269isSlot: isOffset: alueSize: src: 17349:6:1declaration: 269isSlot: isOffset: alueSize: src: 17414:6:1declaration: 269isSlot: isOffset: alueSize: src: 10505:1:1declaration: 266isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "result" |),
          M.get_name (| "MAX_UD60x18" |)
        |) then
          let _ :=
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "result" |),
                M.bin_op (|
                  "/",
                  Value.Tuple [
                    M.bin_op (|
                      "*",
                      M.call (|
                        M.get_name (| "log2" |),
                        [
                          M.get_name (| "x" |)
                        ]
                      |),
                      M.get_name (| "SCALE" |)
                    |)
                  ],
                  Value.Integer 332192809488736234
                |)
              |) in
            Value.Tuple [] in
          Value.Tuple []
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition log2 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              ">=",
              M.get_name (| "x" |),
              M.get_name (| "SCALE" |)
            |)
          ]
        |) in
      let _ :=
        let _ :=
          M.define (|
            [ "n" ],
            M.call (|
              M.member_access (|
                M.get_name (| "PRBMathCommon" |),
                "mostSignificantBit"
              |),
              [
                M.bin_op (|
                  "/",
                  M.get_name (| "x" |),
                  M.get_name (| "SCALE" |)
                |)
              ]
            |)
          |) in
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.bin_op (|
              "*",
              M.get_name (| "n" |),
              M.get_name (| "SCALE" |)
            |)
          |) in
        let _ :=
          M.define (|
            [ "y" ],
            M.bin_op (|
              ">>",
              M.get_name (| "x" |),
              M.get_name (| "n" |)
            |)
          |) in
        let _ :=
          if M.bin_op (|
            "==",
            M.get_name (| "y" |),
            M.get_name (| "SCALE" |)
          |) then
            let _ :=
              M.return_ (|
                M.get_name (| "result" |)
              |) in
            Value.Tuple []
          else
            Value.Tuple [] in
        let _ :=
          M.for_ (|
            M.define (|
              [ "delta" ],
              M.get_name (| "HALF_SCALE" |)
            |),
            M.bin_op (|
              ">",
              M.get_name (| "delta" |),
              Value.Integer 0
            |),
            M.assign (|
              ">>=",
              M.get_name (| "delta" |),
              Value.Integer 1
            |),
            let _ :=
              M.assign (|
                "=",
                M.get_name (| "y" |),
                M.bin_op (|
                  "/",
                  Value.Tuple [
                    M.bin_op (|
                      "*",
                      M.get_name (| "y" |),
                      M.get_name (| "y" |)
                    |)
                  ],
                  M.get_name (| "SCALE" |)
                |)
              |) in
            let _ :=
              if M.bin_op (|
                ">=",
                M.get_name (| "y" |),
                M.bin_op (|
                  "*",
                  Value.Integer 2,
                  M.get_name (| "SCALE" |)
                |)
              |) then
                let _ :=
                  M.assign (|
                    "+=",
                    M.get_name (| "result" |),
                    M.get_name (| "delta" |)
                  |) in
                let _ :=
                  M.assign (|
                    ">>=",
                    M.get_name (| "y" |),
                    Value.Integer 1
                  |) in
                Value.Tuple []
              else
                Value.Tuple [] in
            Value.Tuple []
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition mul (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          M.call (|
            M.member_access (|
              M.get_name (| "PRBMathCommon" |),
              "mulDivFixedPoint"
            |),
            [
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pi (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          Value.Integer 3141592653589793238
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pow (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          Conditional M.bin_op (|
            ">",
            M.bin_op (|
              "&",
              M.get_name (| "y" |),
              Value.Integer 1
            |),
            Value.Integer 0
          |) M.get_name (| "x" |) M.get_name (| "SCALE" |)

        |) in
      let _ :=
        M.for_ (|
          M.assign (|
            ">>=",
            M.get_name (| "y" |),
            Value.Integer 1
          |),
          M.bin_op (|
            ">",
            M.get_name (| "y" |),
            Value.Integer 0
          |),
          M.assign (|
            ">>=",
            M.get_name (| "y" |),
            Value.Integer 1
          |),
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "x" |),
              M.call (|
                M.member_access (|
                  M.get_name (| "PRBMathCommon" |),
                  "mulDivFixedPoint"
                |),
                [
                  M.get_name (| "x" |),
                  M.get_name (| "x" |)
                ]
              |)
            |) in
          let _ :=
            if M.bin_op (|
              ">",
              M.bin_op (|
                "&",
                M.get_name (| "y" |),
                Value.Integer 1
              |),
              Value.Integer 0
            |) then
              let _ :=
                M.assign (|
                  "=",
                  M.get_name (| "result" |),
                  M.call (|
                    M.member_access (|
                      M.get_name (| "PRBMathCommon" |),
                      "mulDivFixedPoint"
                    |),
                    [
                      M.get_name (| "result" |),
                      M.get_name (| "x" |)
                    ]
                  |)
                |) in
              Value.Tuple []
            else
              Value.Tuple [] in
          Value.Tuple []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition scale (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "result" |),
          M.get_name (| "SCALE" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition sqrt (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            M.bin_op (|
              "<",
              M.get_name (| "x" |),
              Value.Integer 115792089237316195423570985008687907853269984665640564039458
            |)
          ]
        |) in
      let _ :=
        let _ :=
          M.assign (|
            "=",
            M.get_name (| "result" |),
            M.call (|
              M.member_access (|
                M.get_name (| "PRBMathCommon" |),
                "sqrt"
              |),
              [
                M.bin_op (|
                  "*",
                  M.get_name (| "x" |),
                  M.get_name (| "SCALE" |)
                |)
              ]
            |)
          |) in
        Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End PRBMathUD60x18.
