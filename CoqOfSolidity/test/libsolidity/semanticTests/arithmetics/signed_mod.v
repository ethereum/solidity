(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "%",
            M.get_name (| "a" |),
            M.get_name (| "b" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [_check] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        if M.get_name (| "_check" |) then
          let _ :=
            M.return_ (|
              M.bin_op (|
                "/",
                M.get_name (| "x" |),
                M.un_op (|
                  true,
                  "-",
                  Value.Integer 1
                |)
              |)
            |) in
          Value.Tuple []
        else
          let _ :=
            let _ :=
              M.return_ (|
                M.bin_op (|
                  "/",
                  M.get_name (| "x" |),
                  M.un_op (|
                    true,
                    "-",
                    Value.Integer 1
                  |)
                |)
              |) in
            Value.Tuple [] in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
