(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition test_hardcode1 (α : list Value.t) : M :=
    match α with
    | [a, b, c] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "**",
            M.get_name (| "a" |),
            M.bin_op (|
              "**",
              M.get_name (| "b" |),
              M.get_name (| "c" |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_hardcode2 (α : list Value.t) : M :=
    match α with
    | [a, b, c, d] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "**",
            M.get_name (| "a" |),
            M.bin_op (|
              "**",
              M.get_name (| "b" |),
              M.bin_op (|
                "**",
                M.get_name (| "c" |),
                M.get_name (| "d" |)
              |)
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_invariant (α : list Value.t) : M :=
    match α with
    | [a, b, c] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "==",
            M.bin_op (|
              "**",
              M.get_name (| "a" |),
              M.bin_op (|
                "**",
                M.get_name (| "b" |),
                M.get_name (| "c" |)
              |)
            |),
            M.bin_op (|
              "**",
              M.get_name (| "a" |),
              Value.Tuple [
                M.bin_op (|
                  "**",
                  M.get_name (| "b" |),
                  M.get_name (| "c" |)
                |)
              ]
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_literal_mix (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.bin_op (|
                    "**",
                    M.get_name (| "a" |),
                    M.bin_op (|
                      "**",
                      Value.Integer 2,
                      M.get_name (| "b" |)
                    |)
                  |),
                  M.bin_op (|
                    "**",
                    M.get_name (| "a" |),
                    Value.Tuple [
                      M.bin_op (|
                        "**",
                        Value.Integer 2,
                        M.get_name (| "b" |)
                      |)
                    ]
                  |)
                |)
              ],
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.bin_op (|
                    "**",
                    Value.Integer 2,
                    M.bin_op (|
                      "**",
                      M.get_name (| "a" |),
                      M.get_name (| "b" |)
                    |)
                  |),
                  M.bin_op (|
                    "**",
                    Value.Integer 2,
                    Value.Tuple [
                      M.bin_op (|
                        "**",
                        M.get_name (| "a" |),
                        M.get_name (| "b" |)
                      |)
                    ]
                  |)
                |)
              ]
            |),
            Value.Tuple [
              M.bin_op (|
                "==",
                M.bin_op (|
                  "**",
                  M.get_name (| "a" |),
                  M.bin_op (|
                    "**",
                    M.get_name (| "b" |),
                    Value.Integer 2
                  |)
                |),
                M.bin_op (|
                  "**",
                  M.get_name (| "a" |),
                  Value.Tuple [
                    M.bin_op (|
                      "**",
                      M.get_name (| "b" |),
                      Value.Integer 2
                    |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_other_operators (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "&&",
            M.bin_op (|
              "&&",
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.bin_op (|
                    "/",
                    M.bin_op (|
                      "**",
                      M.get_name (| "a" |),
                      M.get_name (| "b" |)
                    |),
                    Value.Integer 25
                  |),
                  M.bin_op (|
                    "/",
                    Value.Tuple [
                      M.bin_op (|
                        "**",
                        M.get_name (| "a" |),
                        M.get_name (| "b" |)
                      |)
                    ],
                    Value.Integer 25
                  |)
                |)
              ],
              Value.Tuple [
                M.bin_op (|
                  "==",
                  M.bin_op (|
                    "*",
                    M.bin_op (|
                      "**",
                      M.get_name (| "a" |),
                      M.get_name (| "b" |)
                    |),
                    M.bin_op (|
                      "**",
                      Value.Integer 3,
                      M.get_name (| "b" |)
                    |)
                  |),
                  M.bin_op (|
                    "*",
                    Value.Tuple [
                      M.bin_op (|
                        "**",
                        M.get_name (| "a" |),
                        M.get_name (| "b" |)
                      |)
                    ],
                    Value.Tuple [
                      M.bin_op (|
                        "**",
                        Value.Integer 3,
                        M.get_name (| "b" |)
                      |)
                    ]
                  |)
                |)
              ]
            |),
            Value.Tuple [
              M.bin_op (|
                "==",
                M.bin_op (|
                  "/",
                  M.bin_op (|
                    "**",
                    M.get_name (| "b" |),
                    M.bin_op (|
                      "**",
                      M.get_name (| "a" |),
                      M.get_name (| "a" |)
                    |)
                  |),
                  M.bin_op (|
                    "**",
                    M.get_name (| "b" |),
                    M.bin_op (|
                      "**",
                      M.get_name (| "a" |),
                      M.get_name (| "b" |)
                    |)
                  |)
                |),
                M.bin_op (|
                  "/",
                  Value.Tuple [
                    M.bin_op (|
                      "**",
                      M.get_name (| "b" |),
                      Value.Tuple [
                        M.bin_op (|
                          "**",
                          M.get_name (| "a" |),
                          M.get_name (| "a" |)
                        |)
                      ]
                    |)
                  ],
                  Value.Tuple [
                    M.bin_op (|
                      "**",
                      M.get_name (| "b" |),
                      Value.Tuple [
                        M.bin_op (|
                          "**",
                          M.get_name (| "a" |),
                          M.get_name (| "b" |)
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
