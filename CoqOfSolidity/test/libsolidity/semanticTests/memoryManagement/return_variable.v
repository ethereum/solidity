(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition memorySize (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 5
src: 80:29:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 91:1:0declaration: 3isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            M.get_name (| "memorySize" |),
            []
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "g" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            M.get_name (| "memorySize" |),
            []
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "h" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            M.get_name (| "memorySize" |),
            []
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "i" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "d" ],
          M.call (|
            M.get_name (| "memorySize" |),
            []
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.bin_op (|
              "-",
              M.get_name (| "b" |),
              M.get_name (| "a" |)
            |),
            M.bin_op (|
              "-",
              M.get_name (| "c" |),
              M.get_name (| "b" |)
            |),
            M.bin_op (|
              "-",
              M.get_name (| "d" |),
              M.get_name (| "c" |)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
