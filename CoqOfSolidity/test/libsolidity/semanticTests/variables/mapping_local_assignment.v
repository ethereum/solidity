(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition m1 : Value.t :=
    undefined.

  Definition m2 : Value.t :=
    undefined.

  Definition f (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "m" ],
          M.get_name (| "m1" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 1)
          |),
          Value.Integer 42
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "m" |),
          M.get_name (| "m2" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "m" |),
            Some (Value.Integer 2)
          |),
          Value.Integer 21
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m1" |),
              Some (Value.Integer 2)
            |),
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 1)
            |),
            M.index_access (|
              M.get_name (| "m2" |),
              Some (Value.Integer 2)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
