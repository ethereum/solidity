(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module HelloWorld.
  Definition hello (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition world (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End HelloWorld.


(* Interface *)
Module HelloWorldDerived.
  Definition other (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End HelloWorldDerived.


(* Interface *)
Module ERC165.
  Definition supportsInterface (α : list Value.t) : M :=
    match α with
    | [interfaceID] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End ERC165.


(* Contract *)
Module Test.
  Definition ghello_world_interfaceId : Value.t :=
    M.member_access (|
      M.call (|
        M.get_name (| "type" |),
        [
          M.get_name (| "HelloWorld" |)
        ]
      |),
      "interfaceId"
    |).

  Definition ERC165_interfaceId : Value.t :=
    M.member_access (|
      M.call (|
        M.get_name (| "type" |),
        [
          M.get_name (| "ERC165" |)
        ]
      |),
      "interfaceId"
    |).

  Definition hello (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "i" |),
              "hello"
            |),
            "selector"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition world (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "i" |),
              "world"
            |),
            "selector"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition hello_world (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 0xc6be8b58
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition hello_world_interfaceId (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                M.get_name (| "HelloWorld" |)
              ]
            |),
            "interfaceId"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition other (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "i" ],
          Value.Default
        |) in
      let _ :=
        M.return_ (|
          M.member_access (|
            M.member_access (|
              M.get_name (| "i" |),
              "other"
            |),
            "selector"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition hello_world_derived_interfaceId (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                M.get_name (| "HelloWorldDerived" |)
              ]
            |),
            "interfaceId"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
