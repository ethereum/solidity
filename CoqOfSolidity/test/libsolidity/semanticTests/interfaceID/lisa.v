(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module ERC165.
  Definition supportsInterface (α : list Value.t) : M :=
    match α with
    | [interfaceID] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End ERC165.


(* Contract *)
Module ERC165MappingImplementation.
  Definition supportedInterfaces : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "supportedInterfaces" |),
            Some (M.member_access (|
              M.member_access (|
                M.get_name (| "this" |),
                "supportsInterface"
              |),
              "selector"
            |))
          |),
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition supportsInterface (α : list Value.t) : M :=
    match α with
    | [interfaceID] =>
      let _ :=
        M.return_ (|
          M.index_access (|
            M.get_name (| "supportedInterfaces" |),
            Some (M.get_name (| "interfaceID" |))
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End ERC165MappingImplementation.


(* Interface *)
Module Simpson.
  Definition is2D (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition skinColor (α : list Value.t) : M :=
    match α with
    | [] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End Simpson.


(* Contract *)
Module Lisa.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "supportedInterfaces" |),
            Some (M.bin_op (|
              "^",
              M.member_access (|
                M.member_access (|
                  M.get_name (| "this" |),
                  "is2D"
                |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "this" |),
                  "skinColor"
                |),
                "selector"
              |)
            |))
          |),
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition is2D (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Bool true
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition skinColor (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.String "yellow"
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Lisa.
