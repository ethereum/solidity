(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Definition exp (α : list Value.t) : M :=
  match α with
  | [base, exponent] =>
    let _ :=
      if M.bin_op (|
        "==",
        M.get_name (| "exponent" |),
        Value.Integer 0
      |) then
        M.return_ (|
          Value.Integer 1
        |)
      else
        Value.Tuple [] in
    let _ :=
      M.assign (|
        "=",
        M.get_name (| "power" |),
        M.call (|
          M.get_name (| "exp" |),
          [
            M.get_name (| "base" |),
            M.bin_op (|
              "/",
              M.get_name (| "exponent" |),
              Value.Integer 2
            |)
          ]
        |)
      |) in
    let _ :=
      M.assign (|
        "*=",
        M.get_name (| "power" |),
        M.get_name (| "power" |)
      |) in
    let _ :=
      if M.bin_op (|
        "==",
        M.bin_op (|
          "&",
          M.get_name (| "exponent" |),
          Value.Integer 1
        |),
        Value.Integer 1
      |) then
        M.assign (|
          "*=",
          M.get_name (| "power" |),
          M.get_name (| "base" |)
        |)
      else
        Value.Tuple [] in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module C.
  Definition g (α : list Value.t) : M :=
    match α with
    | [base, exponent] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "exp" |),
            [
              M.get_name (| "base" |),
              M.get_name (| "exponent" |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
