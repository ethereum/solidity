(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition data : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x, input] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "data" |),
            "push"
          |),
          [
            M.get_name (| "x" |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "a"; "b" ],
          M.call (|
            M.get_name (| "fun" |),
            [
              M.get_name (| "input" |),
              M.get_name (| "data" |)
            ]
          |)
        |) in
      let _ :=
        M.return_ (|
          Value.Tuple [
            M.get_name (| "a" |),
            M.index_access (|
              M.get_name (| "b" |),
              Some (Value.Integer 1)
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


Definition fun (α : list Value.t) : M :=
  match α with
  | [_x, _y] =>
    let _ :=
      M.return_ (|
        Value.Tuple [
          M.index_access (|
            M.get_name (| "_y" |),
            Some (Value.Integer 0)
          |),
          M.get_name (| "_x" |)
        ]
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.