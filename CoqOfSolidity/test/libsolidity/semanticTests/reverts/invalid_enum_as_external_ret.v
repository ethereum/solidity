(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Enum X *)

  Definition test_return (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "garbled" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 13
src: 107:45:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 130:7:0declaration: 11isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.return_ (|
          M.get_name (| "garbled" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_inline_assignment (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        (* Beginning of a node! *)
id: 23
src: 256:42:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 279:4:0declaration: 21isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition test_assignment (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "tmp" ],
          Value.Default
        |) in
      let _ :=
        (* Beginning of a node! *)
id: 35
src: 386:41:0
nodeType: InlineAssembly
AST: TODO YulJson
externalReferences: src: 409:3:0declaration: 33isSlot: isOffset: alueSize: 
evmVersion: cancun
 in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "_ret" |),
          M.get_name (| "tmp" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
