(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition basic (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "uintMax" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.get_name (| "uintMax" |) in
      let _ :=
        M.define (|
          [ "intMax" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int"
              ]
            |),
            "max"
          |)
        |) in
      let _ :=
        M.get_name (| "intMax" |) in
      let _ :=
        M.define (|
          [ "uintMin" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "uint"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.get_name (| "uintMin" |) in
      let _ :=
        M.define (|
          [ "intMin" ],
          M.member_access (|
            M.call (|
              M.get_name (| "type" |),
              [
                Ty.path "int"
              ]
            |),
            "min"
          |)
        |) in
      let _ :=
        M.get_name (| "intMin" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
