(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a1"; "b1"; "c1"; "d1" ],
          Value.Tuple [
            Value.Integer 1,
            Value.Integer 2,
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.define (|
          [ "a2"; "b2"; "c2" ],
          Value.Tuple [
            Value.Integer 1,
            Value.Integer 2,
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.define (|
          [ "a3"; "b3" ],
          Value.Tuple [
            Value.Integer 1,
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.get_name (| "a1" |) in
      let _ :=
        M.get_name (| "b1" |) in
      let _ :=
        M.get_name (| "c1" |) in
      let _ :=
        M.get_name (| "d1" |) in
      let _ :=
        M.get_name (| "a2" |) in
      let _ :=
        M.get_name (| "b2" |) in
      let _ :=
        M.get_name (| "c2" |) in
      let _ :=
        M.get_name (| "a3" |) in
      let _ :=
        M.get_name (| "b3" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
