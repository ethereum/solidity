(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition a (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.


(* Contract *)
Module B.
  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition b (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
        M.return_ (|
          M.call (|
            NewExpression Ty.path "A"
,
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.


(* Contract *)
Module C.
  Definition m_b : Value.t :=
    undefined.

  Definition m_c : Value.t :=
    undefined.

  Definition  (α : list Value.t) : M :=
    match α with
    | [other_c] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "m_c" |),
          M.get_name (| "other_c" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "m_b" |),
          M.call (|
            NewExpression Ty.path "B"
,
            [
              M.get_name (| "this" |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              M.member_access (|
                M.get_name (| "m_b" |),
                "b"
              |),
              [
                M.get_name (| "this" |)
              ]
            |),
            "a"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              M.get_name (| "g" |),
              [
                M.get_name (| "this" |)
              ]
            |),
            "f"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "other_c" |),
            "f"
          |),
          []
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "m_c" |),
            "f"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
        M.return_ (|
          M.get_name (| "m_c" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
