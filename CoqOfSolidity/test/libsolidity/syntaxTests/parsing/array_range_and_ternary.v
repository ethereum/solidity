(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [cond, x] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.index_access (|
            M.get_name (| "x" |),
            Some Conditional (M.get_name (| "cond" |)) (Value.Integer 1) (Value.Integer 2)

          |)
        |) in
      let _ :=
        M.get_name (| "a" |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            IndexRangeAccess M.get_name (| "x" |) Conditional M.get_name (| "cond" |) Value.Integer 1 Value.Integer 2
 
,
            Value.Tuple [
              Ty.path "uint256"
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            IndexRangeAccess M.get_name (| "x" |) Conditional M.get_name (| "cond" |) Value.Integer 1 Value.Integer 2
 Conditional M.get_name (| "cond" |) Value.Integer 3 Value.Integer 4

,
            Value.Tuple [
              Ty.path "uint256"
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
