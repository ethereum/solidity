(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module A.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Integer 3
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          Conditional Value.Tuple [
            M.bin_op (|
              ">",
              M.get_name (| "x" |),
              M.get_name (| "y" |)
            |)
          ] M.get_name (| "x" |) M.get_name (| "y" |)

        |) in
      let _ :=
        M.define (|
          [ "w" ],
          Conditional M.bin_op (|
            ">",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |) M.get_name (| "x" |) M.get_name (| "y" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End A.
