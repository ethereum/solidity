(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module testInterface.
  Definition C (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition D (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition E (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition F (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End testInterface.


(* Contract *)
Module testContract.
  Definition g (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [str] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "h"
          |),
          [
            M.get_name (| "str" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.get_name (| "str" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [str] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "h"
          |),
          [
            M.get_name (| "str" |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "this" |),
            "g"
          |),
          [
            M.get_name (| "str" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k (α : list Value.t) : M :=
    match α with
    | [str] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "D"
            |),
            Value.Tuple [
              M.get_name (| "str" |)
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition s : Value.t :=
    undefined.

  Definition main (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "C"
            |),
            Value.Tuple [
              M.member_access (|
                M.get_name (| "this" |),
                "g"
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "C"
            |),
            Value.Tuple [
              M.member_access (|
                M.get_name (| "this" |),
                "h"
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "D"
            |),
            Value.Tuple [
              M.get_name (| "s" |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "E"
            |),
            Value.Tuple [
              M.get_name (| "s" |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "testInterface" |),
              "F"
            |),
            Value.Tuple [
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    Ty.path "address",
                    [
                      Value.Integer 0
                    ]
                  |)
                ]
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "i"
            |),
            Value.Tuple [
              M.get_name (| "s" |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "encodeCall"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "j"
            |),
            Value.Tuple [
              M.get_name (| "s" |)
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End testContract.
