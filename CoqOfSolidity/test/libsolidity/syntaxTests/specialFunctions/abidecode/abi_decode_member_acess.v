(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Struct S *)

  (* Enum State *)
End L.


(* Contract *)
Module D.
  (* Struct X *)

  (* Enum Color *)
End D.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.member_access (|
                M.get_name (| "L" |),
                "S"
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.member_access (|
                M.get_name (| "L" |),
                "State"
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.member_access (|
                M.get_name (| "D" |),
                "X"
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.member_access (|
                M.get_name (| "D" |),
                "Color"
              |)
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
