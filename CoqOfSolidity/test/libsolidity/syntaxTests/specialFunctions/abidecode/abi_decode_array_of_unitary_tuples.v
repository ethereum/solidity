(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                Value.Tuple [
                  Ty.path "uint"
                ],
                Some (Value.Integer 2)
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                Value.Tuple [
                  Ty.path "uint"
                ],
                None
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                M.index_access (|
                  Value.Tuple [
                    Ty.path "uint"
                  ],
                  None
                |),
                Some (Value.Integer 3)
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                M.index_access (|
                  Value.Tuple [
                    Ty.path "uint"
                  ],
                  Some (Value.Integer 4)
                |),
                None
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                M.index_access (|
                  Value.Tuple [
                    Ty.path "uint"
                  ],
                  Some (Value.Integer 5)
                |),
                Some (Value.Integer 6)
              |)
            ]
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "abi" |),
            "decode"
          |),
          [
            Value.String "",
            Value.Tuple [
              M.index_access (|
                M.index_access (|
                  Value.Tuple [
                    Value.Tuple [
                      Ty.path "uint"
                    ]
                  ],
                  Some (Value.Integer 5)
                |),
                Some (Value.Integer 6)
              |)
            ]
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
