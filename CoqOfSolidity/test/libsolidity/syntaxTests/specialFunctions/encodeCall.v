(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Interface *)
Module I.
  Definition fExternal (α : list Value.t) : M :=
    match α with
    | [p, t] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End I.


(* Contract *)
Module Other.
  Definition fExternal (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fPublic (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fInternal (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Other.


(* Library *)
Module L.
  Definition fExternal (α : list Value.t) : M :=
    match α with
    | [p, t] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fInternal (α : list Value.t) : M :=
    match α with
    | [p, t] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module Base.
  Definition baseFunctionExternal (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Base.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [a] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [a, b] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f4 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition successFunctionArgsIntLiteralTuple (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "f"
              |),
              Value.Tuple [
                Value.Integer 1
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition successFunctionArgsIntLiteral (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "f"
              |),
              Value.Integer 1
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition successFunctionArgsLiteralTuple (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "f2"
              |),
              Value.Tuple [
                Value.Integer 1,
                Value.String "test"
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition successFunctionArgsEmptyTuple (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "this" |),
                "f4"
              |),
              Value.Tuple [
                
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition viaDeclaration (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              Ty.path "bytes",
              "concat"
            |),
            [
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "Other" |),
                    "fExternal"
                  |),
                  Value.Tuple [
                    Value.Integer 1
                  ]
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "Other" |),
                    "fPublic"
                  |),
                  Value.Tuple [
                    Value.Integer 1
                  ]
                ]
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "abi" |),
                  "encodeCall"
                |),
                [
                  M.member_access (|
                    M.get_name (| "I" |),
                    "fExternal"
                  |),
                  Value.Tuple [
                    Value.Integer 1,
                    Value.String "123"
                  ]
                ]
              |)
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition viaBaseDeclaration (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.member_access (|
              M.get_name (| "abi" |),
              "encodeCall"
            |),
            [
              M.member_access (|
                M.get_name (| "Base" |),
                "baseFunctionExternal"
              |),
              Value.Tuple [
                Value.Integer 1
              ]
            ]
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
