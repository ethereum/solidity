(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Definition e (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Contract *)
Module test.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "e" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "g" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "h" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "e" |),
          M.assign (|
            "=",
            M.get_name (| "g" |),
            M.assign (|
              "=",
              M.get_name (| "h" |),
              Value.Integer 0
            |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.


Definition h (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.