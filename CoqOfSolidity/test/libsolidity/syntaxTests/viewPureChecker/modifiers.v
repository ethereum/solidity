(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition x : Value.t :=
    undefined.

  (* Beginning of a node! *)
id: 8
src: 29:27:0
nodeType: ModifierDefinition
name: purem
nameLocation: 38:5:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition  : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    (* Beginning of a node! *)
id: 6
src: 52:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  (* Beginning of a node! *)
id: 20
src: 61:42:0
nodeType: ModifierDefinition
name: viewm
nameLocation: 70:5:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition  : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    M.define (|
      [ "a" ],
      M.get_name (| "x" |)
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 16
src: 96:1:0
nodeType: PlaceholderStatement
 in
  let _ :=
    M.get_name (| "a" |) in
  Value.Tuple []


  (* Beginning of a node! *)
id: 30
src: 108:40:0
nodeType: ModifierDefinition
name: nonpayablem
nameLocation: 117:11:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition  : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    M.assign (|
      "=",
      M.get_name (| "x" |),
      Value.Integer 2
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 28
src: 144:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []

End D.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition k (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition l (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition m (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition n (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
