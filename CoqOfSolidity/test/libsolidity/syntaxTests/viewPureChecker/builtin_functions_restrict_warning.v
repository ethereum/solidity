(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            M.get_name (| "keccak256" |),
            [
              Value.String "abc"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            M.get_name (| "sha256" |),
            [
              Value.String "abc"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            M.get_name (| "ecrecover" |),
            [
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 1
                    ]
                  |)
                ]
              |),
              M.call (|
                Ty.path "uint8",
                [
                  Value.Integer 2
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 3
                    ]
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 4
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool true
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            Value.Bool true
          ]
        |) in
      let _ :=
        M.get_name (| "x" |) in
      let _ :=
        M.get_name (| "y" |) in
      let _ :=
        M.get_name (| "z" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            M.get_name (| "keccak256" |),
            [
              Value.String "abc"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            M.get_name (| "sha256" |),
            [
              Value.String "abc"
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            M.get_name (| "ecrecover" |),
            [
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 1
                    ]
                  |)
                ]
              |),
              M.call (|
                Ty.path "uint8",
                [
                  Value.Integer 2
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 3
                    ]
                  |)
                ]
              |),
              M.call (|
                Ty.path "bytes32",
                [
                  M.call (|
                    Ty.path "uint256",
                    [
                      Value.Integer 4
                    ]
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool true
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            Value.Bool true
          ]
        |) in
      let _ :=
        M.get_name (| "x" |) in
      let _ :=
        M.get_name (| "y" |) in
      let _ :=
        M.get_name (| "z" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
