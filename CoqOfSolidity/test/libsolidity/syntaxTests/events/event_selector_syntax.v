(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Event E *)
End L.


(* Interface *)
Module I.
  (* Event E *)
End I.


(* Contract *)
Module A.
  (* Event E *)
End A.


(* Contract *)
Module B.
  (* Event E *)
End B.


(* Contract *)
Module C.
  Definition librarySelector : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "L" |),
        "E"
      |),
      "selector"
    |).

  Definition interfaceSelector : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "I" |),
        "E"
      |),
      "selector"
    |).

  Definition foreignContractSelector : Value.t :=
    M.member_access (|
      M.member_access (|
        M.get_name (| "A" |),
        "E"
      |),
      "selector"
    |).

  Definition inheritedSelector : Value.t :=
    M.member_access (|
      M.get_name (| "E" |),
      "selector"
    |).

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "librarySelector" |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "L" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "interfaceSelector" |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "I" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.get_name (| "foreignContractSelector" |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "A" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "assert" |),
          [
            M.bin_op (|
              "==",
              M.member_access (|
                M.get_name (| "E" |),
                "selector"
              |),
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |)
            |)
          ]
        |) in
      let _ :=
        EmitStatement M.call (|
          M.get_name (| "E" |),
          [
            M.member_access (|
              M.get_name (| "E" |),
              "selector"
            |),
            Value.Bool true,
            Value.String "123"
          ]
        |)
 in
      let _ :=
        EmitStatement M.call (|
          M.member_access (|
            M.get_name (| "I" |),
            "E"
          |),
          [
            Value.Tuple [
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |)
            ],
            Value.Bool true,
            Value.String "123"
          ]
        |)
 in
      let _ :=
        EmitStatement M.call (|
          M.member_access (|
            M.get_name (| "A" |),
            "E"
          |),
          [
            Value.Tuple [
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |)
            ],
            Value.Bool true,
            Value.String "123"
          ]
        |)
 in
      let _ :=
        EmitStatement M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "E"
          |),
          [
            Value.Tuple [
              M.member_access (|
                M.member_access (|
                  M.get_name (| "B" |),
                  "E"
                |),
                "selector"
              |)
            ],
            Value.Bool true,
            Value.String "123"
          ]
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
