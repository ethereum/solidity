(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition oneByteUTF8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "usdollar" ],
          Value.String "aaa$aaa"
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "usdollar" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition twoBytesUTF8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "cent" ],
          Value.String "aaa¢aaa"
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "cent" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition threeBytesUTF8 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "eur" ],
          Value.String "aaa€aaa"
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "eur" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition combined (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "res" ],
          Value.String "$¢€"
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "res" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
