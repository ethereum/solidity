(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition s : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        if M.get_name (| "flag" |) then
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.get_name (| "s" |)
          |)
        else
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.get_name (| "s" |)
          |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        if M.get_name (| "flag" |) then
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.get_name (| "s" |)
          |)
        else
          let _ :=
            M.assign (|
              "=",
              M.get_name (| "c" |),
              M.get_name (| "s" |)
            |) in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        if M.get_name (| "flag" |) then
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.get_name (| "s" |)
          |)
        else
          let _ :=
            if M.un_op (|
              true,
              "!",
              M.get_name (| "flag" |)
            |) then
              M.assign (|
                "=",
                M.get_name (| "c" |),
                M.get_name (| "s" |)
              |)
            else
              M.assign (|
                "=",
                M.get_name (| "c" |),
                M.get_name (| "s" |)
              |) in
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        if M.member_access (|
          Value.Tuple [
            M.assign (|
              "=",
              M.get_name (| "c" |),
              M.get_name (| "s" |)
            |)
          ],
          "f"
        |) then
          let _ :=
             in
          Value.Tuple []
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition j (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        if M.bin_op (|
          "&&",
          M.member_access (|
            Value.Tuple [
              M.assign (|
                "=",
                M.get_name (| "c" |),
                M.get_name (| "s" |)
              |)
            ],
            "f"
          |),
          M.un_op (|
            true,
            "!",
            M.member_access (|
              Value.Tuple [
                M.assign (|
                  "=",
                  M.get_name (| "c" |),
                  M.get_name (| "s" |)
                |)
              ],
              "f"
            |)
          |)
        |) then
          let _ :=
             in
          Value.Tuple []
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
