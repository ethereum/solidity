(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct S *)

  Definition s : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        Conditional M.get_name (| "flag" |) M.assign (|
          "=",
          M.get_name (| "c" |),
          M.get_name (| "s" |)
        |) M.assign (|
          "=",
          M.get_name (| "c" |),
          M.get_name (| "s" |)
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        Conditional M.get_name (| "flag" |) M.assign (|
          "=",
          M.get_name (| "c" |),
          M.get_name (| "s" |)
        |) Value.Tuple [
          M.assign (|
            "=",
            M.get_name (| "c" |),
            M.get_name (| "s" |)
          |)
        ]
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [flag] =>
      let _ :=
        Conditional M.get_name (| "flag" |) M.member_access (|
          Value.Tuple [
            M.assign (|
              "=",
              M.get_name (| "c" |),
              M.get_name (| "s" |)
            |)
          ],
          "f"
        |) M.member_access (|
          Value.Tuple [
            M.assign (|
              "=",
              M.get_name (| "c" |),
              M.get_name (| "s" |)
            |)
          ],
          "f"
        |)
 in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
