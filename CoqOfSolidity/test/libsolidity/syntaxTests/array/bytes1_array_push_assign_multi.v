(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition z : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |)
          ],
          Value.Tuple [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              Value.Tuple [
                M.call (|
                  M.member_access (|
                    M.get_name (| "x" |),
                    "push"
                  |),
                  []
                |)
              ]
            ],
            Value.Tuple [
              M.call (|
                M.member_access (|
                  M.get_name (| "x" |),
                  "push"
                |),
                []
              |)
            ]
          ],
          Value.Tuple [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            Value.Tuple [
              M.call (|
                M.member_access (|
                  M.get_name (| "x" |),
                  "push"
                |),
                []
              |),
              M.call (|
                M.member_access (|
                  M.get_name (| "x" |),
                  "push"
                |),
                []
              |)
            ],
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |)
          ],
          Value.Tuple [
            Value.Tuple [
              Value.Integer 0,
              Value.Integer 0
            ],
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |),
            M.index_access (|
              M.get_name (| "x" |),
              Some (Value.Integer 0)
            |)
          ],
          Value.Tuple [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.get_name (| "x" |)
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "y" |),
                "push"
              |),
              []
            |)
          ],
          Value.Tuple [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.call (|
              M.member_access (|
                M.get_name (| "x" |),
                "push"
              |),
              []
            |),
            M.call (|
              M.member_access (|
                M.get_name (| "z" |),
                "push"
              |),
              []
            |)
          ],
          Value.Tuple [
            Value.Integer 0,
            Value.Integer 0
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
