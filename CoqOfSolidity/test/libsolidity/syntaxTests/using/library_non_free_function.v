(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  Definition id (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Axiom using : M.usingFunctions (|
      Some (Ty.path "uint"),
      UsingKind.Local,
      [
      UsingFunction.Function "L.id",
    ]
    |).

  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "x" |),
            "id"
          |),
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
