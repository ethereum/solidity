(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f (α : list Value.t) : M :=
    match α with
    | [x, y, z] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition call (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 1
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 1,
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 2,
            Value.Integer 1
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 1,
            Value.Integer 2,
            Value.Integer 3
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 3,
            Value.Integer 1,
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "f" |),
          [
            Value.Integer 2,
            Value.Integer 3,
            Value.Integer 1
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
