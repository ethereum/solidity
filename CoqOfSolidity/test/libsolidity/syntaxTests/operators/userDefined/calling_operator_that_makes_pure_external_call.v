(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int16".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "add",
    UsingFunction.Operator "-" "unsub",
  ]
  |).

Definition ADDER : Value.t :=
  M.call (|
    M.get_name (| "IAdder" |),
    [
      M.call (|
        Ty.path "address",
        [
          Value.Integer 0
        ]
      |)
    ]
  |).

Definition add (α : list Value.t) : M :=
  match α with
  | [x, y] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "ADDER" |),
            "mul"
          |),
          [
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsub (α : list Value.t) : M :=
  match α with
  | [x] =>
    let _ :=
      M.return_ (|
        M.call (|
          M.member_access (|
            M.get_name (| "ADDER" |),
            "inc"
          |),
          [
            M.get_name (| "x" |)
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

(* Interface *)
Module IAdder.
  Definition mul (α : list Value.t) : M :=
    match α with
    | [_, _] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition inc (α : list Value.t) : M :=
    match α with
    | [_] =>
      not implemented
    | _ => M.impossible "invalid number of parameters"
    end.
End IAdder.
