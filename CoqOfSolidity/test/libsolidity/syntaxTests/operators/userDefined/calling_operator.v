(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

Axiom user_type_Int : Ty.path "Int" = Ty.path "int".

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int"),
    UsingKind.Global,
    [
    UsingFunction.Operator "+" "add",
  ]
  |).

Axiom using : M.usingFunctions (|
    Some (Ty.path "Int"),
    UsingKind.Global,
    [
    UsingFunction.Operator "-" "unsub",
  ]
  |).

Definition add (α : list Value.t) : M :=
  match α with
  | [_, _] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition unsub (α : list Value.t) : M :=
  match α with
  | [_] =>
    let _ :=
       in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.

Definition f (α : list Value.t) : M :=
  match α with
  | [] =>
    let _ :=
      M.bin_op (|
        "+",
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |),
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |)
      |) in
    let _ :=
      M.un_op (|
        true,
        "-",
        M.call (|
          M.member_access (|
            M.get_name (| "Int" |),
            "wrap"
          |),
          [
            Value.Integer 0
          ]
        |)
      |) in
    Value.Tuple []
  | _ => M.impossible "invalid number of parameters"
  end.