(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module First.
  Definition fun (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            ">",
            M.call (|
              M.member_access (|
                M.call (|
                  M.get_name (| "Second" |),
                  [
                    M.call (|
                      Ty.path "address",
                      [
                        Value.Integer 1
                      ]
                    |)
                  ]
                |),
                "fun"
              |),
              [
                Value.Integer 1,
                Value.Bool true,
                Value.Integer 3
              ]
            |),
            Value.Integer 0
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End First.


(* Contract *)
Module Second.
  Definition fun (α : list Value.t) : M :=
    match α with
    | [_, _, _] =>
      let _ :=
        if M.bin_op (|
          "==",
          M.call (|
            M.member_access (|
              M.call (|
                M.get_name (| "First" |),
                [
                  M.call (|
                    Ty.path "address",
                    [
                      Value.Integer 2
                    ]
                  |)
                ]
              |),
              "fun"
            |),
            []
          |),
          Value.Bool true
        |) then
          M.return_ (|
            Value.Integer 1
          |)
        else
          Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Second.
