(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  (* Struct s1 *)

  Definition struct_x : Value.t :=
    undefined.

  Definition struct_y : Value.t :=
    undefined.

  Definition fun_x (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition fun_y (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Enum small *)

  Definition table1 : Value.t :=
    undefined.

  Definition table2 : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "g" ],
          Conditional Value.Bool true M.get_name (| "x" |) M.get_name (| "y" |)

        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "g" |),
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "h" ],
          Conditional Value.Bool true Value.Integer 1 Value.Integer 3

        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "h" |),
          Value.Integer 1
        |) in
      let _ :=
        M.define (|
          [ "i" ],
          Conditional Value.Bool true Value.String "hello" Value.String "world"

        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "i" |),
          Value.String "used"
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f2 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "j" ],
          Conditional Value.Bool true Value.Bool true Value.Bool false

        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "j" |),
          M.bin_op (|
            "&&",
            M.get_name (| "j" |),
            Value.Bool true
          |)
        |) in
      let _ :=
        M.define (|
          [ "a" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "k" ],
          Conditional Value.Bool true M.get_name (| "a" |) M.get_name (| "b" |)

        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "k" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            Ty.path "bytes1",
            [
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "e" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "f" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "l" ],
          Conditional Value.Bool true M.get_name (| "e" |) M.get_name (| "f" |)

        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "l" |),
            Some (Value.Integer 0)
          |),
          M.call (|
            Ty.path "bytes1",
            [
              Value.Integer 0
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "d" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "m" ],
          Conditional Value.Bool true M.get_name (| "c" |) M.get_name (| "d" |)

        |) in
      let _ :=
        M.assign (|
          "&=",
          M.get_name (| "m" |),
          M.get_name (| "m" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition f3 (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "struct_x" |),
          Conditional Value.Bool true M.get_name (| "struct_x" |) M.get_name (| "struct_y" |)

        |) in
      let _ :=
        M.define (|
          [ "r" ],
          Conditional Value.Bool true M.get_name (| "fun_x" |) M.get_name (| "fun_y" |)

        |) in
      let _ :=
        M.call (|
          M.get_name (| "r" |),
          []
        |) in
      let _ :=
        M.define (|
          [ "enum_x" ],
          Value.Default
        |) in
      let _ :=
        M.define (|
          [ "enum_y" ],
          Value.Default
        |) in
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "enum_x" |),
          Conditional Value.Bool true M.get_name (| "enum_x" |) M.get_name (| "enum_y" |)

        |) in
      let _ :=
        M.define (|
          [ "n"; "o" ],
          Conditional Value.Bool true Value.Tuple [
            Value.Integer 1,
            Value.Integer 2
          ] Value.Tuple [
            Value.Integer 3,
            Value.Integer 4
          ]

        |) in
      let _ :=
        M.assign (|
          "=",
          Value.Tuple [
            M.get_name (| "n" |),
            M.get_name (| "o" |)
          ],
          Value.Tuple [
            M.get_name (| "o" |),
            M.get_name (| "n" |)
          ]
        |) in
      let _ :=
        M.define (|
          [ "p" ],
          Conditional Value.Bool true M.get_name (| "table1" |) M.get_name (| "table2" |)

        |) in
      let _ :=
        M.assign (|
          "=",
          M.index_access (|
            M.get_name (| "p" |),
            Some (Value.Integer 0)
          |),
          Value.Integer 0
        |) in
      let _ :=
        M.define (|
          [ "q" ],
          Conditional Value.Bool true M.call (|
            Ty.path "uint32",
            [
              Value.Integer 1
            ]
          |) M.call (|
            Ty.path "uint32",
            [
              Value.Integer 2
            ]
          |)

        |) in
      let _ :=
        M.assign (|
          "+=",
          M.get_name (| "q" |),
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
