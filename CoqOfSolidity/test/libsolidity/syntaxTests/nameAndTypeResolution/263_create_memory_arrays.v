(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Library *)
Module L.
  (* Struct R *)

  (* Struct S *)
End L.


(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [size] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            NewExpression Ty.array (Ty.array (Ty.path "L.S") None) None
,
            [
              Value.Integer 10
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "y" ],
          M.call (|
            NewExpression Ty.array (Ty.path "uint") None
,
            [
              Value.Integer 20
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "z" ],
          M.call (|
            NewExpression Ty.path "bytes"
,
            [
              M.get_name (| "size" |)
            ]
          |)
        |) in
      let _ :=
        M.get_name (| "x" |) in
      let _ :=
        M.get_name (| "y" |) in
      let _ :=
        M.get_name (| "z" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
