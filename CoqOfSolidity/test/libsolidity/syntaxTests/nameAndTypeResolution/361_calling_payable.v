(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module receiver.
  Definition pay (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End receiver.


(* Contract *)
Module test.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            Value.Tuple [
              M.call (|
                NewExpression Ty.path "receiver"
,
                []
              |)
            ],
            "pay"
          |) [value, ] Value.Integer 10
,
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition r : Value.t :=
    M.call (|
      NewExpression Ty.path "receiver"
,
      []
    |).

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          FunctionCallOptions M.member_access (|
            M.get_name (| "r" |),
            "pay"
          |) [value, ] Value.Integer 10
,
          []
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
