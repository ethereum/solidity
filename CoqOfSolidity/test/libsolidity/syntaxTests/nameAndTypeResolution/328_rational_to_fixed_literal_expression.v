(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module test.
  Definition f (Î± : list Value.t) : M :=
    match Î± with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.bin_op (|
            "*",
            Value.Integer 3.5,
            Value.Integer 3
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.bin_op (|
            "-",
            Value.Integer 4,
            Value.Integer 2.5
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.bin_op (|
            "/",
            Value.Integer 11,
            Value.Integer 4
          |)
        |) in
      let _ :=
        M.define (|
          [ "d" ],
          M.bin_op (|
            "+",
            Value.Integer 599,
            Value.Integer 0.21875
          |)
        |) in
      let _ :=
        M.define (|
          [ "e" ],
          M.call (|
            Ty.path "ufixed256x80",
            [
              M.bin_op (|
                "%",
                Value.Integer 35.245,
                Value.Integer 12.9
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "f" ],
          M.call (|
            Ty.path "ufixed256x80",
            [
              M.bin_op (|
                "%",
                Value.Integer 1.2,
                Value.Integer 2
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "g" ],
          M.bin_op (|
            "**",
            Value.Integer 2,
            M.un_op (|
              true,
              "-",
              Value.Integer 2
            |)
          |)
        |) in
      let _ :=
        M.get_name (| "a" |) in
      let _ :=
        M.get_name (| "b" |) in
      let _ :=
        M.get_name (| "c" |) in
      let _ :=
        M.get_name (| "d" |) in
      let _ :=
        M.get_name (| "e" |) in
      let _ :=
        M.get_name (| "f" |) in
      let _ :=
        M.get_name (| "g" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End test.
