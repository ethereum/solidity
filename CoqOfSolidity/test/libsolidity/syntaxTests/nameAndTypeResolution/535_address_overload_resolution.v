(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition balance (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.member_access (|
          M.get_name (| "this" |),
          "balance"
        |) in
      let _ :=
        M.return_ (|
          Value.Integer 1
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition transfer (α : list Value.t) : M :=
    match α with
    | [amount] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.call (|
              Ty.path "address",
              [
                M.get_name (| "this" |)
              ]
            |),
            "transfer"
          |),
          [
            M.get_name (| "amount" |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


(* Contract *)
Module D.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "x" ],
          M.call (|
            M.member_access (|
              Value.Tuple [
                M.call (|
                  NewExpression Ty.path "C"
,
                  []
                |)
              ],
              "balance"
            |),
            []
          |)
        |) in
      let _ :=
        M.get_name (| "x" |) in
      let _ :=
        M.call (|
          M.member_access (|
            Value.Tuple [
              M.call (|
                NewExpression Ty.path "C"
,
                []
              |)
            ],
            "transfer"
          |),
          [
            Value.Integer 5
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
