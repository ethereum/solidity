(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Pragma abicoderv2 *)

(* Contract *)
Module Ownable.
  Definition _owner : Value.t :=
    undefined.

  (* Beginning of a node! *)
id: 15
src: 87:114:0
nodeType: ModifierDefinition
name: onlyOwner
nameLocation: 96:9:0
documentation: 
visibility: internal
parameters: ParameterList.make []
virtual: 0
overrides: 
body: let _ :=
    M.call (|
      M.get_name (| "require" |),
      [
        M.bin_op (|
          "==",
          M.member_access (|
            M.get_name (| "msg" |),
            "sender"
          |),
          M.get_name (| "_owner" |)
        |),
        Value.String "Ownable: caller is not the owner"
      ]
    |) in
  let _ :=
    (* Beginning of a node! *)
id: 13
src: 193:1:0
nodeType: PlaceholderStatement
 in
  Value.Tuple []


  Definition renounceOwnership (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Ownable.


(* Library *)
Module VoteTiming.
  Definition init (α : list Value.t) : M :=
    match α with
    | [phaseLength] =>
      let _ :=
        M.call (|
          M.get_name (| "require" |),
          [
            Value.Bool true,
            Value.String ""
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End VoteTiming.


(* Contract *)
Module Voting.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "VoteTiming" |),
            "init"
          |),
          [
            Value.Integer 1
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Voting.
