(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module D.
  Definition  (α : list Value.t) : M :=
    match α with
    | [_] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.


(* Contract *)
Module E.
  Definition test (α : list Value.t) : M :=
    match α with
    | [f] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "f" |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End E.


(* Library *)
Module L.
  Definition test (α : list Value.t) : M :=
    match α with
    | [f] =>
      let _ :=
        M.return_ (|
          M.call (|
            M.get_name (| "f" |),
            []
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End L.


(* Contract *)
Module C.
  Definition x : Value.t :=
    undefined.

  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          NewExpression Ty.path "D"
,
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testPure"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "D"
,
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testView"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          NewExpression Ty.path "D"
,
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testDefault"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition g (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "e" ],
          M.call (|
            M.get_name (| "E" |),
            [
              M.call (|
                Ty.path "address",
                [
                  Value.Integer 0
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "e" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testPure"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "e" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testView"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "e" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testDefault"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition h (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testPure"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testView"
            |)
          ]
        |) in
      let _ :=
        M.call (|
          M.member_access (|
            M.get_name (| "L" |),
            "test"
          |),
          [
            M.member_access (|
              M.get_name (| "this" |),
              "testDefault"
            |)
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition i (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "value" ],
          M.bin_op (|
            "%",
            M.member_access (|
              M.get_name (| "block" |),
              "number"
            |),
            Value.Integer 3
          |)
        |) in
      let _ :=
        if M.bin_op (|
          "==",
          M.get_name (| "value" |),
          Value.Integer 0
        |) then
          let _ :=
            M.return_ (|
              M.member_access (|
                M.get_name (| "this" |),
                "testPure"
              |)
            |) in
          Value.Tuple []
        else
          if M.bin_op (|
            "==",
            M.get_name (| "value" |),
            Value.Integer 1
          |) then
            let _ :=
              M.return_ (|
                M.member_access (|
                  M.get_name (| "this" |),
                  "testView"
                |)
              |) in
            Value.Tuple []
          else
            let _ :=
              M.return_ (|
                M.member_access (|
                  M.get_name (| "this" |),
                  "testDefault"
                |)
              |) in
            Value.Tuple [] in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  (* Beginning of a node! *)
id: 183
src: 1467:110:0
nodeType: ModifierDefinition
name: mod
nameLocation: 1476:3:0
documentation: 
visibility: internal
parameters: ParameterList.make [
    Definition fun : Value.t :=
      undefined.
  ]
virtual: 0
overrides: 
body: let _ :=
    if M.bin_op (|
      "==",
      M.call (|
        M.get_name (| "fun" |),
        []
      |),
      Value.Integer 0
    |) then
      let _ :=
        (* Beginning of a node! *)
id: 179
src: 1559:1:0
nodeType: PlaceholderStatement
 in
      Value.Tuple []
    else
      Value.Tuple [] in
  Value.Tuple []


  Definition j (α : list Value.t) : M :=
    match α with
    | [fun] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testPure (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          Value.Integer 0
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testView (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition testDefault (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.assign (|
          "=",
          M.get_name (| "x" |),
          Value.Integer 5
        |) in
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.
