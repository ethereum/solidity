(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module B.
  Definition ext (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition pub (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End B.


(* Contract *)
Module C.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.member_access (|
          M.member_access (|
            M.get_name (| "B" |),
            "ext"
          |),
          "selector"
        |) in
      let _ :=
        M.member_access (|
          M.member_access (|
            M.get_name (| "B" |),
            "pub"
          |),
          "selector"
        |) in
      let _ :=
        M.member_access (|
          M.member_access (|
            M.get_name (| "this" |),
            "ext"
          |),
          "selector"
        |) in
      let _ :=
        M.member_access (|
          M.get_name (| "pub" |),
          "selector"
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


(* Contract *)
Module D.
  Definition test (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.member_access (|
          M.member_access (|
            M.get_name (| "B" |),
            "ext"
          |),
          "selector"
        |) in
      let _ :=
        M.member_access (|
          M.member_access (|
            M.get_name (| "B" |),
            "pub"
          |),
          "selector"
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End D.
