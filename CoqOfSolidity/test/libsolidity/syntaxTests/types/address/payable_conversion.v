(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module C.
  Definition f (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "a" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                Ty.path "address",
                [
                  M.call (|
                    NewExpression Ty.path "D"
,
                    []
                  |)
                ]
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "b" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                NewExpression Ty.path "E"
,
                []
              |)
            ]
          |)
        |) in
      let _ :=
        M.define (|
          [ "c" ],
          M.call (|
            Ty.path "address",
            [
              M.call (|
                NewExpression Ty.path "F"
,
                []
              |)
            ]
          |)
        |) in
      let _ :=
        M.get_name (| "a" |) in
      let _ :=
        M.get_name (| "b" |) in
      let _ :=
        M.get_name (| "c" |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End C.


(* Contract *)
Module D.
  
End D.


(* Contract *)
Module E.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End E.


(* Contract *)
Module F.
  Definition  (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
         in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End F.
