(* Generated by coq-of-solidity *)
Require Import CoqOfSolidity.CoqOfSolidity.

(* Contract *)
Module Test.
  Definition uint256_to_uint256 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uint256_to_string (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.get_name (| "x" |),
            Value.Integer 0
          |) Value.String "a" Value.String "b"

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition string_to_uint256 (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.member_access (|
            M.call (|
              Ty.path "bytes",
              [
                M.get_name (| "x" |)
              ]
            |),
            "length"
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition string_to_string (α : list Value.t) : M :=
    match α with
    | [x] =>
      let _ :=
        M.return_ (|
          M.get_name (| "x" |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uint256_uint256_to_uint256 (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          M.bin_op (|
            "+",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |)
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uint256_uint256_to_string (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.get_name (| "x" |),
            M.get_name (| "y" |)
          |) Value.String "a" Value.String "b"

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition string_uint256_to_string (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.get_name (| "y" |),
            Value.Integer 0
          |) Value.String "a" M.get_name (| "x" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition string_string_to_string (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.member_access (|
              M.call (|
                Ty.path "bytes",
                [
                  M.get_name (| "x" |)
                ]
              |),
              "length"
            |),
            Value.Integer 0
          |) M.get_name (| "y" |) M.get_name (| "x" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition uint256_string_to_string (α : list Value.t) : M :=
    match α with
    | [x, y] =>
      let _ :=
        M.return_ (|
          Conditional M.bin_op (|
            "==",
            M.get_name (| "x" |),
            Value.Integer 0
          |) Value.String "a" M.get_name (| "y" |)

        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.

  Definition tests (α : list Value.t) : M :=
    match α with
    | [] =>
      let _ :=
        M.define (|
          [ "var_uint256_to_uint256" ],
          M.get_name (| "uint256_to_uint256" |)
        |) in
      let _ :=
        M.define (|
          [ "var_uint256_to_string" ],
          M.get_name (| "uint256_to_string" |)
        |) in
      let _ :=
        M.define (|
          [ "var_string_to_uint256" ],
          M.get_name (| "string_to_uint256" |)
        |) in
      let _ :=
        M.define (|
          [ "var_string_to_string" ],
          M.get_name (| "string_to_string" |)
        |) in
      let _ :=
        M.define (|
          [ "var_uint256_uint256_to_uint256" ],
          M.get_name (| "uint256_uint256_to_uint256" |)
        |) in
      let _ :=
        M.define (|
          [ "var_uint256_uint256_to_string" ],
          M.get_name (| "uint256_uint256_to_string" |)
        |) in
      let _ :=
        M.define (|
          [ "var_string_uint256_to_string" ],
          M.get_name (| "string_uint256_to_string" |)
        |) in
      let _ :=
        M.define (|
          [ "var_string_string_to_string" ],
          M.get_name (| "string_string_to_string" |)
        |) in
      let _ :=
        M.define (|
          [ "var_uint256_string_to_string" ],
          M.get_name (| "uint256_string_to_string" |)
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_uint256_to_uint256" |),
          [
            Value.Integer 1
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_uint256_to_string" |),
          [
            Value.Integer 2
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_string_to_uint256" |),
          [
            Value.String "a"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_string_to_string" |),
          [
            Value.String "b"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_uint256_uint256_to_uint256" |),
          [
            Value.Integer 3,
            Value.Integer 4
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_uint256_uint256_to_string" |),
          [
            Value.Integer 5,
            Value.Integer 6
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_string_uint256_to_string" |),
          [
            Value.String "c",
            Value.Integer 7
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_string_string_to_string" |),
          [
            Value.String "d",
            Value.String "e"
          ]
        |) in
      let _ :=
        M.call (|
          M.get_name (| "var_uint256_string_to_string" |),
          [
            Value.Integer 8,
            Value.String "f"
          ]
        |) in
      Value.Tuple []
    | _ => M.impossible "invalid number of parameters"
    end.
End Test.
