(* Generated by shallow_embed.py *)
Require Import CoqOfSolidity.CoqOfSolidity.
Require Import CoqOfSolidity.simulations.CoqOfSolidity.
Import Stdlib.

Module Contract_91.
  Definition body : M.t unit :=
    do~
      let~ _1 := [[ memoryguard ~(| 0x80 |) ]] in
      do~ [[ mstore ~(| 64, _1 |) ]] in
      let_state~ 'tt := [[
        Shallow.if_ (|
          callvalue ~(||),
          do~ [[ revert ~(| 0, 0 |) ]] in
          M.pure (BlockUnit.Tt, tt),
          tt
        |)
      ]] default~ tt in
      let~ _2 := [[ datasize ~(| 0x436f6e74726163745f39315f6465706c6f796564000000000000000000000000 (* Contract_91_deployed *) |) ]] in
      do~ [[ codecopy ~(| _1, dataoffset ~(| 0x436f6e74726163745f39315f6465706c6f796564000000000000000000000000 (* Contract_91_deployed *) |), _2 |) ]] in
      do~ [[ return_ ~(| _1, _2 |) ]] in
      M.pure (BlockUnit.Tt, tt)
    in
    M.pure tt.

  Module Contract_91_deployed.
    Definition usr'dollar'ecAddn2 (usr'dollar'x1 : U256.t) (usr'dollar'y1 : U256.t) (usr'dollar'zz1 : U256.t) (usr'dollar'zzz1 : U256.t) (usr'dollar'x2 : U256.t) (usr'dollar'y2 : U256.t) (usr'dollar'_p : U256.t) : M.t (U256.t * U256.t * U256.t * U256.t) :=
      let~ '(_, result) :=
        let~ usr'dollar'y2_1 := [[ addmod ~(| mulmod ~(| usr'dollar'y2, usr'dollar'zzz1, usr'dollar'_p |), sub ~(| usr'dollar'_p, usr'dollar'y1 |), usr'dollar'_p |) ]] in
        let~ usr'dollar'x2_1 := [[ addmod ~(| mulmod ~(| usr'dollar'x2, usr'dollar'zz1, usr'dollar'_p |), sub ~(| usr'dollar'_p, usr'dollar'x1 |), usr'dollar'_p |) ]] in
        let~ usr_x_1 := [[ mulmod ~(| usr'dollar'x2_1, usr'dollar'x2_1, usr'dollar'_p |) ]] in
        let~ usr_y_1 := [[ mulmod ~(| usr_x_1, usr'dollar'x2_1, usr'dollar'_p |) ]] in
        let~ usr_zz := [[ mulmod ~(| usr'dollar'zz1, usr_x_1, usr'dollar'_p |) ]] in
        let~ usr_zzz := [[ mulmod ~(| usr'dollar'zzz1, usr_y_1, usr'dollar'_p |) ]] in
        let~ usr'dollar'zz1_1 := [[ mulmod ~(| usr'dollar'x1, usr_x_1, usr'dollar'_p |) ]] in
        let~ usr_x := [[ addmod ~(| addmod ~(| mulmod ~(| usr'dollar'y2_1, usr'dollar'y2_1, usr'dollar'_p |), sub ~(| usr'dollar'_p, usr_y_1 |), usr'dollar'_p |), mulmod ~(| add ~(| usr'dollar'_p, not ~(| 1 |) |), usr'dollar'zz1_1, usr'dollar'_p |), usr'dollar'_p |) ]] in
        let~ usr_y := [[ addmod ~(| mulmod ~(| addmod ~(| usr'dollar'zz1_1, sub ~(| usr'dollar'_p, usr_x |), usr'dollar'_p |), usr'dollar'y2_1, usr'dollar'_p |), mulmod ~(| sub ~(| usr'dollar'_p, usr'dollar'y1 |), usr_y_1, usr'dollar'_p |), usr'dollar'_p |) ]] in
        M.pure (BlockUnit.Tt, (usr_x, usr_y, usr_zz, usr_zzz))
      in
      M.pure result.

    Definition usr'dollar'ecAddn2_2189 (usr'dollar'x1 : U256.t) (usr'dollar'y1 : U256.t) (usr'dollar'x2 : U256.t) (usr'dollar'y2 : U256.t) (usr_p : U256.t) : M.t (U256.t * U256.t * U256.t * U256.t) :=
      let~ '(_, result) :=
        let~ usr'dollar'y1_1 := [[ sub ~(| usr_p, usr'dollar'y1 |) ]] in
        let~ usr'dollar'y2_1 := [[ addmod ~(| mulmod ~(| usr'dollar'y2, 1, usr_p |), usr'dollar'y1_1, usr_p |) ]] in
        let~ usr'dollar'x2_1 := [[ addmod ~(| mulmod ~(| usr'dollar'x2, 1, usr_p |), sub ~(| usr_p, usr'dollar'x1 |), usr_p |) ]] in
        let~ usr_x_1 := [[ mulmod ~(| usr'dollar'x2_1, usr'dollar'x2_1, usr_p |) ]] in
        let~ usr_y_1 := [[ mulmod ~(| usr_x_1, usr'dollar'x2_1, usr_p |) ]] in
        let~ usr_zz := [[ mulmod ~(| 1, usr_x_1, usr_p |) ]] in
        let~ usr_zzz := [[ mulmod ~(| 1, usr_y_1, usr_p |) ]] in
        let~ usr'dollar'zz1 := [[ mulmod ~(| usr'dollar'x1, usr_x_1, usr_p |) ]] in
        let~ usr_x := [[ addmod ~(| addmod ~(| mulmod ~(| usr'dollar'y2_1, usr'dollar'y2_1, usr_p |), sub ~(| usr_p, usr_y_1 |), usr_p |), mulmod ~(| add ~(| usr_p, not ~(| 1 |) |), usr'dollar'zz1, usr_p |), usr_p |) ]] in
        let~ usr_y := [[ addmod ~(| mulmod ~(| addmod ~(| usr'dollar'zz1, sub ~(| usr_p, usr_x |), usr_p |), usr'dollar'y2_1, usr_p |), mulmod ~(| usr'dollar'y1_1, usr_y_1, usr_p |), usr_p |) ]] in
        M.pure (BlockUnit.Tt, (usr_x, usr_y, usr_zz, usr_zzz))
      in
      M.pure result.

    Definition fun_ecGenMulmuladdX_store_2814 : M.t unit :=
      let~ '(_, result) :=
        do~ [[ mstore ~(| 0xa0, 0 |) ]] in
        do~ [[ mstore ~(| 0x01a0, shl ~(| 127, 1 |) |) ]] in
        let~ expr := [[ iszero ~(| mload ~(| 0x0120 |) |) ]] in
        let_state~ expr := [[
          Shallow.if_ (|
            expr,
            let~ expr := [[ iszero ~(| mload ~(| 0x0160 |) |) ]] in
            M.pure (BlockUnit.Tt, expr),
            expr
          |)
        ]] default~ tt in
        let_state~ 'tt := [[
          Shallow.if_ (|
            expr,
            do~ [[ mstore ~(| 0xa0, 0 |) ]] in
            M.pure (BlockUnit.Leave, tt),
            tt
          |)
        ]] default~ tt in
        do~ [[ mstore ~(| 0x0100, 0 |) ]] in
        do~ [[ mstore ~(| 0xe0, 0 |) ]] in
        do~ [[ mstore ~(| 0x01c0, 0 |) ]] in
        let~ _1 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| 0x40, add ~(| _1, 2048 |) |) ]] in
        do~ [[ mstore ~(| add ~(| _1, 4128 |), mload ~(| add ~(| mload ~(| 0x0140 |), 128 |) |) |) ]] in
        let~ _2 := [[ mload ~(| 0x40 |) ]] in
        let~ usr_modulusp := [[ mload ~(| add ~(| _2, 2080 |) |) ]] in
        let~ _3 := [[ add ~(| mload ~(| 0x0140 |), 224 |) ]] in
        let~ _4 := [[ mload ~(| _3 |) ]] in
        let~ _5 := [[ add ~(| mload ~(| 0x0140 |), 192 |) ]] in
        do~ [[ mstore ~(| add ~(| 128, _2 |), mload ~(| _5 |) |) ]] in
        do~ [[ mstore ~(| add ~(| _2, 160 |), _4 |) ]] in
        do~ [[ mstore ~(| add ~(| _2, 192 |), 1 |) ]] in
        do~ [[ mstore ~(| add ~(| _2, 224 |), 1 |) ]] in
        let~ _6 := [[ add ~(| mload ~(| 0x0140 |), 288 |) ]] in
        let~ _7 := [[ mload ~(| _6 |) ]] in
        let~ _8 := [[ add ~(| mload ~(| 0x0140 |), 256 |) ]] in
        let~ _9 := [[ mload ~(| _8 |) ]] in
        let~ _10 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 256, _10 |), _9 |) ]] in
        do~ [[ mstore ~(| add ~(| _10, 288 |), _7 |) ]] in
        do~ [[ mstore ~(| add ~(| _10, 320 |), 1 |) ]] in
        do~ [[ mstore ~(| add ~(| _10, 352 |), 1 |) ]] in
        let~ var_X := [[ mload ~(| _8 |) ]] in
        let~ var_Y := [[ mload ~(| _6 |) ]] in
        let~ '(var_X_1, var_Y_1, var_ZZ, var_ZZZ) := [[ usr'dollar'ecAddn2_2189 ~(| var_X, var_Y, mload ~(| _5 |), mload ~(| _3 |), usr_modulusp |) ]] in
        let~ _11 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 384, _11 |), var_X_1 |) ]] in
        do~ [[ mstore ~(| add ~(| _11, 416 |), var_Y_1 |) ]] in
        do~ [[ mstore ~(| add ~(| _11, 448 |), var_ZZ |) ]] in
        do~ [[ mstore ~(| add ~(| _11, 480 |), var_ZZZ |) ]] in
        let~ _12 := [[ mload ~(| add ~(| 32, mload ~(| 0x0140 |) |) |) ]] in
        let~ _13 := [[ mload ~(| mload ~(| 0x0140 |) |) ]] in
        let~ _14 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 512, _14 |), _13 |) ]] in
        do~ [[ mstore ~(| add ~(| _14, 544 |), _12 |) ]] in
        do~ [[ mstore ~(| add ~(| _14, 576 |), 1 |) ]] in
        do~ [[ mstore ~(| add ~(| _14, 608 |), 1 |) ]] in
        let~ _15 := [[ mload ~(| _3 |) ]] in
        let~ _16 := [[ mload ~(| _5 |) ]] in
        let~ _17 := [[ add ~(| mload ~(| 0x0140 |), 32 |) ]] in
        let~ '(var_X_2, var_Y_2, var_ZZ_1, var_ZZZ_1) := [[ usr'dollar'ecAddn2_2189 ~(| mload ~(| mload ~(| 0x0140 |) |), mload ~(| _17 |), _16, _15, usr_modulusp |) ]] in
        let~ _18 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 640, _18 |), var_X_2 |) ]] in
        do~ [[ mstore ~(| add ~(| _18, 672 |), var_Y_2 |) ]] in
        do~ [[ mstore ~(| add ~(| _18, 704 |), var_ZZ_1 |) ]] in
        do~ [[ mstore ~(| add ~(| _18, 736 |), var_ZZZ_1 |) ]] in
        let~ var_X_3 := [[ mload ~(| _8 |) ]] in
        let~ var_Y_3 := [[ mload ~(| _6 |) ]] in
        let~ '(var_X_4, var_Y_4, var_ZZ_2, var_ZZZ_2) := [[ usr'dollar'ecAddn2_2189 ~(| var_X_3, var_Y_3, mload ~(| mload ~(| 0x0140 |) |), mload ~(| _17 |), usr_modulusp |) ]] in
        let~ _19 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 768, _19 |), var_X_4 |) ]] in
        do~ [[ mstore ~(| add ~(| _19, 800 |), var_Y_4 |) ]] in
        do~ [[ mstore ~(| add ~(| _19, 832 |), var_ZZ_2 |) ]] in
        do~ [[ mstore ~(| add ~(| _19, 864 |), var_ZZZ_2 |) ]] in
        let~ '(var_X_5, var_Y_5, var_ZZ_3, var_ZZZ_3) := [[ usr'dollar'ecAddn2 ~(| var_X_4, var_Y_4, var_ZZ_2, var_ZZZ_2, mload ~(| _5 |), mload ~(| _3 |), usr_modulusp |) ]] in
        let~ _20 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 896, _20 |), var_X_5 |) ]] in
        do~ [[ mstore ~(| add ~(| _20, 928 |), var_Y_5 |) ]] in
        do~ [[ mstore ~(| add ~(| _20, 960 |), var_ZZ_3 |) ]] in
        do~ [[ mstore ~(| add ~(| _20, 992 |), var_ZZZ_3 |) ]] in
        let~ _21 := [[ add ~(| mload ~(| 0x0140 |), 96 |) ]] in
        let~ _22 := [[ mload ~(| _21 |) ]] in
        let~ _23 := [[ add ~(| mload ~(| 0x0140 |), 0x40 |) ]] in
        let~ _24 := [[ mload ~(| _23 |) ]] in
        let~ _25 := [[ mload ~(| 0x40 |) ]] in
        do~ [[ mstore ~(| add ~(| 1024, _25 |), _24 |) ]] in
        do~ [[ mstore ~(| add ~(| _25, 1056 |), _22 |) ]] in
        do~ [[ mstore ~(| add ~(| _25, 1088 |), 1 |) ]] in
        do~ [[ mstore ~(| add ~(| _25, 1120 |), 1 |) ]] in
        let~ _26 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_6, var_Y_6, var_ZZ_4, var_ZZZ_4) := [[ usr'dollar'ecAddn2_2189 ~(| mload ~(| _23 |), mload ~(| _21 |), mload ~(| _5 |), mload ~(| _3 |), mload ~(| add ~(| _26, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1152, _26 |), var_X_6 |) ]] in
        do~ [[ mstore ~(| add ~(| _26, 1184 |), var_Y_6 |) ]] in
        do~ [[ mstore ~(| add ~(| _26, 1216 |), var_ZZ_4 |) ]] in
        do~ [[ mstore ~(| add ~(| _26, 1248 |), var_ZZZ_4 |) ]] in
        let~ var_X_7 := [[ mload ~(| _8 |) ]] in
        let~ var_Y_7 := [[ mload ~(| _6 |) ]] in
        let~ _27 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_8, var_Y_8, var_ZZ_5, var_ZZZ_5) := [[ usr'dollar'ecAddn2_2189 ~(| mload ~(| _23 |), mload ~(| _21 |), var_X_7, var_Y_7, mload ~(| add ~(| _27, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1280, _27 |), var_X_8 |) ]] in
        do~ [[ mstore ~(| add ~(| _27, 1312 |), var_Y_8 |) ]] in
        do~ [[ mstore ~(| add ~(| _27, 1344 |), var_ZZ_5 |) ]] in
        do~ [[ mstore ~(| add ~(| _27, 1376 |), var_ZZZ_5 |) ]] in
        let~ _28 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_9, var_Y_9, var_ZZ_6, var_ZZZ_6) := [[ usr'dollar'ecAddn2 ~(| var_X_8, var_Y_8, var_ZZ_5, var_ZZZ_5, mload ~(| _5 |), mload ~(| _3 |), mload ~(| add ~(| _28, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1408, _28 |), var_X_9 |) ]] in
        do~ [[ mstore ~(| add ~(| _28, 1440 |), var_Y_9 |) ]] in
        do~ [[ mstore ~(| add ~(| _28, 1472 |), var_ZZ_6 |) ]] in
        do~ [[ mstore ~(| add ~(| _28, 1504 |), var_ZZZ_6 |) ]] in
        let~ _29 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_10, var_Y_10, var_ZZ_7, var_ZZZ_7) := [[ usr'dollar'ecAddn2_2189 ~(| mload ~(| mload ~(| 0x0140 |) |), mload ~(| _17 |), mload ~(| _23 |), mload ~(| _21 |), mload ~(| add ~(| _29, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1536, _29 |), var_X_10 |) ]] in
        do~ [[ mstore ~(| add ~(| _29, 1568 |), var_Y_10 |) ]] in
        do~ [[ mstore ~(| add ~(| _29, 1600 |), var_ZZ_7 |) ]] in
        do~ [[ mstore ~(| add ~(| _29, 1632 |), var_ZZZ_7 |) ]] in
        let~ _30 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_11, var_Y_11, var_ZZ_8, var_ZZZ_8) := [[ usr'dollar'ecAddn2 ~(| var_X_10, var_Y_10, var_ZZ_7, var_ZZZ_7, mload ~(| _5 |), mload ~(| _3 |), mload ~(| add ~(| _30, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1664, _30 |), var_X_11 |) ]] in
        do~ [[ mstore ~(| add ~(| _30, 1696 |), var_Y_11 |) ]] in
        do~ [[ mstore ~(| add ~(| _30, 1728 |), var_ZZ_8 |) ]] in
        do~ [[ mstore ~(| add ~(| _30, 1760 |), var_ZZZ_8 |) ]] in
        let~ _31 := [[ mload ~(| 0x40 |) ]] in
        let~ var_X_12 := [[ mload ~(| add ~(| 768, _31 |) |) ]] in
        let~ var_Y_12 := [[ mload ~(| add ~(| 800, _31 |) |) ]] in
        let~ var_ZZ_9 := [[ mload ~(| add ~(| 832, _31 |) |) ]] in
        let~ var_ZZZ_9 := [[ mload ~(| add ~(| 864, _31 |) |) ]] in
        let~ '(var_X_13, var_Y_13, var_ZZ_10, var_ZZZ_10) := [[ usr'dollar'ecAddn2 ~(| var_X_12, var_Y_12, var_ZZ_9, var_ZZZ_9, mload ~(| _23 |), mload ~(| _21 |), mload ~(| add ~(| _31, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1792, _31 |), var_X_13 |) ]] in
        do~ [[ mstore ~(| add ~(| _31, 1824 |), var_Y_13 |) ]] in
        do~ [[ mstore ~(| add ~(| _31, 1856 |), var_ZZ_10 |) ]] in
        do~ [[ mstore ~(| add ~(| _31, 1888 |), var_ZZZ_10 |) ]] in
        let~ _32 := [[ mload ~(| 0x40 |) ]] in
        let~ '(var_X_14, var_Y_14, var_ZZ_11, var_ZZZ_11) := [[ usr'dollar'ecAddn2 ~(| var_X_13, var_Y_13, var_ZZ_10, var_ZZZ_10, mload ~(| _5 |), mload ~(| _3 |), mload ~(| add ~(| _32, 2080 |) |) |) ]] in
        do~ [[ mstore ~(| add ~(| 1920, _32 |), var_X_14 |) ]] in
        do~ [[ mstore ~(| add ~(| _32, 1952 |), var_Y_14 |) ]] in
        do~ [[ mstore ~(| add ~(| _32, 1984 |), var_ZZ_11 |) ]] in
        do~ [[ mstore ~(| add ~(| _32, 2016 |), var_ZZZ_11 |) ]] in
        do~ [[ mstore ~(| 0xe0, 0 |) ]] in
        let_state~ 'tt :=
          (* for loop *)
          Shallow.for_
            (* init state *)
            tt
            (* condition *)
            (fun 'tt => [[
              iszero ~(| mload ~(| 0xe0 |) |)
            ]])
            (* body *)
            (fun 'tt =>
              do~ [[ mstore ~(| 0xe0, add ~(| add ~(| sub ~(| 1, iszero ~(| and ~(| mload ~(| 0x0120 |), mload ~(| 0x01a0 |) |) |) |), shl ~(| 1, sub ~(| 1, iszero ~(| and ~(| shr ~(| 128, mload ~(| 0x0120 |) |), mload ~(| 0x01a0 |) |) |) |) |) |), add ~(| shl ~(| 2, sub ~(| 1, iszero ~(| and ~(| mload ~(| 0x0160 |), mload ~(| 0x01a0 |) |) |) |) |), shl ~(| 3, sub ~(| 1, iszero ~(| and ~(| shr ~(| 128, mload ~(| 0x0160 |) |), mload ~(| 0x01a0 |) |) |) |) |) |) |) |) ]] in
              M.pure (BlockUnit.Tt, tt))
            (* post *)
            (fun 'tt =>
              do~ [[ mstore ~(| 0x01a0, shr ~(| 1, mload ~(| 0x01a0 |) |) |) ]] in
              M.pure (BlockUnit.Tt, tt))
        default~ tt in
        do~ [[ mstore ~(| 0x0180, mload ~(| 0x40 |) |) ]] in
        let~ _33 := [[ add ~(| mload ~(| 0x0180 |), shl ~(| 7, mload ~(| 0xe0 |) |) |) ]] in
        do~ [[ mstore ~(| 0xa0, mload ~(| _33 |) |) ]] in
        do~ [[ mstore ~(| 0x0100, mload ~(| add ~(| _33, 32 |) |) |) ]] in
        do~ [[ mstore ~(| 0x01c0, mload ~(| add ~(| _33, 0x40 |) |) |) ]] in
        do~ [[ mstore ~(| 0xe0, mload ~(| add ~(| _33, 96 |) |) |) ]] in
        do~ [[ mstore ~(| 0x01e0, mload ~(| add ~(| mload ~(| 0x0180 |), 2080 |) |) |) ]] in
        let_state~ 'tt :=
          (* for loop *)
          Shallow.for_
            (* init state *)
            tt
            (* condition *)
            (fun 'tt => [[
              mload ~(| 0x01a0 |)
            ]])
            (* body *)
            (fun 'tt =>
              do~ [[ mstore ~(| 0xc0, mulmod ~(| mload ~(| 0xa0 |), mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
              let~ usr'dollar'T4 := [[ addmod ~(| mulmod ~(| 3, mulmod ~(| mload ~(| 0xa0 |), mload ~(| 0xa0 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mulmod ~(| mload ~(| add ~(| mload ~(| 0x0140 |), 160 |) |), mulmod ~(| mload ~(| 0x01c0 |), mload ~(| 0x01c0 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) ]] in
              do~ [[ mstore ~(| 0xe0, mulmod ~(| mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0xe0 |), mload ~(| 0x01e0 |) |) |) ]] in
              do~ [[ mstore ~(| 0x01c0, mulmod ~(| mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01c0 |), mload ~(| 0x01e0 |) |) |) ]] in
              do~ [[ mstore ~(| 0xa0, addmod ~(| mulmod ~(| usr'dollar'T4, usr'dollar'T4, mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0xc0 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
              do~ [[ mstore ~(| 0x0100, addmod ~(| mulmod ~(| mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| 2, mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| usr'dollar'T4, addmod ~(| mload ~(| 0xa0 |), sub ~(| mload ~(| 0x01e0 |), mload ~(| 0xc0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
              let~ usr'dollar'T1 := [[ add ~(| add ~(| sub ~(| 1, iszero ~(| and ~(| mload ~(| 0x0120 |), mload ~(| 0x01a0 |) |) |) |), shl ~(| 1, sub ~(| 1, iszero ~(| and ~(| shr ~(| 128, mload ~(| 0x0120 |) |), mload ~(| 0x01a0 |) |) |) |) |) |), add ~(| shl ~(| 2, sub ~(| 1, iszero ~(| and ~(| mload ~(| 0x0160 |), mload ~(| 0x01a0 |) |) |) |) |), shl ~(| 3, sub ~(| 1, iszero ~(| and ~(| shr ~(| 128, mload ~(| 0x0160 |) |), mload ~(| 0x01a0 |) |) |) |) |) |) |) ]] in
              let_state~ 'tt := [[
                Shallow.if_ (|
                  iszero ~(| usr'dollar'T1 |),
                  do~ [[ mstore ~(| 0x0100, sub ~(| mload ~(| 0x01e0 |), mload ~(| 0x0100 |) |) |) ]] in
                  M.pure (BlockUnit.Continue, tt),
                  tt
                |)
              ]] default~ tt in
              let~ usr'dollar'T4_1 := [[ mload ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |) |) ]] in
              let~ _34 := [[ add ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |), 96 |) ]] in
              let~ _35 := [[ mload ~(| _34 |) ]] in
              do~ [[ mstore ~(| add ~(| mload ~(| 0x0180 |), 2144 |), _35 |) ]] in
              let_state~ 'tt := [[
                Shallow.if_ (|
                  iszero ~(| mload ~(| 0x01c0 |) |),
                  do~ [[ mstore ~(| 0xa0, usr'dollar'T4_1 |) ]] in
                  do~ [[ mstore ~(| 0x0100, mload ~(| add ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |), 32 |) |) |) ]] in
                  do~ [[ mstore ~(| 0x01c0, mload ~(| add ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |), 0x40 |) |) |) ]] in
                  do~ [[ mstore ~(| 0xe0, mload ~(| _34 |) |) ]] in
                  M.pure (BlockUnit.Continue, tt),
                  tt
                |)
              ]] default~ tt in
              let~ _36 := [[ addmod ~(| mulmod ~(| mload ~(| add ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |), 32 |) |), mload ~(| 0xe0 |), mload ~(| 0x01e0 |) |), mulmod ~(| mload ~(| 0x0100 |), _35, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) ]] in
              do~ [[ mstore ~(| add ~(| mload ~(| 0x0180 |), 2112 |), _36 |) ]] in
              let~ usr'dollar'T1_1 := [[ mload ~(| add ~(| add ~(| mload ~(| 0x0180 |), shl ~(| 7, usr'dollar'T1 |) |), 0x40 |) |) ]] in
              let~ usr'dollar'T2 := [[ addmod ~(| mulmod ~(| usr'dollar'T4_1, mload ~(| 0x01c0 |), mload ~(| 0x01e0 |) |), sub ~(| mload ~(| 0x01e0 |), mulmod ~(| mload ~(| 0xa0 |), usr'dollar'T1_1, mload ~(| 0x01e0 |) |) |), mload ~(| 0x01e0 |) |) ]] in
              let_state~ '(usr'dollar'T2, usr'dollar'T4_1) := [[
                Shallow.if_ (|
                  iszero ~(| _36 |),
                  let_state~ '(usr'dollar'T2, usr'dollar'T4_1) := [[
                    Shallow.if_ (|
                      iszero ~(| usr'dollar'T2 |),
                      do~ [[ mstore ~(| 0x80, mulmod ~(| mload ~(| 0xa0 |), mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
                      do~ [[ mstore ~(| add ~(| mload ~(| 0x0180 |), 2112 |), mload ~(| 0x80 |) |) ]] in
                      let~ usr'dollar'T4_1 := [[ addmod ~(| mulmod ~(| 3, mulmod ~(| mload ~(| 0xa0 |), mload ~(| 0xa0 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mulmod ~(| mload ~(| add ~(| mload ~(| 0x0140 |), 160 |) |), mulmod ~(| mload ~(| 0x01c0 |), mload ~(| 0x01c0 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) ]] in
                      do~ [[ mstore ~(| 0xe0, mulmod ~(| mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0xe0 |), mload ~(| 0x01e0 |) |) |) ]] in
                      do~ [[ mstore ~(| 0x01c0, mulmod ~(| mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01c0 |), mload ~(| 0x01e0 |) |) |) ]] in
                      do~ [[ mstore ~(| 0xa0, addmod ~(| mulmod ~(| usr'dollar'T4_1, usr'dollar'T4_1, mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x80 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
                      let~ usr'dollar'T2 := [[ mulmod ~(| usr'dollar'T4_1, addmod ~(| mload ~(| 0x80 |), sub ~(| mload ~(| 0x01e0 |), mload ~(| 0xa0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) ]] in
                      do~ [[ mstore ~(| 0x0100, addmod ~(| usr'dollar'T2, mulmod ~(| mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x0100 |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
                      M.pure (BlockUnit.Continue, (usr'dollar'T2, usr'dollar'T4_1)),
                      (usr'dollar'T2, usr'dollar'T4_1)
                    |)
                  ]] default~ (usr'dollar'T2, usr'dollar'T4_1) in
                  M.pure (BlockUnit.Tt, (usr'dollar'T2, usr'dollar'T4_1)),
                  (usr'dollar'T2, usr'dollar'T4_1)
                |)
              ]] default~ tt in
              do~ [[ mstore ~(| 0x01c0, mulmod ~(| mulmod ~(| mload ~(| 0x01c0 |), mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), usr'dollar'T1_1, mload ~(| 0x01e0 |) |) |) ]] in
              let~ usr'dollar'T1_2 := [[ mulmod ~(| mload ~(| 0xa0 |), usr'dollar'T1_1, mload ~(| 0x01e0 |) |) ]] in
              do~ [[ mstore ~(| 0xe0, mulmod ~(| mulmod ~(| mload ~(| 0xe0 |), mulmod ~(| mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), usr'dollar'T2, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), _35, mload ~(| 0x01e0 |) |) |) ]] in
              let~ _37 := [[ mload ~(| add ~(| mload ~(| 0x0180 |), 2112 |) |) ]] in
              do~ [[ mstore ~(| 0xa0, addmod ~(| addmod ~(| mulmod ~(| _37, _37, mload ~(| 0x01e0 |) |), sub ~(| mload ~(| 0x01e0 |), mulmod ~(| mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), usr'dollar'T2, mload ~(| 0x01e0 |) |) |), mload ~(| 0x01e0 |) |), mulmod ~(| usr'dollar'T1_2, mulmod ~(| add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |), mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
              do~ [[ mstore ~(| 0x0100, addmod ~(| mulmod ~(| addmod ~(| mulmod ~(| usr'dollar'T1_2, mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), sub ~(| mload ~(| 0x01e0 |), mload ~(| 0xa0 |) |), mload ~(| 0x01e0 |) |), _37, mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| mload ~(| 0x0100 |), _35, mload ~(| 0x01e0 |) |), mulmod ~(| mulmod ~(| usr'dollar'T2, usr'dollar'T2, mload ~(| 0x01e0 |) |), usr'dollar'T2, mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |), mload ~(| 0x01e0 |) |) |) ]] in
              M.pure (BlockUnit.Tt, tt))
            (* post *)
            (fun 'tt =>
              do~ [[ mstore ~(| 0x01a0, shr ~(| 1, mload ~(| 0x01a0 |) |) |) ]] in
              M.pure (BlockUnit.Tt, tt))
        default~ tt in
        do~ [[ mstore ~(| 0x40, 2176 |) ]] in
        do~ [[ mstore ~(| 2272, mload ~(| 0x01c0 |) |) ]] in
        do~ [[ mstore ~(| 2176, 32 |) ]] in
        do~ [[ mstore ~(| 2208, 32 |) ]] in
        do~ [[ mstore ~(| 2240, 32 |) ]] in
        do~ [[ mstore ~(| 2304, add ~(| mload ~(| 0x01e0 |), not ~(| 1 |) |) |) ]] in
        do~ [[ mstore ~(| 2336, mload ~(| 0x01e0 |) |) ]] in
        let_state~ 'tt := [[
          Shallow.if_ (|
            iszero ~(| staticcall ~(| not ~(| 0 |), 0x05, 2176, 192, 2176, 32 |) |),
            do~ [[ mstore ~(| 0x40, 2047 |) ]] in
            do~ [[ revert ~(| 0x40, 32 |) ]] in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ tt in
        do~ [[ mstore ~(| 0xa0, mulmod ~(| mload ~(| 0xa0 |), mload ~(| 2176 |), mload ~(| 0x01e0 |) |) |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure result.

    Definition fun_ecGenMulmuladdX_store (var_Q_mpos : U256.t) (var_scalar_u : U256.t) (var_scalar_v : U256.t) : M.t U256.t :=
      let~ '(_, result) :=
        do~ [[ mstore ~(| 0x0140, var_Q_mpos |) ]] in
        do~ [[ mstore ~(| 0x0120, var_scalar_u |) ]] in
        do~ [[ mstore ~(| 0x0160, var_scalar_v |) ]] in
        do~ [[ mstore ~(| 0xa0, 0 |) ]] in
        do~ [[ fun_ecGenMulmuladdX_store_2814 ~(||) ]] in
        let~ var_X := [[ mload ~(| 0xa0 |) ]] in
        M.pure (BlockUnit.Tt, var_X)
      in
      M.pure result.

    Definition body : M.t unit :=
      do~
        let~ _1 := [[ memoryguard ~(| 0x0200 |) ]] in
        let_state~ 'tt := [[
          Shallow.if_ (|
            iszero ~(| lt ~(| calldatasize ~(||), 4 |) |),
            let_state~ 'tt := [[
              Shallow.if_ (|
                eq ~(| 0x81a379ec, shr ~(| 224, calldataload ~(| 0 |) |) |),
                let_state~ 'tt := [[
                  Shallow.if_ (|
                    callvalue ~(||),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure (BlockUnit.Tt, tt),
                    tt
                  |)
                ]] default~ tt in
                let_state~ 'tt := [[
                  Shallow.if_ (|
                    slt ~(| add ~(| calldatasize ~(||), not ~(| 3 |) |), 384 |),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure (BlockUnit.Tt, tt),
                    tt
                  |)
                ]] default~ tt in
                let_state~ 'tt := [[
                  Shallow.if_ (|
                    iszero ~(| slt ~(| 35, calldatasize ~(||) |) |),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure (BlockUnit.Tt, tt),
                    tt
                  |)
                ]] default~ tt in
                let~ newFreePtr := [[ add ~(| _1, 320 |) ]] in
                let_state~ 'tt := [[
                  Shallow.if_ (|
                    or ~(| gt ~(| newFreePtr, 0xffffffffffffffff |), lt ~(| newFreePtr, _1 |) |),
                    do~ [[ mstore ~(| 0, shl ~(| 224, 0x4e487b71 |) |) ]] in
                    do~ [[ mstore ~(| 4, 0x41 |) ]] in
                    do~ [[ revert ~(| 0, 0x24 |) ]] in
                    M.pure (BlockUnit.Tt, tt),
                    tt
                  |)
                ]] default~ tt in
                do~ [[ mstore ~(| 64, newFreePtr |) ]] in
                let~ dst := [[ _1 ]] in
                let_state~ 'tt := [[
                  Shallow.if_ (|
                    gt ~(| 324, calldatasize ~(||) |),
                    do~ [[ revert ~(| 0, 0 |) ]] in
                    M.pure (BlockUnit.Tt, tt),
                    tt
                  |)
                ]] default~ tt in
                let~ src := [[ 4 ]] in
                let_state~ '(dst, src) :=
                  (* for loop *)
                  Shallow.for_
                    (* init state *)
                    (dst, src)
                    (* condition *)
                    (fun '(dst, src) => [[
                      lt ~(| src, 324 |)
                    ]])
                    (* body *)
                    (fun '(dst, src) =>
                      Shallow.lift_state_update
                        (fun dst => (dst, src))
                        (do~ [[ mstore ~(| dst, calldataload ~(| src |) |) ]] in
                        let~ dst := [[ add ~(| dst, 0x20 |) ]] in
                        M.pure (BlockUnit.Tt, dst)))
                    (* post *)
                    (fun '(dst, src) =>
                      Shallow.lift_state_update
                        (fun src => (dst, src))
                        (let~ src := [[ add ~(| src, 0x20 |) ]] in
                        M.pure (BlockUnit.Tt, src)))
                default~ tt in
                let~ ret := [[ fun_ecGenMulmuladdX_store ~(| _1, calldataload ~(| 324 |), calldataload ~(| 356 |) |) ]] in
                let~ memPos := [[ mload ~(| 64 |) ]] in
                do~ [[ mstore ~(| memPos, ret |) ]] in
                do~ [[ return_ ~(| memPos, 0x20 |) ]] in
                M.pure (BlockUnit.Tt, tt),
                tt
              |)
            ]] default~ tt in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ tt in
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.
  End Contract_91_deployed.
End Contract_91.
